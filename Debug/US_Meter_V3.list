
US_Meter_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009220  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080093a8  080093a8  000193a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093c4  080093c4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080093c4  080093c4  000193c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093cc  080093cc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093cc  080093cc  000193cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093d0  080093d0  000193d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080093d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000008b8  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000948  20000948  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f255  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003faa  00000000  00000000  0003f315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001688  00000000  00000000  000432c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001508  00000000  00000000  00044948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002497a  00000000  00000000  00045e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c80d  00000000  00000000  0006a7ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3c55  00000000  00000000  00086fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015ac2c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062c4  00000000  00000000  0015ac80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009390 	.word	0x08009390

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009390 	.word	0x08009390

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b96e 	b.w	8000c98 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468c      	mov	ip, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f040 8083 	bne.w	8000aea <__udivmoddi4+0x116>
 80009e4:	428a      	cmp	r2, r1
 80009e6:	4617      	mov	r7, r2
 80009e8:	d947      	bls.n	8000a7a <__udivmoddi4+0xa6>
 80009ea:	fab2 f282 	clz	r2, r2
 80009ee:	b142      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009f0:	f1c2 0020 	rsb	r0, r2, #32
 80009f4:	fa24 f000 	lsr.w	r0, r4, r0
 80009f8:	4091      	lsls	r1, r2
 80009fa:	4097      	lsls	r7, r2
 80009fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000a00:	4094      	lsls	r4, r2
 8000a02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a06:	0c23      	lsrs	r3, r4, #16
 8000a08:	fbbc f6f8 	udiv	r6, ip, r8
 8000a0c:	fa1f fe87 	uxth.w	lr, r7
 8000a10:	fb08 c116 	mls	r1, r8, r6, ip
 8000a14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a18:	fb06 f10e 	mul.w	r1, r6, lr
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d909      	bls.n	8000a34 <__udivmoddi4+0x60>
 8000a20:	18fb      	adds	r3, r7, r3
 8000a22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a26:	f080 8119 	bcs.w	8000c5c <__udivmoddi4+0x288>
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	f240 8116 	bls.w	8000c5c <__udivmoddi4+0x288>
 8000a30:	3e02      	subs	r6, #2
 8000a32:	443b      	add	r3, r7
 8000a34:	1a5b      	subs	r3, r3, r1
 8000a36:	b2a4      	uxth	r4, r4
 8000a38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a48:	45a6      	cmp	lr, r4
 8000a4a:	d909      	bls.n	8000a60 <__udivmoddi4+0x8c>
 8000a4c:	193c      	adds	r4, r7, r4
 8000a4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a52:	f080 8105 	bcs.w	8000c60 <__udivmoddi4+0x28c>
 8000a56:	45a6      	cmp	lr, r4
 8000a58:	f240 8102 	bls.w	8000c60 <__udivmoddi4+0x28c>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	443c      	add	r4, r7
 8000a60:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a64:	eba4 040e 	sub.w	r4, r4, lr
 8000a68:	2600      	movs	r6, #0
 8000a6a:	b11d      	cbz	r5, 8000a74 <__udivmoddi4+0xa0>
 8000a6c:	40d4      	lsrs	r4, r2
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e9c5 4300 	strd	r4, r3, [r5]
 8000a74:	4631      	mov	r1, r6
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	b902      	cbnz	r2, 8000a7e <__udivmoddi4+0xaa>
 8000a7c:	deff      	udf	#255	; 0xff
 8000a7e:	fab2 f282 	clz	r2, r2
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d150      	bne.n	8000b28 <__udivmoddi4+0x154>
 8000a86:	1bcb      	subs	r3, r1, r7
 8000a88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a8c:	fa1f f887 	uxth.w	r8, r7
 8000a90:	2601      	movs	r6, #1
 8000a92:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a96:	0c21      	lsrs	r1, r4, #16
 8000a98:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aa0:	fb08 f30c 	mul.w	r3, r8, ip
 8000aa4:	428b      	cmp	r3, r1
 8000aa6:	d907      	bls.n	8000ab8 <__udivmoddi4+0xe4>
 8000aa8:	1879      	adds	r1, r7, r1
 8000aaa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aae:	d202      	bcs.n	8000ab6 <__udivmoddi4+0xe2>
 8000ab0:	428b      	cmp	r3, r1
 8000ab2:	f200 80e9 	bhi.w	8000c88 <__udivmoddi4+0x2b4>
 8000ab6:	4684      	mov	ip, r0
 8000ab8:	1ac9      	subs	r1, r1, r3
 8000aba:	b2a3      	uxth	r3, r4
 8000abc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ac0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ac4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ac8:	fb08 f800 	mul.w	r8, r8, r0
 8000acc:	45a0      	cmp	r8, r4
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x10c>
 8000ad0:	193c      	adds	r4, r7, r4
 8000ad2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ad6:	d202      	bcs.n	8000ade <__udivmoddi4+0x10a>
 8000ad8:	45a0      	cmp	r8, r4
 8000ada:	f200 80d9 	bhi.w	8000c90 <__udivmoddi4+0x2bc>
 8000ade:	4618      	mov	r0, r3
 8000ae0:	eba4 0408 	sub.w	r4, r4, r8
 8000ae4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ae8:	e7bf      	b.n	8000a6a <__udivmoddi4+0x96>
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0x12e>
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	f000 80b1 	beq.w	8000c56 <__udivmoddi4+0x282>
 8000af4:	2600      	movs	r6, #0
 8000af6:	e9c5 0100 	strd	r0, r1, [r5]
 8000afa:	4630      	mov	r0, r6
 8000afc:	4631      	mov	r1, r6
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	fab3 f683 	clz	r6, r3
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	d14a      	bne.n	8000ba0 <__udivmoddi4+0x1cc>
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d302      	bcc.n	8000b14 <__udivmoddi4+0x140>
 8000b0e:	4282      	cmp	r2, r0
 8000b10:	f200 80b8 	bhi.w	8000c84 <__udivmoddi4+0x2b0>
 8000b14:	1a84      	subs	r4, r0, r2
 8000b16:	eb61 0103 	sbc.w	r1, r1, r3
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	468c      	mov	ip, r1
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	d0a8      	beq.n	8000a74 <__udivmoddi4+0xa0>
 8000b22:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b26:	e7a5      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000b28:	f1c2 0320 	rsb	r3, r2, #32
 8000b2c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b30:	4097      	lsls	r7, r2
 8000b32:	fa01 f002 	lsl.w	r0, r1, r2
 8000b36:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b3a:	40d9      	lsrs	r1, r3
 8000b3c:	4330      	orrs	r0, r6
 8000b3e:	0c03      	lsrs	r3, r0, #16
 8000b40:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b50:	fb06 f108 	mul.w	r1, r6, r8
 8000b54:	4299      	cmp	r1, r3
 8000b56:	fa04 f402 	lsl.w	r4, r4, r2
 8000b5a:	d909      	bls.n	8000b70 <__udivmoddi4+0x19c>
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b62:	f080 808d 	bcs.w	8000c80 <__udivmoddi4+0x2ac>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 808a 	bls.w	8000c80 <__udivmoddi4+0x2ac>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	443b      	add	r3, r7
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b281      	uxth	r1, r0
 8000b74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b80:	fb00 f308 	mul.w	r3, r0, r8
 8000b84:	428b      	cmp	r3, r1
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x1c4>
 8000b88:	1879      	adds	r1, r7, r1
 8000b8a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b8e:	d273      	bcs.n	8000c78 <__udivmoddi4+0x2a4>
 8000b90:	428b      	cmp	r3, r1
 8000b92:	d971      	bls.n	8000c78 <__udivmoddi4+0x2a4>
 8000b94:	3802      	subs	r0, #2
 8000b96:	4439      	add	r1, r7
 8000b98:	1acb      	subs	r3, r1, r3
 8000b9a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b9e:	e778      	b.n	8000a92 <__udivmoddi4+0xbe>
 8000ba0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ba4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ba8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bac:	431c      	orrs	r4, r3
 8000bae:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bb2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bb6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bba:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bbe:	431f      	orrs	r7, r3
 8000bc0:	0c3b      	lsrs	r3, r7, #16
 8000bc2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bc6:	fa1f f884 	uxth.w	r8, r4
 8000bca:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bd2:	fb09 fa08 	mul.w	sl, r9, r8
 8000bd6:	458a      	cmp	sl, r1
 8000bd8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bdc:	fa00 f306 	lsl.w	r3, r0, r6
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x220>
 8000be2:	1861      	adds	r1, r4, r1
 8000be4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000be8:	d248      	bcs.n	8000c7c <__udivmoddi4+0x2a8>
 8000bea:	458a      	cmp	sl, r1
 8000bec:	d946      	bls.n	8000c7c <__udivmoddi4+0x2a8>
 8000bee:	f1a9 0902 	sub.w	r9, r9, #2
 8000bf2:	4421      	add	r1, r4
 8000bf4:	eba1 010a 	sub.w	r1, r1, sl
 8000bf8:	b2bf      	uxth	r7, r7
 8000bfa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bfe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c02:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c06:	fb00 f808 	mul.w	r8, r0, r8
 8000c0a:	45b8      	cmp	r8, r7
 8000c0c:	d907      	bls.n	8000c1e <__udivmoddi4+0x24a>
 8000c0e:	19e7      	adds	r7, r4, r7
 8000c10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c14:	d22e      	bcs.n	8000c74 <__udivmoddi4+0x2a0>
 8000c16:	45b8      	cmp	r8, r7
 8000c18:	d92c      	bls.n	8000c74 <__udivmoddi4+0x2a0>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4427      	add	r7, r4
 8000c1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c22:	eba7 0708 	sub.w	r7, r7, r8
 8000c26:	fba0 8902 	umull	r8, r9, r0, r2
 8000c2a:	454f      	cmp	r7, r9
 8000c2c:	46c6      	mov	lr, r8
 8000c2e:	4649      	mov	r1, r9
 8000c30:	d31a      	bcc.n	8000c68 <__udivmoddi4+0x294>
 8000c32:	d017      	beq.n	8000c64 <__udivmoddi4+0x290>
 8000c34:	b15d      	cbz	r5, 8000c4e <__udivmoddi4+0x27a>
 8000c36:	ebb3 020e 	subs.w	r2, r3, lr
 8000c3a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c3e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c42:	40f2      	lsrs	r2, r6
 8000c44:	ea4c 0202 	orr.w	r2, ip, r2
 8000c48:	40f7      	lsrs	r7, r6
 8000c4a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c4e:	2600      	movs	r6, #0
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	462e      	mov	r6, r5
 8000c58:	4628      	mov	r0, r5
 8000c5a:	e70b      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000c5c:	4606      	mov	r6, r0
 8000c5e:	e6e9      	b.n	8000a34 <__udivmoddi4+0x60>
 8000c60:	4618      	mov	r0, r3
 8000c62:	e6fd      	b.n	8000a60 <__udivmoddi4+0x8c>
 8000c64:	4543      	cmp	r3, r8
 8000c66:	d2e5      	bcs.n	8000c34 <__udivmoddi4+0x260>
 8000c68:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c6c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c70:	3801      	subs	r0, #1
 8000c72:	e7df      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c74:	4608      	mov	r0, r1
 8000c76:	e7d2      	b.n	8000c1e <__udivmoddi4+0x24a>
 8000c78:	4660      	mov	r0, ip
 8000c7a:	e78d      	b.n	8000b98 <__udivmoddi4+0x1c4>
 8000c7c:	4681      	mov	r9, r0
 8000c7e:	e7b9      	b.n	8000bf4 <__udivmoddi4+0x220>
 8000c80:	4666      	mov	r6, ip
 8000c82:	e775      	b.n	8000b70 <__udivmoddi4+0x19c>
 8000c84:	4630      	mov	r0, r6
 8000c86:	e74a      	b.n	8000b1e <__udivmoddi4+0x14a>
 8000c88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c8c:	4439      	add	r1, r7
 8000c8e:	e713      	b.n	8000ab8 <__udivmoddi4+0xe4>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	e724      	b.n	8000ae0 <__udivmoddi4+0x10c>
 8000c96:	bf00      	nop

08000c98 <__aeabi_idiv0>:
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <delay_us>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay_us (uint16_t us)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <delay_us+0x30>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2200      	movs	r2, #0
 8000cac:	625a      	str	r2, [r3, #36]	; 0x24
	while ((uint16_t)__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8000cae:	bf00      	nop
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <delay_us+0x30>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	88fa      	ldrh	r2, [r7, #6]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d8f8      	bhi.n	8000cb0 <delay_us+0x14>

}
 8000cbe:	bf00      	nop
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	20000128 	.word	0x20000128

08000cd0 <US_TRIG>:

void US_TRIG (void){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cda:	480b      	ldr	r0, [pc, #44]	; (8000d08 <US_TRIG+0x38>)
 8000cdc:	f001 f948 	bl	8001f70 <HAL_GPIO_WritePin>
	delay_us (10);
 8000ce0:	200a      	movs	r0, #10
 8000ce2:	f7ff ffdb 	bl	8000c9c <delay_us>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cec:	4806      	ldr	r0, [pc, #24]	; (8000d08 <US_TRIG+0x38>)
 8000cee:	f001 f93f 	bl	8001f70 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1); // Enable interrupt
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <US_TRIG+0x3c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	68da      	ldr	r2, [r3, #12]
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <US_TRIG+0x3c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f042 0202 	orr.w	r2, r2, #2
 8000d00:	60da      	str	r2, [r3, #12]
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40020c00 	.word	0x40020c00
 8000d0c:	20000128 	.word	0x20000128

08000d10 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	7f1b      	ldrb	r3, [r3, #28]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d173      	bne.n	8000e08 <HAL_TIM_IC_CaptureCallback+0xf8>
	{
		if ( Start == false ) {
 8000d20:	4b3d      	ldr	r3, [pc, #244]	; (8000e18 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d11a      	bne.n	8000d5e <HAL_TIM_IC_CaptureCallback+0x4e>
			Read1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // Read first value from Timer
 8000d28:	2100      	movs	r1, #0
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f004 fd86 	bl	800583c <HAL_TIM_ReadCapturedValue>
 8000d30:	4603      	mov	r3, r0
 8000d32:	4a3a      	ldr	r2, [pc, #232]	; (8000e1c <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000d34:	6013      	str	r3, [r2, #0]
			Start = true;
 8000d36:	4b38      	ldr	r3, [pc, #224]	; (8000e18 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING); // count form high to low
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	6a1a      	ldr	r2, [r3, #32]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f022 020a 	bic.w	r2, r2, #10
 8000d4a:	621a      	str	r2, [r3, #32]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	6a1a      	ldr	r2, [r3, #32]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f042 0202 	orr.w	r2, r2, #2
 8000d5a:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1); // Disable interrupt
		}

	}

}
 8000d5c:	e054      	b.n	8000e08 <HAL_TIM_IC_CaptureCallback+0xf8>
			Read2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // Read second value from Timer
 8000d5e:	2100      	movs	r1, #0
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f004 fd6b 	bl	800583c <HAL_TIM_ReadCapturedValue>
 8000d66:	4603      	mov	r3, r0
 8000d68:	4a2d      	ldr	r2, [pc, #180]	; (8000e20 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000d6a:	6013      	str	r3, [r2, #0]
			Start = false;
 8000d6c:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
			if (Read2 > Read1 ) {
 8000d72:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d907      	bls.n	8000d8e <HAL_TIM_IC_CaptureCallback+0x7e>
				Diff = Read2 - Read1;
 8000d7e:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	4a26      	ldr	r2, [pc, #152]	; (8000e24 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	e009      	b.n	8000da2 <HAL_TIM_IC_CaptureCallback+0x92>
				Diff = Read2 + (ARR - Read1);
 8000d8e:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000d9c:	33ff      	adds	r3, #255	; 0xff
 8000d9e:	4a21      	ldr	r2, [pc, #132]	; (8000e24 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000da0:	6013      	str	r3, [r2, #0]
			Dist = Diff * 0.0343/2; // Distance is time between measurements multiplied by half of the speed of sound (time*(343/2))
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fb50 	bl	800044c <__aeabi_ui2d>
 8000dac:	a318      	add	r3, pc, #96	; (adr r3, 8000e10 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db2:	f7ff fbc5 	bl	8000540 <__aeabi_dmul>
 8000db6:	4602      	mov	r2, r0
 8000db8:	460b      	mov	r3, r1
 8000dba:	4610      	mov	r0, r2
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f04f 0200 	mov.w	r2, #0
 8000dc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dc6:	f7ff fce5 	bl	8000794 <__aeabi_ddiv>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	460b      	mov	r3, r1
 8000dce:	4610      	mov	r0, r2
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f7ff fdc7 	bl	8000964 <__aeabi_d2uiz>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4a13      	ldr	r2, [pc, #76]	; (8000e28 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000dda:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING); // count form low to high
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	6a1a      	ldr	r2, [r3, #32]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f022 020a 	bic.w	r2, r2, #10
 8000dea:	621a      	str	r2, [r3, #32]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	6a12      	ldr	r2, [r2, #32]
 8000df6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1); // Disable interrupt
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	68da      	ldr	r2, [r3, #12]
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f022 0202 	bic.w	r2, r2, #2
 8000e06:	60da      	str	r2, [r3, #12]
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	04816f00 	.word	0x04816f00
 8000e14:	3fa18fc5 	.word	0x3fa18fc5
 8000e18:	200000ac 	.word	0x200000ac
 8000e1c:	200000b0 	.word	0x200000b0
 8000e20:	200000b4 	.word	0x200000b4
 8000e24:	200000b8 	.word	0x200000b8
 8000e28:	200000bc 	.word	0x200000bc
 8000e2c:	20000128 	.word	0x20000128

08000e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e34:	f000 fd58 	bl	80018e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e38:	f000 f860 	bl	8000efc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e3c:	f000 f8c8 	bl	8000fd0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e40:	f000 f9fa 	bl	8001238 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e44:	f000 f8e0 	bl	8001008 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000e48:	f000 f93a 	bl	80010c0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000e4c:	f000 f968 	bl	8001120 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000e50:	f007 fe8c 	bl	8008b6c <MX_USB_HOST_Init>
  MX_I2S2_Init();
 8000e54:	f000 f906 	bl	8001064 <MX_I2S2_Init>
  MX_TIM1_Init();
 8000e58:	f000 f998 	bl	800118c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1); // Starts TIM1 Input Capture
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4823      	ldr	r0, [pc, #140]	; (8000eec <main+0xbc>)
 8000e60:	f004 fa6c 	bl	800533c <HAL_TIM_IC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  US_TRIG();
 8000e64:	f7ff ff34 	bl	8000cd0 <US_TRIG>

	  /* Statement responsive for matching register values for desired distances */

	  if (30 <= Dist && Dist < 50){
 8000e68:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <main+0xc0>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b1d      	cmp	r3, #29
 8000e6e:	d908      	bls.n	8000e82 <main+0x52>
 8000e70:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <main+0xc0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b31      	cmp	r3, #49	; 0x31
 8000e76:	d804      	bhi.n	8000e82 <main+0x52>
		  LED_ON = 0x1000;
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <main+0xc4>)
 8000e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	e029      	b.n	8000ed6 <main+0xa6>
	  } else if (20 <= Dist && Dist < 30){
 8000e82:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <main+0xc0>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b13      	cmp	r3, #19
 8000e88:	d908      	bls.n	8000e9c <main+0x6c>
 8000e8a:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <main+0xc0>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b1d      	cmp	r3, #29
 8000e90:	d804      	bhi.n	8000e9c <main+0x6c>
		  LED_ON = 0x3000;
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <main+0xc4>)
 8000e94:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	e01c      	b.n	8000ed6 <main+0xa6>
	  } else if (10 <= Dist && Dist < 20){
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <main+0xc0>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b09      	cmp	r3, #9
 8000ea2:	d908      	bls.n	8000eb6 <main+0x86>
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <main+0xc0>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b13      	cmp	r3, #19
 8000eaa:	d804      	bhi.n	8000eb6 <main+0x86>
		  LED_ON = 0x7000;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <main+0xc4>)
 8000eae:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	e00f      	b.n	8000ed6 <main+0xa6>
	  } else if (4 < Dist && Dist < 10){
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <main+0xc0>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	d908      	bls.n	8000ed0 <main+0xa0>
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <main+0xc0>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b09      	cmp	r3, #9
 8000ec4:	d804      	bhi.n	8000ed0 <main+0xa0>
		  LED_ON = 0xF000;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <main+0xc4>)
 8000ec8:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	e002      	b.n	8000ed6 <main+0xa6>
	  } else {
		  LED_ON = 0;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <main+0xc4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
	  }

	  GPIOD->ODR = LED_ON; // Change register value to power integrated LEDs
 8000ed6:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <main+0xc8>)
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <main+0xc4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6153      	str	r3, [r2, #20]


	  HAL_Delay(200);
 8000ede:	20c8      	movs	r0, #200	; 0xc8
 8000ee0:	f000 fd74 	bl	80019cc <HAL_Delay>


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000ee4:	f007 fe68 	bl	8008bb8 <MX_USB_HOST_Process>
	  US_TRIG();
 8000ee8:	e7bc      	b.n	8000e64 <main+0x34>
 8000eea:	bf00      	nop
 8000eec:	20000128 	.word	0x20000128
 8000ef0:	200000bc 	.word	0x200000bc
 8000ef4:	200000c0 	.word	0x200000c0
 8000ef8:	40020c00 	.word	0x40020c00

08000efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b094      	sub	sp, #80	; 0x50
 8000f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f02:	f107 0320 	add.w	r3, r7, #32
 8000f06:	2230      	movs	r2, #48	; 0x30
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f008 f970 	bl	80091f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <SystemClock_Config+0xcc>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	4a27      	ldr	r2, [pc, #156]	; (8000fc8 <SystemClock_Config+0xcc>)
 8000f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f30:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <SystemClock_Config+0xcc>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	4b22      	ldr	r3, [pc, #136]	; (8000fcc <SystemClock_Config+0xd0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a21      	ldr	r2, [pc, #132]	; (8000fcc <SystemClock_Config+0xd0>)
 8000f46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f4a:	6013      	str	r3, [r2, #0]
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <SystemClock_Config+0xd0>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f62:	2302      	movs	r3, #2
 8000f64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f6c:	2308      	movs	r3, #8
 8000f6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f70:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f76:	2302      	movs	r3, #2
 8000f78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7e:	f107 0320 	add.w	r3, r7, #32
 8000f82:	4618      	mov	r0, r3
 8000f84:	f003 fb62 	bl	800464c <HAL_RCC_OscConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f8e:	f000 fa2f 	bl	80013f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f92:	230f      	movs	r3, #15
 8000f94:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f96:	2302      	movs	r3, #2
 8000f98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fa2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	2105      	movs	r1, #5
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f003 fdc3 	bl	8004b3c <HAL_RCC_ClockConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fbc:	f000 fa18 	bl	80013f0 <Error_Handler>
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	3750      	adds	r7, #80	; 0x50
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40007000 	.word	0x40007000

08000fd0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000fe6:	23c0      	movs	r3, #192	; 0xc0
 8000fe8:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000fea:	2302      	movs	r3, #2
 8000fec:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fee:	463b      	mov	r3, r7
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f003 ff8b 	bl	8004f0c <HAL_RCCEx_PeriphCLKConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8000ffc:	f000 f9f8 	bl	80013f0 <Error_Handler>
  }
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <MX_I2C1_Init+0x50>)
 800100e:	4a13      	ldr	r2, [pc, #76]	; (800105c <MX_I2C1_Init+0x54>)
 8001010:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_I2C1_Init+0x50>)
 8001014:	4a12      	ldr	r2, [pc, #72]	; (8001060 <MX_I2C1_Init+0x58>)
 8001016:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_I2C1_Init+0x50>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <MX_I2C1_Init+0x50>)
 8001020:	2200      	movs	r2, #0
 8001022:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_I2C1_Init+0x50>)
 8001026:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800102a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <MX_I2C1_Init+0x50>)
 800102e:	2200      	movs	r2, #0
 8001030:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_I2C1_Init+0x50>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <MX_I2C1_Init+0x50>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <MX_I2C1_Init+0x50>)
 8001040:	2200      	movs	r2, #0
 8001042:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001044:	4804      	ldr	r0, [pc, #16]	; (8001058 <MX_I2C1_Init+0x50>)
 8001046:	f002 fd1d 	bl	8003a84 <HAL_I2C_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001050:	f000 f9ce 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200000d4 	.word	0x200000d4
 800105c:	40005400 	.word	0x40005400
 8001060:	000186a0 	.word	0x000186a0

08001064 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <MX_I2S2_Init+0x54>)
 800106a:	4a14      	ldr	r2, [pc, #80]	; (80010bc <MX_I2S2_Init+0x58>)
 800106c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <MX_I2S2_Init+0x54>)
 8001070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001074:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <MX_I2S2_Init+0x54>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_I2S2_Init+0x54>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <MX_I2S2_Init+0x54>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <MX_I2S2_Init+0x54>)
 800108a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800108e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_I2S2_Init+0x54>)
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <MX_I2S2_Init+0x54>)
 8001098:	2200      	movs	r2, #0
 800109a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_I2S2_Init+0x54>)
 800109e:	2200      	movs	r2, #0
 80010a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_I2S2_Init+0x54>)
 80010a4:	f002 fe32 	bl	8003d0c <HAL_I2S_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80010ae:	f000 f99f 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200001c8 	.word	0x200001c8
 80010bc:	40003800 	.word	0x40003800

080010c0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <MX_I2S3_Init+0x54>)
 80010c6:	4a14      	ldr	r2, [pc, #80]	; (8001118 <MX_I2S3_Init+0x58>)
 80010c8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80010ca:	4b12      	ldr	r3, [pc, #72]	; (8001114 <MX_I2S3_Init+0x54>)
 80010cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <MX_I2S3_Init+0x54>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_I2S3_Init+0x54>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80010de:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <MX_I2S3_Init+0x54>)
 80010e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <MX_I2S3_Init+0x54>)
 80010e8:	4a0c      	ldr	r2, [pc, #48]	; (800111c <MX_I2S3_Init+0x5c>)
 80010ea:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_I2S3_Init+0x54>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <MX_I2S3_Init+0x54>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_I2S3_Init+0x54>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_I2S3_Init+0x54>)
 8001100:	f002 fe04 	bl	8003d0c <HAL_I2S_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800110a:	f000 f971 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000210 	.word	0x20000210
 8001118:	40003c00 	.word	0x40003c00
 800111c:	00017700 	.word	0x00017700

08001120 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <MX_SPI1_Init+0x64>)
 8001126:	4a18      	ldr	r2, [pc, #96]	; (8001188 <MX_SPI1_Init+0x68>)
 8001128:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <MX_SPI1_Init+0x64>)
 800112c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001130:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001132:	4b14      	ldr	r3, [pc, #80]	; (8001184 <MX_SPI1_Init+0x64>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <MX_SPI1_Init+0x64>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_SPI1_Init+0x64>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_SPI1_Init+0x64>)
 8001146:	2200      	movs	r2, #0
 8001148:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_SPI1_Init+0x64>)
 800114c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001150:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_SPI1_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <MX_SPI1_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_SPI1_Init+0x64>)
 8001160:	2200      	movs	r2, #0
 8001162:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <MX_SPI1_Init+0x64>)
 8001166:	2200      	movs	r2, #0
 8001168:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_SPI1_Init+0x64>)
 800116c:	220a      	movs	r2, #10
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001170:	4804      	ldr	r0, [pc, #16]	; (8001184 <MX_SPI1_Init+0x64>)
 8001172:	f004 f80b 	bl	800518c <HAL_SPI_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800117c:	f000 f938 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000170 	.word	0x20000170
 8001188:	40013000 	.word	0x40013000

0800118c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800119c:	463b      	mov	r3, r7
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011a8:	4b21      	ldr	r3, [pc, #132]	; (8001230 <MX_TIM1_Init+0xa4>)
 80011aa:	4a22      	ldr	r2, [pc, #136]	; (8001234 <MX_TIM1_Init+0xa8>)
 80011ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168;
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <MX_TIM1_Init+0xa4>)
 80011b0:	22a8      	movs	r2, #168	; 0xa8
 80011b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b4:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <MX_TIM1_Init+0xa4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <MX_TIM1_Init+0xa4>)
 80011bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_TIM1_Init+0xa4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <MX_TIM1_Init+0xa4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_TIM1_Init+0xa4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80011d4:	4816      	ldr	r0, [pc, #88]	; (8001230 <MX_TIM1_Init+0xa4>)
 80011d6:	f004 f862 	bl	800529e <HAL_TIM_IC_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80011e0:	f000 f906 	bl	80013f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4619      	mov	r1, r3
 80011f2:	480f      	ldr	r0, [pc, #60]	; (8001230 <MX_TIM1_Init+0xa4>)
 80011f4:	f004 fd7e 	bl	8005cf4 <HAL_TIMEx_MasterConfigSynchronization>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80011fe:	f000 f8f7 	bl	80013f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001202:	2300      	movs	r3, #0
 8001204:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001206:	2301      	movs	r3, #1
 8001208:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001212:	463b      	mov	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	4619      	mov	r1, r3
 8001218:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_TIM1_Init+0xa4>)
 800121a:	f004 fa73 	bl	8005704 <HAL_TIM_IC_ConfigChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001224:	f000 f8e4 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000128 	.word	0x20000128
 8001234:	40010000 	.word	0x40010000

08001238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08c      	sub	sp, #48	; 0x30
 800123c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
 8001252:	4b61      	ldr	r3, [pc, #388]	; (80013d8 <MX_GPIO_Init+0x1a0>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a60      	ldr	r2, [pc, #384]	; (80013d8 <MX_GPIO_Init+0x1a0>)
 8001258:	f043 0310 	orr.w	r3, r3, #16
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b5e      	ldr	r3, [pc, #376]	; (80013d8 <MX_GPIO_Init+0x1a0>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0310 	and.w	r3, r3, #16
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	4b5a      	ldr	r3, [pc, #360]	; (80013d8 <MX_GPIO_Init+0x1a0>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a59      	ldr	r2, [pc, #356]	; (80013d8 <MX_GPIO_Init+0x1a0>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b57      	ldr	r3, [pc, #348]	; (80013d8 <MX_GPIO_Init+0x1a0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	4b53      	ldr	r3, [pc, #332]	; (80013d8 <MX_GPIO_Init+0x1a0>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a52      	ldr	r2, [pc, #328]	; (80013d8 <MX_GPIO_Init+0x1a0>)
 8001290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b50      	ldr	r3, [pc, #320]	; (80013d8 <MX_GPIO_Init+0x1a0>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b4c      	ldr	r3, [pc, #304]	; (80013d8 <MX_GPIO_Init+0x1a0>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a4b      	ldr	r2, [pc, #300]	; (80013d8 <MX_GPIO_Init+0x1a0>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b49      	ldr	r3, [pc, #292]	; (80013d8 <MX_GPIO_Init+0x1a0>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	4b45      	ldr	r3, [pc, #276]	; (80013d8 <MX_GPIO_Init+0x1a0>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a44      	ldr	r2, [pc, #272]	; (80013d8 <MX_GPIO_Init+0x1a0>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b42      	ldr	r3, [pc, #264]	; (80013d8 <MX_GPIO_Init+0x1a0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	4b3e      	ldr	r3, [pc, #248]	; (80013d8 <MX_GPIO_Init+0x1a0>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a3d      	ldr	r2, [pc, #244]	; (80013d8 <MX_GPIO_Init+0x1a0>)
 80012e4:	f043 0308 	orr.w	r3, r3, #8
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b3b      	ldr	r3, [pc, #236]	; (80013d8 <MX_GPIO_Init+0x1a0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2108      	movs	r1, #8
 80012fa:	4838      	ldr	r0, [pc, #224]	; (80013dc <MX_GPIO_Init+0x1a4>)
 80012fc:	f000 fe38 	bl	8001f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001300:	2201      	movs	r2, #1
 8001302:	2101      	movs	r1, #1
 8001304:	4836      	ldr	r0, [pc, #216]	; (80013e0 <MX_GPIO_Init+0x1a8>)
 8001306:	f000 fe33 	bl	8001f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TRIG_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800130a:	2200      	movs	r2, #0
 800130c:	f24f 2110 	movw	r1, #61968	; 0xf210
 8001310:	4834      	ldr	r0, [pc, #208]	; (80013e4 <MX_GPIO_Init+0x1ac>)
 8001312:	f000 fe2d 	bl	8001f70 <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001316:	2308      	movs	r3, #8
 8001318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	4619      	mov	r1, r3
 800132c:	482b      	ldr	r0, [pc, #172]	; (80013dc <MX_GPIO_Init+0x1a4>)
 800132e:	f000 fc83 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001332:	2301      	movs	r3, #1
 8001334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001336:	2301      	movs	r3, #1
 8001338:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	4619      	mov	r1, r3
 8001348:	4825      	ldr	r0, [pc, #148]	; (80013e0 <MX_GPIO_Init+0x1a8>)
 800134a:	f000 fc75 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800134e:	2301      	movs	r3, #1
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001352:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001356:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	4821      	ldr	r0, [pc, #132]	; (80013e8 <MX_GPIO_Init+0x1b0>)
 8001364:	f000 fc68 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001368:	2304      	movs	r3, #4
 800136a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4619      	mov	r1, r3
 800137a:	481c      	ldr	r0, [pc, #112]	; (80013ec <MX_GPIO_Init+0x1b4>)
 800137c:	f000 fc5c 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001380:	f24f 2310 	movw	r3, #61968	; 0xf210
 8001384:	61fb      	str	r3, [r7, #28]
                          |LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001386:	2301      	movs	r3, #1
 8001388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	4619      	mov	r1, r3
 8001398:	4812      	ldr	r0, [pc, #72]	; (80013e4 <MX_GPIO_Init+0x1ac>)
 800139a:	f000 fc4d 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800139e:	2320      	movs	r3, #32
 80013a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	4619      	mov	r1, r3
 80013b0:	480c      	ldr	r0, [pc, #48]	; (80013e4 <MX_GPIO_Init+0x1ac>)
 80013b2:	f000 fc41 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80013b6:	2302      	movs	r3, #2
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013ba:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80013be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	4619      	mov	r1, r3
 80013ca:	4804      	ldr	r0, [pc, #16]	; (80013dc <MX_GPIO_Init+0x1a4>)
 80013cc:	f000 fc34 	bl	8001c38 <HAL_GPIO_Init>

}
 80013d0:	bf00      	nop
 80013d2:	3730      	adds	r7, #48	; 0x30
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40020800 	.word	0x40020800
 80013e4:	40020c00 	.word	0x40020c00
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40020400 	.word	0x40020400

080013f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f4:	b672      	cpsid	i
}
 80013f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <Error_Handler+0x8>
	...

080013fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_MspInit+0x4c>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a0f      	ldr	r2, [pc, #60]	; (8001448 <HAL_MspInit+0x4c>)
 800140c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <HAL_MspInit+0x4c>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_MspInit+0x4c>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a08      	ldr	r2, [pc, #32]	; (8001448 <HAL_MspInit+0x4c>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_MspInit+0x4c>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800143a:	2007      	movs	r0, #7
 800143c:	f000 fbba 	bl	8001bb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40023800 	.word	0x40023800

0800144c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a19      	ldr	r2, [pc, #100]	; (80014d0 <HAL_I2C_MspInit+0x84>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d12c      	bne.n	80014c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a17      	ldr	r2, [pc, #92]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800148a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800148e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001490:	2312      	movs	r3, #18
 8001492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001494:	2301      	movs	r3, #1
 8001496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800149c:	2304      	movs	r3, #4
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	480c      	ldr	r0, [pc, #48]	; (80014d8 <HAL_I2C_MspInit+0x8c>)
 80014a8:	f000 fbc6 	bl	8001c38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	4a07      	ldr	r2, [pc, #28]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 80014b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ba:	6413      	str	r3, [r2, #64]	; 0x40
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	; 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40005400 	.word	0x40005400
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020400 	.word	0x40020400

080014dc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08e      	sub	sp, #56	; 0x38
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a51      	ldr	r2, [pc, #324]	; (8001640 <HAL_I2S_MspInit+0x164>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d14b      	bne.n	8001596 <HAL_I2S_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
 8001502:	4b50      	ldr	r3, [pc, #320]	; (8001644 <HAL_I2S_MspInit+0x168>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	4a4f      	ldr	r2, [pc, #316]	; (8001644 <HAL_I2S_MspInit+0x168>)
 8001508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150c:	6413      	str	r3, [r2, #64]	; 0x40
 800150e:	4b4d      	ldr	r3, [pc, #308]	; (8001644 <HAL_I2S_MspInit+0x168>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001516:	623b      	str	r3, [r7, #32]
 8001518:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
 800151e:	4b49      	ldr	r3, [pc, #292]	; (8001644 <HAL_I2S_MspInit+0x168>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a48      	ldr	r2, [pc, #288]	; (8001644 <HAL_I2S_MspInit+0x168>)
 8001524:	f043 0304 	orr.w	r3, r3, #4
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b46      	ldr	r3, [pc, #280]	; (8001644 <HAL_I2S_MspInit+0x168>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	61fb      	str	r3, [r7, #28]
 8001534:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	4b42      	ldr	r3, [pc, #264]	; (8001644 <HAL_I2S_MspInit+0x168>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a41      	ldr	r2, [pc, #260]	; (8001644 <HAL_I2S_MspInit+0x168>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b3f      	ldr	r3, [pc, #252]	; (8001644 <HAL_I2S_MspInit+0x168>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	61bb      	str	r3, [r7, #24]
 8001550:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001552:	2308      	movs	r3, #8
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001562:	2305      	movs	r3, #5
 8001564:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156a:	4619      	mov	r1, r3
 800156c:	4836      	ldr	r0, [pc, #216]	; (8001648 <HAL_I2S_MspInit+0x16c>)
 800156e:	f000 fb63 	bl	8001c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001572:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001584:	2305      	movs	r3, #5
 8001586:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158c:	4619      	mov	r1, r3
 800158e:	482f      	ldr	r0, [pc, #188]	; (800164c <HAL_I2S_MspInit+0x170>)
 8001590:	f000 fb52 	bl	8001c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001594:	e04f      	b.n	8001636 <HAL_I2S_MspInit+0x15a>
  else if(hi2s->Instance==SPI3)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a2d      	ldr	r2, [pc, #180]	; (8001650 <HAL_I2S_MspInit+0x174>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d14a      	bne.n	8001636 <HAL_I2S_MspInit+0x15a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	4b27      	ldr	r3, [pc, #156]	; (8001644 <HAL_I2S_MspInit+0x168>)
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	4a26      	ldr	r2, [pc, #152]	; (8001644 <HAL_I2S_MspInit+0x168>)
 80015aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ae:	6413      	str	r3, [r2, #64]	; 0x40
 80015b0:	4b24      	ldr	r3, [pc, #144]	; (8001644 <HAL_I2S_MspInit+0x168>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	4b20      	ldr	r3, [pc, #128]	; (8001644 <HAL_I2S_MspInit+0x168>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	4a1f      	ldr	r2, [pc, #124]	; (8001644 <HAL_I2S_MspInit+0x168>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6313      	str	r3, [r2, #48]	; 0x30
 80015cc:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <HAL_I2S_MspInit+0x168>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <HAL_I2S_MspInit+0x168>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	4a18      	ldr	r2, [pc, #96]	; (8001644 <HAL_I2S_MspInit+0x168>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	6313      	str	r3, [r2, #48]	; 0x30
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <HAL_I2S_MspInit+0x168>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80015f4:	2310      	movs	r3, #16
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001604:	2306      	movs	r3, #6
 8001606:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160c:	4619      	mov	r1, r3
 800160e:	4811      	ldr	r0, [pc, #68]	; (8001654 <HAL_I2S_MspInit+0x178>)
 8001610:	f000 fb12 	bl	8001c38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001614:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001626:	2306      	movs	r3, #6
 8001628:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162e:	4619      	mov	r1, r3
 8001630:	4805      	ldr	r0, [pc, #20]	; (8001648 <HAL_I2S_MspInit+0x16c>)
 8001632:	f000 fb01 	bl	8001c38 <HAL_GPIO_Init>
}
 8001636:	bf00      	nop
 8001638:	3738      	adds	r7, #56	; 0x38
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40003800 	.word	0x40003800
 8001644:	40023800 	.word	0x40023800
 8001648:	40020800 	.word	0x40020800
 800164c:	40020400 	.word	0x40020400
 8001650:	40003c00 	.word	0x40003c00
 8001654:	40020000 	.word	0x40020000

08001658 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a19      	ldr	r2, [pc, #100]	; (80016dc <HAL_SPI_MspInit+0x84>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d12b      	bne.n	80016d2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <HAL_SPI_MspInit+0x88>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	4a17      	ldr	r2, [pc, #92]	; (80016e0 <HAL_SPI_MspInit+0x88>)
 8001684:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001688:	6453      	str	r3, [r2, #68]	; 0x44
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <HAL_SPI_MspInit+0x88>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <HAL_SPI_MspInit+0x88>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a10      	ldr	r2, [pc, #64]	; (80016e0 <HAL_SPI_MspInit+0x88>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <HAL_SPI_MspInit+0x88>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80016b2:	23e0      	movs	r3, #224	; 0xe0
 80016b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016c2:	2305      	movs	r3, #5
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	4805      	ldr	r0, [pc, #20]	; (80016e4 <HAL_SPI_MspInit+0x8c>)
 80016ce:	f000 fab3 	bl	8001c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016d2:	bf00      	nop
 80016d4:	3728      	adds	r7, #40	; 0x28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40013000 	.word	0x40013000
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40020000 	.word	0x40020000

080016e8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	; 0x28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a1d      	ldr	r2, [pc, #116]	; (800177c <HAL_TIM_IC_MspInit+0x94>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d134      	bne.n	8001774 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <HAL_TIM_IC_MspInit+0x98>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a1b      	ldr	r2, [pc, #108]	; (8001780 <HAL_TIM_IC_MspInit+0x98>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b19      	ldr	r3, [pc, #100]	; (8001780 <HAL_TIM_IC_MspInit+0x98>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_TIM_IC_MspInit+0x98>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a14      	ldr	r2, [pc, #80]	; (8001780 <HAL_TIM_IC_MspInit+0x98>)
 8001730:	f043 0310 	orr.w	r3, r3, #16
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_TIM_IC_MspInit+0x98>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0310 	and.w	r3, r3, #16
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8001742:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001754:	2301      	movs	r3, #1
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	4809      	ldr	r0, [pc, #36]	; (8001784 <HAL_TIM_IC_MspInit+0x9c>)
 8001760:	f000 fa6a 	bl	8001c38 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001764:	2200      	movs	r2, #0
 8001766:	2100      	movs	r1, #0
 8001768:	201b      	movs	r0, #27
 800176a:	f000 fa2e 	bl	8001bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800176e:	201b      	movs	r0, #27
 8001770:	f000 fa47 	bl	8001c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001774:	bf00      	nop
 8001776:	3728      	adds	r7, #40	; 0x28
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40010000 	.word	0x40010000
 8001780:	40023800 	.word	0x40023800
 8001784:	40021000 	.word	0x40021000

08001788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800178c:	e7fe      	b.n	800178c <NMI_Handler+0x4>

0800178e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <HardFault_Handler+0x4>

08001794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <MemManage_Handler+0x4>

0800179a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <BusFault_Handler+0x4>

080017a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <UsageFault_Handler+0x4>

080017a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d4:	f000 f8da 	bl	800198c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}

080017dc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <TIM1_CC_IRQHandler+0x10>)
 80017e2:	f003 fe87 	bl	80054f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000128 	.word	0x20000128

080017f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <OTG_FS_IRQHandler+0x10>)
 80017f6:	f000 fe3f 	bl	8002478 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000634 	.word	0x20000634

08001804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <_sbrk+0x5c>)
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <_sbrk+0x60>)
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001818:	4b13      	ldr	r3, [pc, #76]	; (8001868 <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <_sbrk+0x64>)
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <_sbrk+0x68>)
 8001824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	429a      	cmp	r2, r3
 8001832:	d207      	bcs.n	8001844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001834:	f007 fca2 	bl	800917c <__errno>
 8001838:	4603      	mov	r3, r0
 800183a:	220c      	movs	r2, #12
 800183c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	e009      	b.n	8001858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <_sbrk+0x64>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184a:	4b07      	ldr	r3, [pc, #28]	; (8001868 <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <_sbrk+0x64>)
 8001854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20020000 	.word	0x20020000
 8001864:	00000400 	.word	0x00000400
 8001868:	200000c4 	.word	0x200000c4
 800186c:	20000948 	.word	0x20000948

08001870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <SystemInit+0x20>)
 8001876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800187a:	4a05      	ldr	r2, [pc, #20]	; (8001890 <SystemInit+0x20>)
 800187c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001880:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001894:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001898:	480d      	ldr	r0, [pc, #52]	; (80018d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800189a:	490e      	ldr	r1, [pc, #56]	; (80018d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800189c:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a0:	e002      	b.n	80018a8 <LoopCopyDataInit>

080018a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018a6:	3304      	adds	r3, #4

080018a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ac:	d3f9      	bcc.n	80018a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ae:	4a0b      	ldr	r2, [pc, #44]	; (80018dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018b0:	4c0b      	ldr	r4, [pc, #44]	; (80018e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b4:	e001      	b.n	80018ba <LoopFillZerobss>

080018b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b8:	3204      	adds	r2, #4

080018ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018bc:	d3fb      	bcc.n	80018b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018be:	f7ff ffd7 	bl	8001870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018c2:	f007 fc61 	bl	8009188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018c6:	f7ff fab3 	bl	8000e30 <main>
  bx  lr    
 80018ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80018d8:	080093d4 	.word	0x080093d4
  ldr r2, =_sbss
 80018dc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80018e0:	20000948 	.word	0x20000948

080018e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e4:	e7fe      	b.n	80018e4 <ADC_IRQHandler>
	...

080018e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018ec:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <HAL_Init+0x40>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0d      	ldr	r2, [pc, #52]	; (8001928 <HAL_Init+0x40>)
 80018f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <HAL_Init+0x40>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <HAL_Init+0x40>)
 80018fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001902:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001904:	4b08      	ldr	r3, [pc, #32]	; (8001928 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a07      	ldr	r2, [pc, #28]	; (8001928 <HAL_Init+0x40>)
 800190a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001910:	2003      	movs	r0, #3
 8001912:	f000 f94f 	bl	8001bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001916:	2000      	movs	r0, #0
 8001918:	f000 f808 	bl	800192c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800191c:	f7ff fd6e 	bl	80013fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023c00 	.word	0x40023c00

0800192c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_InitTick+0x54>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_InitTick+0x58>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4619      	mov	r1, r3
 800193e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001942:	fbb3 f3f1 	udiv	r3, r3, r1
 8001946:	fbb2 f3f3 	udiv	r3, r2, r3
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f967 	bl	8001c1e <HAL_SYSTICK_Config>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e00e      	b.n	8001978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b0f      	cmp	r3, #15
 800195e:	d80a      	bhi.n	8001976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001960:	2200      	movs	r2, #0
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	f000 f92f 	bl	8001bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800196c:	4a06      	ldr	r2, [pc, #24]	; (8001988 <HAL_InitTick+0x5c>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e000      	b.n	8001978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000000 	.word	0x20000000
 8001984:	20000008 	.word	0x20000008
 8001988:	20000004 	.word	0x20000004

0800198c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_IncTick+0x20>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_IncTick+0x24>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4413      	add	r3, r2
 800199c:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <HAL_IncTick+0x24>)
 800199e:	6013      	str	r3, [r2, #0]
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000008 	.word	0x20000008
 80019b0:	20000258 	.word	0x20000258

080019b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return uwTick;
 80019b8:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <HAL_GetTick+0x14>)
 80019ba:	681b      	ldr	r3, [r3, #0]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000258 	.word	0x20000258

080019cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d4:	f7ff ffee 	bl	80019b4 <HAL_GetTick>
 80019d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e4:	d005      	beq.n	80019f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <HAL_Delay+0x44>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4413      	add	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019f2:	bf00      	nop
 80019f4:	f7ff ffde 	bl	80019b4 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d8f7      	bhi.n	80019f4 <HAL_Delay+0x28>
  {
  }
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000008 	.word	0x20000008

08001a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a30:	4013      	ands	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a46:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	60d3      	str	r3, [r2, #12]
}
 8001a4c:	bf00      	nop
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <__NVIC_GetPriorityGrouping+0x18>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	f003 0307 	and.w	r3, r3, #7
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	db0b      	blt.n	8001aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	f003 021f 	and.w	r2, r3, #31
 8001a90:	4907      	ldr	r1, [pc, #28]	; (8001ab0 <__NVIC_EnableIRQ+0x38>)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	2001      	movs	r0, #1
 8001a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000e100 	.word	0xe000e100

08001ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	6039      	str	r1, [r7, #0]
 8001abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	db0a      	blt.n	8001ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	490c      	ldr	r1, [pc, #48]	; (8001b00 <__NVIC_SetPriority+0x4c>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	0112      	lsls	r2, r2, #4
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001adc:	e00a      	b.n	8001af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4908      	ldr	r1, [pc, #32]	; (8001b04 <__NVIC_SetPriority+0x50>)
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	3b04      	subs	r3, #4
 8001aec:	0112      	lsls	r2, r2, #4
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	440b      	add	r3, r1
 8001af2:	761a      	strb	r2, [r3, #24]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000e100 	.word	0xe000e100
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	; 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f1c3 0307 	rsb	r3, r3, #7
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	bf28      	it	cs
 8001b26:	2304      	movcs	r3, #4
 8001b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	2b06      	cmp	r3, #6
 8001b30:	d902      	bls.n	8001b38 <NVIC_EncodePriority+0x30>
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3b03      	subs	r3, #3
 8001b36:	e000      	b.n	8001b3a <NVIC_EncodePriority+0x32>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43da      	mvns	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b50:	f04f 31ff 	mov.w	r1, #4294967295
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5a:	43d9      	mvns	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	4313      	orrs	r3, r2
         );
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3724      	adds	r7, #36	; 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b80:	d301      	bcc.n	8001b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00f      	b.n	8001ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b86:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <SysTick_Config+0x40>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8e:	210f      	movs	r1, #15
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f7ff ff8e 	bl	8001ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <SysTick_Config+0x40>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9e:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <SysTick_Config+0x40>)
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	e000e010 	.word	0xe000e010

08001bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ff29 	bl	8001a14 <__NVIC_SetPriorityGrouping>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b086      	sub	sp, #24
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
 8001bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bdc:	f7ff ff3e 	bl	8001a5c <__NVIC_GetPriorityGrouping>
 8001be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	6978      	ldr	r0, [r7, #20]
 8001be8:	f7ff ff8e 	bl	8001b08 <NVIC_EncodePriority>
 8001bec:	4602      	mov	r2, r0
 8001bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff5d 	bl	8001ab4 <__NVIC_SetPriority>
}
 8001bfa:	bf00      	nop
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff31 	bl	8001a78 <__NVIC_EnableIRQ>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ffa2 	bl	8001b70 <SysTick_Config>
 8001c2c:	4603      	mov	r3, r0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b089      	sub	sp, #36	; 0x24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
 8001c52:	e16b      	b.n	8001f2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c54:	2201      	movs	r2, #1
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	4013      	ands	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	f040 815a 	bne.w	8001f26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d005      	beq.n	8001c8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d130      	bne.n	8001cec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	2203      	movs	r2, #3
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	091b      	lsrs	r3, r3, #4
 8001cd6:	f003 0201 	and.w	r2, r3, #1
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	d017      	beq.n	8001d28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	2203      	movs	r2, #3
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d123      	bne.n	8001d7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	08da      	lsrs	r2, r3, #3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3208      	adds	r2, #8
 8001d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	220f      	movs	r2, #15
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	08da      	lsrs	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3208      	adds	r2, #8
 8001d76:	69b9      	ldr	r1, [r7, #24]
 8001d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	2203      	movs	r2, #3
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0203 	and.w	r2, r3, #3
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80b4 	beq.w	8001f26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b60      	ldr	r3, [pc, #384]	; (8001f44 <HAL_GPIO_Init+0x30c>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	4a5f      	ldr	r2, [pc, #380]	; (8001f44 <HAL_GPIO_Init+0x30c>)
 8001dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dce:	4b5d      	ldr	r3, [pc, #372]	; (8001f44 <HAL_GPIO_Init+0x30c>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dda:	4a5b      	ldr	r2, [pc, #364]	; (8001f48 <HAL_GPIO_Init+0x310>)
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	089b      	lsrs	r3, r3, #2
 8001de0:	3302      	adds	r3, #2
 8001de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	220f      	movs	r2, #15
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a52      	ldr	r2, [pc, #328]	; (8001f4c <HAL_GPIO_Init+0x314>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d02b      	beq.n	8001e5e <HAL_GPIO_Init+0x226>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a51      	ldr	r2, [pc, #324]	; (8001f50 <HAL_GPIO_Init+0x318>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d025      	beq.n	8001e5a <HAL_GPIO_Init+0x222>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a50      	ldr	r2, [pc, #320]	; (8001f54 <HAL_GPIO_Init+0x31c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d01f      	beq.n	8001e56 <HAL_GPIO_Init+0x21e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a4f      	ldr	r2, [pc, #316]	; (8001f58 <HAL_GPIO_Init+0x320>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d019      	beq.n	8001e52 <HAL_GPIO_Init+0x21a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a4e      	ldr	r2, [pc, #312]	; (8001f5c <HAL_GPIO_Init+0x324>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d013      	beq.n	8001e4e <HAL_GPIO_Init+0x216>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a4d      	ldr	r2, [pc, #308]	; (8001f60 <HAL_GPIO_Init+0x328>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00d      	beq.n	8001e4a <HAL_GPIO_Init+0x212>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a4c      	ldr	r2, [pc, #304]	; (8001f64 <HAL_GPIO_Init+0x32c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d007      	beq.n	8001e46 <HAL_GPIO_Init+0x20e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a4b      	ldr	r2, [pc, #300]	; (8001f68 <HAL_GPIO_Init+0x330>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d101      	bne.n	8001e42 <HAL_GPIO_Init+0x20a>
 8001e3e:	2307      	movs	r3, #7
 8001e40:	e00e      	b.n	8001e60 <HAL_GPIO_Init+0x228>
 8001e42:	2308      	movs	r3, #8
 8001e44:	e00c      	b.n	8001e60 <HAL_GPIO_Init+0x228>
 8001e46:	2306      	movs	r3, #6
 8001e48:	e00a      	b.n	8001e60 <HAL_GPIO_Init+0x228>
 8001e4a:	2305      	movs	r3, #5
 8001e4c:	e008      	b.n	8001e60 <HAL_GPIO_Init+0x228>
 8001e4e:	2304      	movs	r3, #4
 8001e50:	e006      	b.n	8001e60 <HAL_GPIO_Init+0x228>
 8001e52:	2303      	movs	r3, #3
 8001e54:	e004      	b.n	8001e60 <HAL_GPIO_Init+0x228>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e002      	b.n	8001e60 <HAL_GPIO_Init+0x228>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_GPIO_Init+0x228>
 8001e5e:	2300      	movs	r3, #0
 8001e60:	69fa      	ldr	r2, [r7, #28]
 8001e62:	f002 0203 	and.w	r2, r2, #3
 8001e66:	0092      	lsls	r2, r2, #2
 8001e68:	4093      	lsls	r3, r2
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e70:	4935      	ldr	r1, [pc, #212]	; (8001f48 <HAL_GPIO_Init+0x310>)
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	089b      	lsrs	r3, r3, #2
 8001e76:	3302      	adds	r3, #2
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e7e:	4b3b      	ldr	r3, [pc, #236]	; (8001f6c <HAL_GPIO_Init+0x334>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ea2:	4a32      	ldr	r2, [pc, #200]	; (8001f6c <HAL_GPIO_Init+0x334>)
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ea8:	4b30      	ldr	r3, [pc, #192]	; (8001f6c <HAL_GPIO_Init+0x334>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ecc:	4a27      	ldr	r2, [pc, #156]	; (8001f6c <HAL_GPIO_Init+0x334>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed2:	4b26      	ldr	r3, [pc, #152]	; (8001f6c <HAL_GPIO_Init+0x334>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ef6:	4a1d      	ldr	r2, [pc, #116]	; (8001f6c <HAL_GPIO_Init+0x334>)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001efc:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <HAL_GPIO_Init+0x334>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f20:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <HAL_GPIO_Init+0x334>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	61fb      	str	r3, [r7, #28]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	2b0f      	cmp	r3, #15
 8001f30:	f67f ae90 	bls.w	8001c54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop
 8001f38:	3724      	adds	r7, #36	; 0x24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40013800 	.word	0x40013800
 8001f4c:	40020000 	.word	0x40020000
 8001f50:	40020400 	.word	0x40020400
 8001f54:	40020800 	.word	0x40020800
 8001f58:	40020c00 	.word	0x40020c00
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40021400 	.word	0x40021400
 8001f64:	40021800 	.word	0x40021800
 8001f68:	40021c00 	.word	0x40021c00
 8001f6c:	40013c00 	.word	0x40013c00

08001f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	807b      	strh	r3, [r7, #2]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f80:	787b      	ldrb	r3, [r7, #1]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f86:	887a      	ldrh	r2, [r7, #2]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f8c:	e003      	b.n	8001f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f8e:	887b      	ldrh	r3, [r7, #2]
 8001f90:	041a      	lsls	r2, r3, #16
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	619a      	str	r2, [r3, #24]
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fa4:	b08f      	sub	sp, #60	; 0x3c
 8001fa6:	af0a      	add	r7, sp, #40	; 0x28
 8001fa8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e054      	b.n	800205e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d106      	bne.n	8001fd4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f006 fe2a 	bl	8008c28 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d102      	bne.n	8001fee <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f003 ff80 	bl	8005ef8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	603b      	str	r3, [r7, #0]
 8001ffe:	687e      	ldr	r6, [r7, #4]
 8002000:	466d      	mov	r5, sp
 8002002:	f106 0410 	add.w	r4, r6, #16
 8002006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800200a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800200c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800200e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002012:	e885 0003 	stmia.w	r5, {r0, r1}
 8002016:	1d33      	adds	r3, r6, #4
 8002018:	cb0e      	ldmia	r3, {r1, r2, r3}
 800201a:	6838      	ldr	r0, [r7, #0]
 800201c:	f003 fefa 	bl	8005e14 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2101      	movs	r1, #1
 8002026:	4618      	mov	r0, r3
 8002028:	f003 ff77 	bl	8005f1a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	687e      	ldr	r6, [r7, #4]
 8002034:	466d      	mov	r5, sp
 8002036:	f106 0410 	add.w	r4, r6, #16
 800203a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800203c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800203e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002040:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002042:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002046:	e885 0003 	stmia.w	r5, {r0, r1}
 800204a:	1d33      	adds	r3, r6, #4
 800204c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800204e:	6838      	ldr	r0, [r7, #0]
 8002050:	f004 f8de 	bl	8006210 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002066 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002066:	b590      	push	{r4, r7, lr}
 8002068:	b089      	sub	sp, #36	; 0x24
 800206a:	af04      	add	r7, sp, #16
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	4608      	mov	r0, r1
 8002070:	4611      	mov	r1, r2
 8002072:	461a      	mov	r2, r3
 8002074:	4603      	mov	r3, r0
 8002076:	70fb      	strb	r3, [r7, #3]
 8002078:	460b      	mov	r3, r1
 800207a:	70bb      	strb	r3, [r7, #2]
 800207c:	4613      	mov	r3, r2
 800207e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_HCD_HC_Init+0x28>
 800208a:	2302      	movs	r3, #2
 800208c:	e076      	b.n	800217c <HAL_HCD_HC_Init+0x116>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	212c      	movs	r1, #44	; 0x2c
 800209c:	fb01 f303 	mul.w	r3, r1, r3
 80020a0:	4413      	add	r3, r2
 80020a2:	333d      	adds	r3, #61	; 0x3d
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	212c      	movs	r1, #44	; 0x2c
 80020ae:	fb01 f303 	mul.w	r3, r1, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	3338      	adds	r3, #56	; 0x38
 80020b6:	787a      	ldrb	r2, [r7, #1]
 80020b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	212c      	movs	r1, #44	; 0x2c
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	4413      	add	r3, r2
 80020c6:	3340      	adds	r3, #64	; 0x40
 80020c8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80020ca:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	212c      	movs	r1, #44	; 0x2c
 80020d2:	fb01 f303 	mul.w	r3, r1, r3
 80020d6:	4413      	add	r3, r2
 80020d8:	3339      	adds	r3, #57	; 0x39
 80020da:	78fa      	ldrb	r2, [r7, #3]
 80020dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80020de:	78fb      	ldrb	r3, [r7, #3]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	212c      	movs	r1, #44	; 0x2c
 80020e4:	fb01 f303 	mul.w	r3, r1, r3
 80020e8:	4413      	add	r3, r2
 80020ea:	333f      	adds	r3, #63	; 0x3f
 80020ec:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80020f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	78ba      	ldrb	r2, [r7, #2]
 80020f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020fa:	b2d0      	uxtb	r0, r2
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	212c      	movs	r1, #44	; 0x2c
 8002100:	fb01 f303 	mul.w	r3, r1, r3
 8002104:	4413      	add	r3, r2
 8002106:	333a      	adds	r3, #58	; 0x3a
 8002108:	4602      	mov	r2, r0
 800210a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800210c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002110:	2b00      	cmp	r3, #0
 8002112:	da09      	bge.n	8002128 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	212c      	movs	r1, #44	; 0x2c
 800211a:	fb01 f303 	mul.w	r3, r1, r3
 800211e:	4413      	add	r3, r2
 8002120:	333b      	adds	r3, #59	; 0x3b
 8002122:	2201      	movs	r2, #1
 8002124:	701a      	strb	r2, [r3, #0]
 8002126:	e008      	b.n	800213a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	212c      	movs	r1, #44	; 0x2c
 800212e:	fb01 f303 	mul.w	r3, r1, r3
 8002132:	4413      	add	r3, r2
 8002134:	333b      	adds	r3, #59	; 0x3b
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	212c      	movs	r1, #44	; 0x2c
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	4413      	add	r3, r2
 8002146:	333c      	adds	r3, #60	; 0x3c
 8002148:	f897 2020 	ldrb.w	r2, [r7, #32]
 800214c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	787c      	ldrb	r4, [r7, #1]
 8002154:	78ba      	ldrb	r2, [r7, #2]
 8002156:	78f9      	ldrb	r1, [r7, #3]
 8002158:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800215a:	9302      	str	r3, [sp, #8]
 800215c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	4623      	mov	r3, r4
 800216a:	f004 f9cb 	bl	8006504 <USB_HC_Init>
 800216e:	4603      	mov	r3, r0
 8002170:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800217a:	7bfb      	ldrb	r3, [r7, #15]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	bd90      	pop	{r4, r7, pc}

08002184 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_HCD_HC_Halt+0x1e>
 800219e:	2302      	movs	r3, #2
 80021a0:	e00f      	b.n	80021c2 <HAL_HCD_HC_Halt+0x3e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	78fa      	ldrb	r2, [r7, #3]
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f004 fc07 	bl	80069c6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	4608      	mov	r0, r1
 80021d6:	4611      	mov	r1, r2
 80021d8:	461a      	mov	r2, r3
 80021da:	4603      	mov	r3, r0
 80021dc:	70fb      	strb	r3, [r7, #3]
 80021de:	460b      	mov	r3, r1
 80021e0:	70bb      	strb	r3, [r7, #2]
 80021e2:	4613      	mov	r3, r2
 80021e4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	212c      	movs	r1, #44	; 0x2c
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	4413      	add	r3, r2
 80021f2:	333b      	adds	r3, #59	; 0x3b
 80021f4:	78ba      	ldrb	r2, [r7, #2]
 80021f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	212c      	movs	r1, #44	; 0x2c
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	4413      	add	r3, r2
 8002204:	333f      	adds	r3, #63	; 0x3f
 8002206:	787a      	ldrb	r2, [r7, #1]
 8002208:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800220a:	7c3b      	ldrb	r3, [r7, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d112      	bne.n	8002236 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	212c      	movs	r1, #44	; 0x2c
 8002216:	fb01 f303 	mul.w	r3, r1, r3
 800221a:	4413      	add	r3, r2
 800221c:	3342      	adds	r3, #66	; 0x42
 800221e:	2203      	movs	r2, #3
 8002220:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	212c      	movs	r1, #44	; 0x2c
 8002228:	fb01 f303 	mul.w	r3, r1, r3
 800222c:	4413      	add	r3, r2
 800222e:	333d      	adds	r3, #61	; 0x3d
 8002230:	7f3a      	ldrb	r2, [r7, #28]
 8002232:	701a      	strb	r2, [r3, #0]
 8002234:	e008      	b.n	8002248 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002236:	78fb      	ldrb	r3, [r7, #3]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	212c      	movs	r1, #44	; 0x2c
 800223c:	fb01 f303 	mul.w	r3, r1, r3
 8002240:	4413      	add	r3, r2
 8002242:	3342      	adds	r3, #66	; 0x42
 8002244:	2202      	movs	r2, #2
 8002246:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002248:	787b      	ldrb	r3, [r7, #1]
 800224a:	2b03      	cmp	r3, #3
 800224c:	f200 80c6 	bhi.w	80023dc <HAL_HCD_HC_SubmitRequest+0x210>
 8002250:	a201      	add	r2, pc, #4	; (adr r2, 8002258 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002256:	bf00      	nop
 8002258:	08002269 	.word	0x08002269
 800225c:	080023c9 	.word	0x080023c9
 8002260:	080022cd 	.word	0x080022cd
 8002264:	0800234b 	.word	0x0800234b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002268:	7c3b      	ldrb	r3, [r7, #16]
 800226a:	2b01      	cmp	r3, #1
 800226c:	f040 80b8 	bne.w	80023e0 <HAL_HCD_HC_SubmitRequest+0x214>
 8002270:	78bb      	ldrb	r3, [r7, #2]
 8002272:	2b00      	cmp	r3, #0
 8002274:	f040 80b4 	bne.w	80023e0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002278:	8b3b      	ldrh	r3, [r7, #24]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d108      	bne.n	8002290 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800227e:	78fb      	ldrb	r3, [r7, #3]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	212c      	movs	r1, #44	; 0x2c
 8002284:	fb01 f303 	mul.w	r3, r1, r3
 8002288:	4413      	add	r3, r2
 800228a:	3355      	adds	r3, #85	; 0x55
 800228c:	2201      	movs	r2, #1
 800228e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002290:	78fb      	ldrb	r3, [r7, #3]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	212c      	movs	r1, #44	; 0x2c
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	4413      	add	r3, r2
 800229c:	3355      	adds	r3, #85	; 0x55
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d109      	bne.n	80022b8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	212c      	movs	r1, #44	; 0x2c
 80022aa:	fb01 f303 	mul.w	r3, r1, r3
 80022ae:	4413      	add	r3, r2
 80022b0:	3342      	adds	r3, #66	; 0x42
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80022b6:	e093      	b.n	80023e0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	212c      	movs	r1, #44	; 0x2c
 80022be:	fb01 f303 	mul.w	r3, r1, r3
 80022c2:	4413      	add	r3, r2
 80022c4:	3342      	adds	r3, #66	; 0x42
 80022c6:	2202      	movs	r2, #2
 80022c8:	701a      	strb	r2, [r3, #0]
      break;
 80022ca:	e089      	b.n	80023e0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80022cc:	78bb      	ldrb	r3, [r7, #2]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d11d      	bne.n	800230e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	212c      	movs	r1, #44	; 0x2c
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	4413      	add	r3, r2
 80022de:	3355      	adds	r3, #85	; 0x55
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d109      	bne.n	80022fa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	212c      	movs	r1, #44	; 0x2c
 80022ec:	fb01 f303 	mul.w	r3, r1, r3
 80022f0:	4413      	add	r3, r2
 80022f2:	3342      	adds	r3, #66	; 0x42
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80022f8:	e073      	b.n	80023e2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022fa:	78fb      	ldrb	r3, [r7, #3]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	3342      	adds	r3, #66	; 0x42
 8002308:	2202      	movs	r2, #2
 800230a:	701a      	strb	r2, [r3, #0]
      break;
 800230c:	e069      	b.n	80023e2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800230e:	78fb      	ldrb	r3, [r7, #3]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	212c      	movs	r1, #44	; 0x2c
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4413      	add	r3, r2
 800231a:	3354      	adds	r3, #84	; 0x54
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	212c      	movs	r1, #44	; 0x2c
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	3342      	adds	r3, #66	; 0x42
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
      break;
 8002334:	e055      	b.n	80023e2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002336:	78fb      	ldrb	r3, [r7, #3]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	212c      	movs	r1, #44	; 0x2c
 800233c:	fb01 f303 	mul.w	r3, r1, r3
 8002340:	4413      	add	r3, r2
 8002342:	3342      	adds	r3, #66	; 0x42
 8002344:	2202      	movs	r2, #2
 8002346:	701a      	strb	r2, [r3, #0]
      break;
 8002348:	e04b      	b.n	80023e2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800234a:	78bb      	ldrb	r3, [r7, #2]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d11d      	bne.n	800238c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	212c      	movs	r1, #44	; 0x2c
 8002356:	fb01 f303 	mul.w	r3, r1, r3
 800235a:	4413      	add	r3, r2
 800235c:	3355      	adds	r3, #85	; 0x55
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d109      	bne.n	8002378 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002364:	78fb      	ldrb	r3, [r7, #3]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	212c      	movs	r1, #44	; 0x2c
 800236a:	fb01 f303 	mul.w	r3, r1, r3
 800236e:	4413      	add	r3, r2
 8002370:	3342      	adds	r3, #66	; 0x42
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002376:	e034      	b.n	80023e2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	212c      	movs	r1, #44	; 0x2c
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	4413      	add	r3, r2
 8002384:	3342      	adds	r3, #66	; 0x42
 8002386:	2202      	movs	r2, #2
 8002388:	701a      	strb	r2, [r3, #0]
      break;
 800238a:	e02a      	b.n	80023e2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	212c      	movs	r1, #44	; 0x2c
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	3354      	adds	r3, #84	; 0x54
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d109      	bne.n	80023b4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	212c      	movs	r1, #44	; 0x2c
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	3342      	adds	r3, #66	; 0x42
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
      break;
 80023b2:	e016      	b.n	80023e2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	212c      	movs	r1, #44	; 0x2c
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	4413      	add	r3, r2
 80023c0:	3342      	adds	r3, #66	; 0x42
 80023c2:	2202      	movs	r2, #2
 80023c4:	701a      	strb	r2, [r3, #0]
      break;
 80023c6:	e00c      	b.n	80023e2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	212c      	movs	r1, #44	; 0x2c
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	3342      	adds	r3, #66	; 0x42
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
      break;
 80023da:	e002      	b.n	80023e2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80023dc:	bf00      	nop
 80023de:	e000      	b.n	80023e2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80023e0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80023e2:	78fb      	ldrb	r3, [r7, #3]
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	212c      	movs	r1, #44	; 0x2c
 80023e8:	fb01 f303 	mul.w	r3, r1, r3
 80023ec:	4413      	add	r3, r2
 80023ee:	3344      	adds	r3, #68	; 0x44
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	8b3a      	ldrh	r2, [r7, #24]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	202c      	movs	r0, #44	; 0x2c
 80023fc:	fb00 f303 	mul.w	r3, r0, r3
 8002400:	440b      	add	r3, r1
 8002402:	334c      	adds	r3, #76	; 0x4c
 8002404:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002406:	78fb      	ldrb	r3, [r7, #3]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	212c      	movs	r1, #44	; 0x2c
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	3360      	adds	r3, #96	; 0x60
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	212c      	movs	r1, #44	; 0x2c
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	4413      	add	r3, r2
 8002424:	3350      	adds	r3, #80	; 0x50
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800242a:	78fb      	ldrb	r3, [r7, #3]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	212c      	movs	r1, #44	; 0x2c
 8002430:	fb01 f303 	mul.w	r3, r1, r3
 8002434:	4413      	add	r3, r2
 8002436:	3339      	adds	r3, #57	; 0x39
 8002438:	78fa      	ldrb	r2, [r7, #3]
 800243a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	212c      	movs	r1, #44	; 0x2c
 8002442:	fb01 f303 	mul.w	r3, r1, r3
 8002446:	4413      	add	r3, r2
 8002448:	3361      	adds	r3, #97	; 0x61
 800244a:	2200      	movs	r2, #0
 800244c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	222c      	movs	r2, #44	; 0x2c
 8002456:	fb02 f303 	mul.w	r3, r2, r3
 800245a:	3338      	adds	r3, #56	; 0x38
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	18d1      	adds	r1, r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	f004 f95a 	bl	8006720 <USB_HC_StartXfer>
 800246c:	4603      	mov	r3, r0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop

08002478 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f003 fe7d 	bl	800618e <USB_GetMode>
 8002494:	4603      	mov	r3, r0
 8002496:	2b01      	cmp	r3, #1
 8002498:	f040 80f6 	bne.w	8002688 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f003 fe61 	bl	8006168 <USB_ReadInterrupts>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 80ec 	beq.w	8002686 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f003 fe58 	bl	8006168 <USB_ReadInterrupts>
 80024b8:	4603      	mov	r3, r0
 80024ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024c2:	d104      	bne.n	80024ce <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80024cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f003 fe48 	bl	8006168 <USB_ReadInterrupts>
 80024d8:	4603      	mov	r3, r0
 80024da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024e2:	d104      	bne.n	80024ee <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f003 fe38 	bl	8006168 <USB_ReadInterrupts>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002502:	d104      	bne.n	800250e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800250c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f003 fe28 	bl	8006168 <USB_ReadInterrupts>
 8002518:	4603      	mov	r3, r0
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b02      	cmp	r3, #2
 8002520:	d103      	bne.n	800252a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2202      	movs	r2, #2
 8002528:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f003 fe1a 	bl	8006168 <USB_ReadInterrupts>
 8002534:	4603      	mov	r3, r0
 8002536:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800253a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800253e:	d11c      	bne.n	800257a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002548:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10f      	bne.n	800257a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800255a:	2110      	movs	r1, #16
 800255c:	6938      	ldr	r0, [r7, #16]
 800255e:	f003 fd29 	bl	8005fb4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002562:	6938      	ldr	r0, [r7, #16]
 8002564:	f003 fd4a 	bl	8005ffc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2101      	movs	r1, #1
 800256e:	4618      	mov	r0, r3
 8002570:	f003 ff02 	bl	8006378 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f006 fbd5 	bl	8008d24 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f003 fdf2 	bl	8006168 <USB_ReadInterrupts>
 8002584:	4603      	mov	r3, r0
 8002586:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800258a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800258e:	d102      	bne.n	8002596 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f001 fa03 	bl	800399c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f003 fde4 	bl	8006168 <USB_ReadInterrupts>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d106      	bne.n	80025b8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f006 fb9e 	bl	8008cec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2208      	movs	r2, #8
 80025b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f003 fdd3 	bl	8006168 <USB_ReadInterrupts>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	2b10      	cmp	r3, #16
 80025ca:	d101      	bne.n	80025d0 <HAL_HCD_IRQHandler+0x158>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <HAL_HCD_IRQHandler+0x15a>
 80025d0:	2300      	movs	r3, #0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d012      	beq.n	80025fc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	699a      	ldr	r2, [r3, #24]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0210 	bic.w	r2, r2, #16
 80025e4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f001 f906 	bl	80037f8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0210 	orr.w	r2, r2, #16
 80025fa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f003 fdb1 	bl	8006168 <USB_ReadInterrupts>
 8002606:	4603      	mov	r3, r0
 8002608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002610:	d13a      	bne.n	8002688 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f004 f9c4 	bl	80069a4 <USB_HC_ReadInterrupt>
 800261c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	e025      	b.n	8002670 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	fa22 f303 	lsr.w	r3, r2, r3
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d018      	beq.n	800266a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800264a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800264e:	d106      	bne.n	800265e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	4619      	mov	r1, r3
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f8ab 	bl	80027b2 <HCD_HC_IN_IRQHandler>
 800265c:	e005      	b.n	800266a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	4619      	mov	r1, r3
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 fcc6 	bl	8002ff6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	3301      	adds	r3, #1
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	429a      	cmp	r2, r3
 8002678:	d3d4      	bcc.n	8002624 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002682:	615a      	str	r2, [r3, #20]
 8002684:	e000      	b.n	8002688 <HAL_HCD_IRQHandler+0x210>
      return;
 8002686:	bf00      	nop
    }
  }
}
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_HCD_Start+0x16>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e013      	b.n	80026cc <HAL_HCD_Start+0x3e>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2101      	movs	r1, #1
 80026b2:	4618      	mov	r0, r3
 80026b4:	f003 fec4 	bl	8006440 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f003 fc0a 	bl	8005ed6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_HCD_Stop+0x16>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e00d      	b.n	8002706 <HAL_HCD_Stop+0x32>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f004 fabe 	bl	8006c78 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f003 fe66 	bl	80063ec <USB_ResetPort>
 8002720:	4603      	mov	r3, r0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	212c      	movs	r1, #44	; 0x2c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	3360      	adds	r3, #96	; 0x60
 8002744:	781b      	ldrb	r3, [r3, #0]
}
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	460b      	mov	r3, r1
 800275c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	212c      	movs	r1, #44	; 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	3350      	adds	r3, #80	; 0x50
 800276c:	681b      	ldr	r3, [r3, #0]
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f003 feaa 	bl	80064e0 <USB_GetCurrentFrame>
 800278c:	4603      	mov	r3, r0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f003 fe85 	bl	80064b2 <USB_GetHostSpeed>
 80027a8:	4603      	mov	r3, r0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b086      	sub	sp, #24
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	460b      	mov	r3, r1
 80027bc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d119      	bne.n	8002816 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	015a      	lsls	r2, r3, #5
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4413      	add	r3, r2
 80027ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ee:	461a      	mov	r2, r3
 80027f0:	2304      	movs	r3, #4
 80027f2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	0151      	lsls	r1, r2, #5
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	440a      	add	r2, r1
 800280a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800280e:	f043 0302 	orr.w	r3, r3, #2
 8002812:	60d3      	str	r3, [r2, #12]
 8002814:	e101      	b.n	8002a1a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4413      	add	r3, r2
 800281e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800282c:	d12b      	bne.n	8002886 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	015a      	lsls	r2, r3, #5
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4413      	add	r3, r2
 8002836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283a:	461a      	mov	r2, r3
 800283c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002840:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	212c      	movs	r1, #44	; 0x2c
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	3361      	adds	r3, #97	; 0x61
 8002850:	2207      	movs	r2, #7
 8002852:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4413      	add	r3, r2
 800285c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	0151      	lsls	r1, r2, #5
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	440a      	add	r2, r1
 800286a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800286e:	f043 0302 	orr.w	r3, r3, #2
 8002872:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	4611      	mov	r1, r2
 800287e:	4618      	mov	r0, r3
 8002880:	f004 f8a1 	bl	80069c6 <USB_HC_Halt>
 8002884:	e0c9      	b.n	8002a1a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	015a      	lsls	r2, r3, #5
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4413      	add	r3, r2
 800288e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 0320 	and.w	r3, r3, #32
 8002898:	2b20      	cmp	r3, #32
 800289a:	d109      	bne.n	80028b0 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a8:	461a      	mov	r2, r3
 80028aa:	2320      	movs	r3, #32
 80028ac:	6093      	str	r3, [r2, #8]
 80028ae:	e0b4      	b.n	8002a1a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d133      	bne.n	800292e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	0151      	lsls	r1, r2, #5
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	440a      	add	r2, r1
 80028dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028e0:	f043 0302 	orr.w	r3, r3, #2
 80028e4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	212c      	movs	r1, #44	; 0x2c
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	3361      	adds	r3, #97	; 0x61
 80028f4:	2205      	movs	r2, #5
 80028f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002904:	461a      	mov	r2, r3
 8002906:	2310      	movs	r3, #16
 8002908:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002916:	461a      	mov	r2, r3
 8002918:	2308      	movs	r3, #8
 800291a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	4611      	mov	r1, r2
 8002926:	4618      	mov	r0, r3
 8002928:	f004 f84d 	bl	80069c6 <USB_HC_Halt>
 800292c:	e075      	b.n	8002a1a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4413      	add	r3, r2
 8002936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002944:	d134      	bne.n	80029b0 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	015a      	lsls	r2, r3, #5
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4413      	add	r3, r2
 800294e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	0151      	lsls	r1, r2, #5
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	440a      	add	r2, r1
 800295c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002960:	f043 0302 	orr.w	r3, r3, #2
 8002964:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	212c      	movs	r1, #44	; 0x2c
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	4413      	add	r3, r2
 8002972:	3361      	adds	r3, #97	; 0x61
 8002974:	2208      	movs	r2, #8
 8002976:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4413      	add	r3, r2
 8002980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002984:	461a      	mov	r2, r3
 8002986:	2310      	movs	r3, #16
 8002988:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4413      	add	r3, r2
 8002992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002996:	461a      	mov	r2, r3
 8002998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800299c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f004 f80c 	bl	80069c6 <USB_HC_Halt>
 80029ae:	e034      	b.n	8002a1a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c2:	2b80      	cmp	r3, #128	; 0x80
 80029c4:	d129      	bne.n	8002a1a <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	0151      	lsls	r1, r2, #5
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	440a      	add	r2, r1
 80029dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029e0:	f043 0302 	orr.w	r3, r3, #2
 80029e4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	3361      	adds	r3, #97	; 0x61
 80029f4:	2206      	movs	r2, #6
 80029f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	4611      	mov	r1, r2
 8002a02:	4618      	mov	r0, r3
 8002a04:	f003 ffdf 	bl	80069c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a14:	461a      	mov	r2, r3
 8002a16:	2380      	movs	r3, #128	; 0x80
 8002a18:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a30:	d122      	bne.n	8002a78 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	015a      	lsls	r2, r3, #5
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4413      	add	r3, r2
 8002a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	0151      	lsls	r1, r2, #5
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	440a      	add	r2, r1
 8002a48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a4c:	f043 0302 	orr.w	r3, r3, #2
 8002a50:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f003 ffb2 	bl	80069c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	015a      	lsls	r2, r3, #5
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a74:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002a76:	e2ba      	b.n	8002fee <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	f040 811b 	bne.w	8002cc6 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d019      	beq.n	8002acc <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3348      	adds	r3, #72	; 0x48
 8002aa6:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	0159      	lsls	r1, r3, #5
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	440b      	add	r3, r1
 8002ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002aba:	1ad2      	subs	r2, r2, r3
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	202c      	movs	r0, #44	; 0x2c
 8002ac2:	fb00 f303 	mul.w	r3, r0, r3
 8002ac6:	440b      	add	r3, r1
 8002ac8:	3350      	adds	r3, #80	; 0x50
 8002aca:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	212c      	movs	r1, #44	; 0x2c
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3361      	adds	r3, #97	; 0x61
 8002ada:	2201      	movs	r2, #1
 8002adc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	335c      	adds	r3, #92	; 0x5c
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afc:	461a      	mov	r2, r3
 8002afe:	2301      	movs	r3, #1
 8002b00:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	212c      	movs	r1, #44	; 0x2c
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	333f      	adds	r3, #63	; 0x3f
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d009      	beq.n	8002b2a <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	212c      	movs	r1, #44	; 0x2c
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	333f      	adds	r3, #63	; 0x3f
 8002b24:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d121      	bne.n	8002b6e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	0151      	lsls	r1, r2, #5
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	440a      	add	r2, r1
 8002b40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b44:	f043 0302 	orr.w	r3, r3, #2
 8002b48:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	4611      	mov	r1, r2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f003 ff36 	bl	80069c6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	015a      	lsls	r2, r3, #5
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b66:	461a      	mov	r2, r3
 8002b68:	2310      	movs	r3, #16
 8002b6a:	6093      	str	r3, [r2, #8]
 8002b6c:	e066      	b.n	8002c3c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	212c      	movs	r1, #44	; 0x2c
 8002b74:	fb01 f303 	mul.w	r3, r1, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	333f      	adds	r3, #63	; 0x3f
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d127      	bne.n	8002bd2 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	0151      	lsls	r1, r2, #5
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	440a      	add	r2, r1
 8002b98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ba0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	212c      	movs	r1, #44	; 0x2c
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	3360      	adds	r3, #96	; 0x60
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	b2d9      	uxtb	r1, r3
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	202c      	movs	r0, #44	; 0x2c
 8002bbe:	fb00 f303 	mul.w	r3, r0, r3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3360      	adds	r3, #96	; 0x60
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f006 f8b8 	bl	8008d40 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002bd0:	e034      	b.n	8002c3c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	212c      	movs	r1, #44	; 0x2c
 8002bd8:	fb01 f303 	mul.w	r3, r1, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	333f      	adds	r3, #63	; 0x3f
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d12a      	bne.n	8002c3c <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3360      	adds	r3, #96	; 0x60
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	3354      	adds	r3, #84	; 0x54
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	f083 0301 	eor.w	r3, r3, #1
 8002c0c:	b2d8      	uxtb	r0, r3
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	3354      	adds	r3, #84	; 0x54
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	b2d9      	uxtb	r1, r3
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	202c      	movs	r0, #44	; 0x2c
 8002c2a:	fb00 f303 	mul.w	r3, r0, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	3360      	adds	r3, #96	; 0x60
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	461a      	mov	r2, r3
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f006 f882 	bl	8008d40 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d12b      	bne.n	8002c9c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	212c      	movs	r1, #44	; 0x2c
 8002c4a:	fb01 f303 	mul.w	r3, r1, r3
 8002c4e:	4413      	add	r3, r2
 8002c50:	3348      	adds	r3, #72	; 0x48
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	202c      	movs	r0, #44	; 0x2c
 8002c5a:	fb00 f202 	mul.w	r2, r0, r2
 8002c5e:	440a      	add	r2, r1
 8002c60:	3240      	adds	r2, #64	; 0x40
 8002c62:	8812      	ldrh	r2, [r2, #0]
 8002c64:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 81be 	beq.w	8002fee <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	212c      	movs	r1, #44	; 0x2c
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3354      	adds	r3, #84	; 0x54
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	f083 0301 	eor.w	r3, r3, #1
 8002c86:	b2d8      	uxtb	r0, r3
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	212c      	movs	r1, #44	; 0x2c
 8002c8e:	fb01 f303 	mul.w	r3, r1, r3
 8002c92:	4413      	add	r3, r2
 8002c94:	3354      	adds	r3, #84	; 0x54
 8002c96:	4602      	mov	r2, r0
 8002c98:	701a      	strb	r2, [r3, #0]
}
 8002c9a:	e1a8      	b.n	8002fee <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	212c      	movs	r1, #44	; 0x2c
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3354      	adds	r3, #84	; 0x54
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	f083 0301 	eor.w	r3, r3, #1
 8002cb0:	b2d8      	uxtb	r0, r3
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	212c      	movs	r1, #44	; 0x2c
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3354      	adds	r3, #84	; 0x54
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	701a      	strb	r2, [r3, #0]
}
 8002cc4:	e193      	b.n	8002fee <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	015a      	lsls	r2, r3, #5
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	f040 8106 	bne.w	8002eea <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	0151      	lsls	r1, r2, #5
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	440a      	add	r2, r1
 8002cf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cf8:	f023 0302 	bic.w	r3, r3, #2
 8002cfc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	212c      	movs	r1, #44	; 0x2c
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	3361      	adds	r3, #97	; 0x61
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d109      	bne.n	8002d26 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	212c      	movs	r1, #44	; 0x2c
 8002d18:	fb01 f303 	mul.w	r3, r1, r3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3360      	adds	r3, #96	; 0x60
 8002d20:	2201      	movs	r2, #1
 8002d22:	701a      	strb	r2, [r3, #0]
 8002d24:	e0c9      	b.n	8002eba <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	212c      	movs	r1, #44	; 0x2c
 8002d2c:	fb01 f303 	mul.w	r3, r1, r3
 8002d30:	4413      	add	r3, r2
 8002d32:	3361      	adds	r3, #97	; 0x61
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b05      	cmp	r3, #5
 8002d38:	d109      	bne.n	8002d4e <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	212c      	movs	r1, #44	; 0x2c
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	3360      	adds	r3, #96	; 0x60
 8002d48:	2205      	movs	r2, #5
 8002d4a:	701a      	strb	r2, [r3, #0]
 8002d4c:	e0b5      	b.n	8002eba <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3361      	adds	r3, #97	; 0x61
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b06      	cmp	r3, #6
 8002d60:	d009      	beq.n	8002d76 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	212c      	movs	r1, #44	; 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3361      	adds	r3, #97	; 0x61
 8002d70:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d150      	bne.n	8002e18 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	212c      	movs	r1, #44	; 0x2c
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	335c      	adds	r3, #92	; 0x5c
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	202c      	movs	r0, #44	; 0x2c
 8002d8e:	fb00 f303 	mul.w	r3, r0, r3
 8002d92:	440b      	add	r3, r1
 8002d94:	335c      	adds	r3, #92	; 0x5c
 8002d96:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	212c      	movs	r1, #44	; 0x2c
 8002d9e:	fb01 f303 	mul.w	r3, r1, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	335c      	adds	r3, #92	; 0x5c
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d912      	bls.n	8002dd2 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	212c      	movs	r1, #44	; 0x2c
 8002db2:	fb01 f303 	mul.w	r3, r1, r3
 8002db6:	4413      	add	r3, r2
 8002db8:	335c      	adds	r3, #92	; 0x5c
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	212c      	movs	r1, #44	; 0x2c
 8002dc4:	fb01 f303 	mul.w	r3, r1, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	3360      	adds	r3, #96	; 0x60
 8002dcc:	2204      	movs	r2, #4
 8002dce:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002dd0:	e073      	b.n	8002eba <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	212c      	movs	r1, #44	; 0x2c
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	4413      	add	r3, r2
 8002dde:	3360      	adds	r3, #96	; 0x60
 8002de0:	2202      	movs	r2, #2
 8002de2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dfa:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e02:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e10:	461a      	mov	r2, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e16:	e050      	b.n	8002eba <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	212c      	movs	r1, #44	; 0x2c
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	4413      	add	r3, r2
 8002e24:	3361      	adds	r3, #97	; 0x61
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d122      	bne.n	8002e72 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	212c      	movs	r1, #44	; 0x2c
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	3360      	adds	r3, #96	; 0x60
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e54:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e5c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	e023      	b.n	8002eba <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	212c      	movs	r1, #44	; 0x2c
 8002e78:	fb01 f303 	mul.w	r3, r1, r3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3361      	adds	r3, #97	; 0x61
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b07      	cmp	r3, #7
 8002e84:	d119      	bne.n	8002eba <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	212c      	movs	r1, #44	; 0x2c
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	4413      	add	r3, r2
 8002e92:	335c      	adds	r3, #92	; 0x5c
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	202c      	movs	r0, #44	; 0x2c
 8002e9e:	fb00 f303 	mul.w	r3, r0, r3
 8002ea2:	440b      	add	r3, r1
 8002ea4:	335c      	adds	r3, #92	; 0x5c
 8002ea6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	212c      	movs	r1, #44	; 0x2c
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3360      	adds	r3, #96	; 0x60
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2302      	movs	r3, #2
 8002eca:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	b2d9      	uxtb	r1, r3
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	202c      	movs	r0, #44	; 0x2c
 8002ed6:	fb00 f303 	mul.w	r3, r0, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	3360      	adds	r3, #96	; 0x60
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f005 ff2c 	bl	8008d40 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ee8:	e081      	b.n	8002fee <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	015a      	lsls	r2, r3, #5
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b10      	cmp	r3, #16
 8002efe:	d176      	bne.n	8002fee <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	212c      	movs	r1, #44	; 0x2c
 8002f06:	fb01 f303 	mul.w	r3, r1, r3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	333f      	adds	r3, #63	; 0x3f
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d121      	bne.n	8002f58 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	212c      	movs	r1, #44	; 0x2c
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	335c      	adds	r3, #92	; 0x5c
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	0151      	lsls	r1, r2, #5
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	440a      	add	r2, r1
 8002f3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f40:	f043 0302 	orr.w	r3, r3, #2
 8002f44:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f003 fd38 	bl	80069c6 <USB_HC_Halt>
 8002f56:	e041      	b.n	8002fdc <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	212c      	movs	r1, #44	; 0x2c
 8002f5e:	fb01 f303 	mul.w	r3, r1, r3
 8002f62:	4413      	add	r3, r2
 8002f64:	333f      	adds	r3, #63	; 0x3f
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d009      	beq.n	8002f80 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	212c      	movs	r1, #44	; 0x2c
 8002f72:	fb01 f303 	mul.w	r3, r1, r3
 8002f76:	4413      	add	r3, r2
 8002f78:	333f      	adds	r3, #63	; 0x3f
 8002f7a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d12d      	bne.n	8002fdc <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	212c      	movs	r1, #44	; 0x2c
 8002f86:	fb01 f303 	mul.w	r3, r1, r3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	335c      	adds	r3, #92	; 0x5c
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d120      	bne.n	8002fdc <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	212c      	movs	r1, #44	; 0x2c
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3361      	adds	r3, #97	; 0x61
 8002fa8:	2203      	movs	r2, #3
 8002faa:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	0151      	lsls	r1, r2, #5
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	440a      	add	r2, r1
 8002fc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fc6:	f043 0302 	orr.w	r3, r3, #2
 8002fca:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f003 fcf5 	bl	80069c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2310      	movs	r3, #16
 8002fec:	6093      	str	r3, [r2, #8]
}
 8002fee:	bf00      	nop
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b088      	sub	sp, #32
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
 8002ffe:	460b      	mov	r3, r1
 8003000:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	4413      	add	r3, r2
 8003018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 0304 	and.w	r3, r3, #4
 8003022:	2b04      	cmp	r3, #4
 8003024:	d119      	bne.n	800305a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	4413      	add	r3, r2
 800302e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003032:	461a      	mov	r2, r3
 8003034:	2304      	movs	r3, #4
 8003036:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	4413      	add	r3, r2
 8003040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	0151      	lsls	r1, r2, #5
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	440a      	add	r2, r1
 800304e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003052:	f043 0302 	orr.w	r3, r3, #2
 8003056:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003058:	e3ca      	b.n	80037f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	4413      	add	r3, r2
 8003062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 0320 	and.w	r3, r3, #32
 800306c:	2b20      	cmp	r3, #32
 800306e:	d13e      	bne.n	80030ee <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	4413      	add	r3, r2
 8003078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307c:	461a      	mov	r2, r3
 800307e:	2320      	movs	r3, #32
 8003080:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	212c      	movs	r1, #44	; 0x2c
 8003088:	fb01 f303 	mul.w	r3, r1, r3
 800308c:	4413      	add	r3, r2
 800308e:	333d      	adds	r3, #61	; 0x3d
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b01      	cmp	r3, #1
 8003094:	f040 83ac 	bne.w	80037f0 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	212c      	movs	r1, #44	; 0x2c
 800309e:	fb01 f303 	mul.w	r3, r1, r3
 80030a2:	4413      	add	r3, r2
 80030a4:	333d      	adds	r3, #61	; 0x3d
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	212c      	movs	r1, #44	; 0x2c
 80030b0:	fb01 f303 	mul.w	r3, r1, r3
 80030b4:	4413      	add	r3, r2
 80030b6:	3360      	adds	r3, #96	; 0x60
 80030b8:	2202      	movs	r2, #2
 80030ba:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	0151      	lsls	r1, r2, #5
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	440a      	add	r2, r1
 80030d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030d6:	f043 0302 	orr.w	r3, r3, #2
 80030da:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	4611      	mov	r1, r2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f003 fc6d 	bl	80069c6 <USB_HC_Halt>
}
 80030ec:	e380      	b.n	80037f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003104:	d122      	bne.n	800314c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	4413      	add	r3, r2
 800310e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	0151      	lsls	r1, r2, #5
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	440a      	add	r2, r1
 800311c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003120:	f043 0302 	orr.w	r3, r3, #2
 8003124:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f003 fc48 	bl	80069c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	4413      	add	r3, r2
 800313e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003142:	461a      	mov	r2, r3
 8003144:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003148:	6093      	str	r3, [r2, #8]
}
 800314a:	e351      	b.n	80037f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	4413      	add	r3, r2
 8003154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b01      	cmp	r3, #1
 8003160:	d150      	bne.n	8003204 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	212c      	movs	r1, #44	; 0x2c
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	4413      	add	r3, r2
 800316e:	335c      	adds	r3, #92	; 0x5c
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	4413      	add	r3, r2
 800317c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003186:	2b40      	cmp	r3, #64	; 0x40
 8003188:	d111      	bne.n	80031ae <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	212c      	movs	r1, #44	; 0x2c
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	4413      	add	r3, r2
 8003196:	333d      	adds	r3, #61	; 0x3d
 8003198:	2201      	movs	r2, #1
 800319a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a8:	461a      	mov	r2, r3
 80031aa:	2340      	movs	r3, #64	; 0x40
 80031ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	0151      	lsls	r1, r2, #5
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	440a      	add	r2, r1
 80031c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031c8:	f043 0302 	orr.w	r3, r3, #2
 80031cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	4611      	mov	r1, r2
 80031d8:	4618      	mov	r0, r3
 80031da:	f003 fbf4 	bl	80069c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ea:	461a      	mov	r2, r3
 80031ec:	2301      	movs	r3, #1
 80031ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	212c      	movs	r1, #44	; 0x2c
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	4413      	add	r3, r2
 80031fc:	3361      	adds	r3, #97	; 0x61
 80031fe:	2201      	movs	r2, #1
 8003200:	701a      	strb	r2, [r3, #0]
}
 8003202:	e2f5      	b.n	80037f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	4413      	add	r3, r2
 800320c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003216:	2b40      	cmp	r3, #64	; 0x40
 8003218:	d13c      	bne.n	8003294 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	212c      	movs	r1, #44	; 0x2c
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	4413      	add	r3, r2
 8003226:	3361      	adds	r3, #97	; 0x61
 8003228:	2204      	movs	r2, #4
 800322a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	212c      	movs	r1, #44	; 0x2c
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	4413      	add	r3, r2
 8003238:	333d      	adds	r3, #61	; 0x3d
 800323a:	2201      	movs	r2, #1
 800323c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	212c      	movs	r1, #44	; 0x2c
 8003244:	fb01 f303 	mul.w	r3, r1, r3
 8003248:	4413      	add	r3, r2
 800324a:	335c      	adds	r3, #92	; 0x5c
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	015a      	lsls	r2, r3, #5
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	4413      	add	r3, r2
 8003258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	0151      	lsls	r1, r2, #5
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	440a      	add	r2, r1
 8003266:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800326a:	f043 0302 	orr.w	r3, r3, #2
 800326e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	4611      	mov	r1, r2
 800327a:	4618      	mov	r0, r3
 800327c:	f003 fba3 	bl	80069c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	4413      	add	r3, r2
 8003288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800328c:	461a      	mov	r2, r3
 800328e:	2340      	movs	r3, #64	; 0x40
 8003290:	6093      	str	r3, [r2, #8]
}
 8003292:	e2ad      	b.n	80037f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	4413      	add	r3, r2
 800329c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d12a      	bne.n	8003300 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	015a      	lsls	r2, r3, #5
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	4413      	add	r3, r2
 80032b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b6:	461a      	mov	r2, r3
 80032b8:	2308      	movs	r3, #8
 80032ba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	015a      	lsls	r2, r3, #5
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	0151      	lsls	r1, r2, #5
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	440a      	add	r2, r1
 80032d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032d6:	f043 0302 	orr.w	r3, r3, #2
 80032da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	4611      	mov	r1, r2
 80032e6:	4618      	mov	r0, r3
 80032e8:	f003 fb6d 	bl	80069c6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	212c      	movs	r1, #44	; 0x2c
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	3361      	adds	r3, #97	; 0x61
 80032fa:	2205      	movs	r2, #5
 80032fc:	701a      	strb	r2, [r3, #0]
}
 80032fe:	e277      	b.n	80037f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	4413      	add	r3, r2
 8003308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 0310 	and.w	r3, r3, #16
 8003312:	2b10      	cmp	r3, #16
 8003314:	d150      	bne.n	80033b8 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	212c      	movs	r1, #44	; 0x2c
 800331c:	fb01 f303 	mul.w	r3, r1, r3
 8003320:	4413      	add	r3, r2
 8003322:	335c      	adds	r3, #92	; 0x5c
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	212c      	movs	r1, #44	; 0x2c
 800332e:	fb01 f303 	mul.w	r3, r1, r3
 8003332:	4413      	add	r3, r2
 8003334:	3361      	adds	r3, #97	; 0x61
 8003336:	2203      	movs	r2, #3
 8003338:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	212c      	movs	r1, #44	; 0x2c
 8003340:	fb01 f303 	mul.w	r3, r1, r3
 8003344:	4413      	add	r3, r2
 8003346:	333d      	adds	r3, #61	; 0x3d
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d112      	bne.n	8003374 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	212c      	movs	r1, #44	; 0x2c
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	4413      	add	r3, r2
 800335a:	333c      	adds	r3, #60	; 0x3c
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d108      	bne.n	8003374 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	212c      	movs	r1, #44	; 0x2c
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	4413      	add	r3, r2
 800336e:	333d      	adds	r3, #61	; 0x3d
 8003370:	2201      	movs	r2, #1
 8003372:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	4413      	add	r3, r2
 800337c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	0151      	lsls	r1, r2, #5
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	440a      	add	r2, r1
 800338a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800338e:	f043 0302 	orr.w	r3, r3, #2
 8003392:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	4611      	mov	r1, r2
 800339e:	4618      	mov	r0, r3
 80033a0:	f003 fb11 	bl	80069c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b0:	461a      	mov	r2, r3
 80033b2:	2310      	movs	r3, #16
 80033b4:	6093      	str	r3, [r2, #8]
}
 80033b6:	e21b      	b.n	80037f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ca:	2b80      	cmp	r3, #128	; 0x80
 80033cc:	d174      	bne.n	80034b8 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d121      	bne.n	800341a <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	212c      	movs	r1, #44	; 0x2c
 80033dc:	fb01 f303 	mul.w	r3, r1, r3
 80033e0:	4413      	add	r3, r2
 80033e2:	3361      	adds	r3, #97	; 0x61
 80033e4:	2206      	movs	r2, #6
 80033e6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	0151      	lsls	r1, r2, #5
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	440a      	add	r2, r1
 80033fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003402:	f043 0302 	orr.w	r3, r3, #2
 8003406:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	4611      	mov	r1, r2
 8003412:	4618      	mov	r0, r3
 8003414:	f003 fad7 	bl	80069c6 <USB_HC_Halt>
 8003418:	e044      	b.n	80034a4 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	212c      	movs	r1, #44	; 0x2c
 8003420:	fb01 f303 	mul.w	r3, r1, r3
 8003424:	4413      	add	r3, r2
 8003426:	335c      	adds	r3, #92	; 0x5c
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	202c      	movs	r0, #44	; 0x2c
 8003432:	fb00 f303 	mul.w	r3, r0, r3
 8003436:	440b      	add	r3, r1
 8003438:	335c      	adds	r3, #92	; 0x5c
 800343a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	212c      	movs	r1, #44	; 0x2c
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	4413      	add	r3, r2
 8003448:	335c      	adds	r3, #92	; 0x5c
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d920      	bls.n	8003492 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	212c      	movs	r1, #44	; 0x2c
 8003456:	fb01 f303 	mul.w	r3, r1, r3
 800345a:	4413      	add	r3, r2
 800345c:	335c      	adds	r3, #92	; 0x5c
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	212c      	movs	r1, #44	; 0x2c
 8003468:	fb01 f303 	mul.w	r3, r1, r3
 800346c:	4413      	add	r3, r2
 800346e:	3360      	adds	r3, #96	; 0x60
 8003470:	2204      	movs	r2, #4
 8003472:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	b2d9      	uxtb	r1, r3
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	202c      	movs	r0, #44	; 0x2c
 800347e:	fb00 f303 	mul.w	r3, r0, r3
 8003482:	4413      	add	r3, r2
 8003484:	3360      	adds	r3, #96	; 0x60
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f005 fc58 	bl	8008d40 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003490:	e008      	b.n	80034a4 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	212c      	movs	r1, #44	; 0x2c
 8003498:	fb01 f303 	mul.w	r3, r1, r3
 800349c:	4413      	add	r3, r2
 800349e:	3360      	adds	r3, #96	; 0x60
 80034a0:	2202      	movs	r2, #2
 80034a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b0:	461a      	mov	r2, r3
 80034b2:	2380      	movs	r3, #128	; 0x80
 80034b4:	6093      	str	r3, [r2, #8]
}
 80034b6:	e19b      	b.n	80037f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ce:	d134      	bne.n	800353a <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	0151      	lsls	r1, r2, #5
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	440a      	add	r2, r1
 80034e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034ea:	f043 0302 	orr.w	r3, r3, #2
 80034ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	4611      	mov	r1, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f003 fa63 	bl	80069c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	4413      	add	r3, r2
 8003508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350c:	461a      	mov	r2, r3
 800350e:	2310      	movs	r3, #16
 8003510:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	4413      	add	r3, r2
 800351a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351e:	461a      	mov	r2, r3
 8003520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003524:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	212c      	movs	r1, #44	; 0x2c
 800352c:	fb01 f303 	mul.w	r3, r1, r3
 8003530:	4413      	add	r3, r2
 8003532:	3361      	adds	r3, #97	; 0x61
 8003534:	2208      	movs	r2, #8
 8003536:	701a      	strb	r2, [r3, #0]
}
 8003538:	e15a      	b.n	80037f0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	015a      	lsls	r2, r3, #5
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	4413      	add	r3, r2
 8003542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b02      	cmp	r3, #2
 800354e:	f040 814f 	bne.w	80037f0 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	4413      	add	r3, r2
 800355a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	0151      	lsls	r1, r2, #5
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	440a      	add	r2, r1
 8003568:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800356c:	f023 0302 	bic.w	r3, r3, #2
 8003570:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	212c      	movs	r1, #44	; 0x2c
 8003578:	fb01 f303 	mul.w	r3, r1, r3
 800357c:	4413      	add	r3, r2
 800357e:	3361      	adds	r3, #97	; 0x61
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d17d      	bne.n	8003682 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	212c      	movs	r1, #44	; 0x2c
 800358c:	fb01 f303 	mul.w	r3, r1, r3
 8003590:	4413      	add	r3, r2
 8003592:	3360      	adds	r3, #96	; 0x60
 8003594:	2201      	movs	r2, #1
 8003596:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	212c      	movs	r1, #44	; 0x2c
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	333f      	adds	r3, #63	; 0x3f
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d00a      	beq.n	80035c2 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	212c      	movs	r1, #44	; 0x2c
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	333f      	adds	r3, #63	; 0x3f
 80035ba:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035bc:	2b03      	cmp	r3, #3
 80035be:	f040 8100 	bne.w	80037c2 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d113      	bne.n	80035f2 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	212c      	movs	r1, #44	; 0x2c
 80035d0:	fb01 f303 	mul.w	r3, r1, r3
 80035d4:	4413      	add	r3, r2
 80035d6:	3355      	adds	r3, #85	; 0x55
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	f083 0301 	eor.w	r3, r3, #1
 80035de:	b2d8      	uxtb	r0, r3
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	212c      	movs	r1, #44	; 0x2c
 80035e6:	fb01 f303 	mul.w	r3, r1, r3
 80035ea:	4413      	add	r3, r2
 80035ec:	3355      	adds	r3, #85	; 0x55
 80035ee:	4602      	mov	r2, r0
 80035f0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	f040 80e3 	bne.w	80037c2 <HCD_HC_OUT_IRQHandler+0x7cc>
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	212c      	movs	r1, #44	; 0x2c
 8003602:	fb01 f303 	mul.w	r3, r1, r3
 8003606:	4413      	add	r3, r2
 8003608:	334c      	adds	r3, #76	; 0x4c
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 80d8 	beq.w	80037c2 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	212c      	movs	r1, #44	; 0x2c
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	4413      	add	r3, r2
 800361e:	334c      	adds	r3, #76	; 0x4c
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	202c      	movs	r0, #44	; 0x2c
 8003628:	fb00 f202 	mul.w	r2, r0, r2
 800362c:	440a      	add	r2, r1
 800362e:	3240      	adds	r2, #64	; 0x40
 8003630:	8812      	ldrh	r2, [r2, #0]
 8003632:	4413      	add	r3, r2
 8003634:	3b01      	subs	r3, #1
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	202c      	movs	r0, #44	; 0x2c
 800363c:	fb00 f202 	mul.w	r2, r0, r2
 8003640:	440a      	add	r2, r1
 8003642:	3240      	adds	r2, #64	; 0x40
 8003644:	8812      	ldrh	r2, [r2, #0]
 8003646:	fbb3 f3f2 	udiv	r3, r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 80b5 	beq.w	80037c2 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	212c      	movs	r1, #44	; 0x2c
 800365e:	fb01 f303 	mul.w	r3, r1, r3
 8003662:	4413      	add	r3, r2
 8003664:	3355      	adds	r3, #85	; 0x55
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	f083 0301 	eor.w	r3, r3, #1
 800366c:	b2d8      	uxtb	r0, r3
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	212c      	movs	r1, #44	; 0x2c
 8003674:	fb01 f303 	mul.w	r3, r1, r3
 8003678:	4413      	add	r3, r2
 800367a:	3355      	adds	r3, #85	; 0x55
 800367c:	4602      	mov	r2, r0
 800367e:	701a      	strb	r2, [r3, #0]
 8003680:	e09f      	b.n	80037c2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	212c      	movs	r1, #44	; 0x2c
 8003688:	fb01 f303 	mul.w	r3, r1, r3
 800368c:	4413      	add	r3, r2
 800368e:	3361      	adds	r3, #97	; 0x61
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b03      	cmp	r3, #3
 8003694:	d109      	bne.n	80036aa <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	212c      	movs	r1, #44	; 0x2c
 800369c:	fb01 f303 	mul.w	r3, r1, r3
 80036a0:	4413      	add	r3, r2
 80036a2:	3360      	adds	r3, #96	; 0x60
 80036a4:	2202      	movs	r2, #2
 80036a6:	701a      	strb	r2, [r3, #0]
 80036a8:	e08b      	b.n	80037c2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	212c      	movs	r1, #44	; 0x2c
 80036b0:	fb01 f303 	mul.w	r3, r1, r3
 80036b4:	4413      	add	r3, r2
 80036b6:	3361      	adds	r3, #97	; 0x61
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d109      	bne.n	80036d2 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	212c      	movs	r1, #44	; 0x2c
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	4413      	add	r3, r2
 80036ca:	3360      	adds	r3, #96	; 0x60
 80036cc:	2202      	movs	r2, #2
 80036ce:	701a      	strb	r2, [r3, #0]
 80036d0:	e077      	b.n	80037c2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	212c      	movs	r1, #44	; 0x2c
 80036d8:	fb01 f303 	mul.w	r3, r1, r3
 80036dc:	4413      	add	r3, r2
 80036de:	3361      	adds	r3, #97	; 0x61
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b05      	cmp	r3, #5
 80036e4:	d109      	bne.n	80036fa <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	212c      	movs	r1, #44	; 0x2c
 80036ec:	fb01 f303 	mul.w	r3, r1, r3
 80036f0:	4413      	add	r3, r2
 80036f2:	3360      	adds	r3, #96	; 0x60
 80036f4:	2205      	movs	r2, #5
 80036f6:	701a      	strb	r2, [r3, #0]
 80036f8:	e063      	b.n	80037c2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	212c      	movs	r1, #44	; 0x2c
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	4413      	add	r3, r2
 8003706:	3361      	adds	r3, #97	; 0x61
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b06      	cmp	r3, #6
 800370c:	d009      	beq.n	8003722 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	212c      	movs	r1, #44	; 0x2c
 8003714:	fb01 f303 	mul.w	r3, r1, r3
 8003718:	4413      	add	r3, r2
 800371a:	3361      	adds	r3, #97	; 0x61
 800371c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800371e:	2b08      	cmp	r3, #8
 8003720:	d14f      	bne.n	80037c2 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	212c      	movs	r1, #44	; 0x2c
 8003728:	fb01 f303 	mul.w	r3, r1, r3
 800372c:	4413      	add	r3, r2
 800372e:	335c      	adds	r3, #92	; 0x5c
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	202c      	movs	r0, #44	; 0x2c
 800373a:	fb00 f303 	mul.w	r3, r0, r3
 800373e:	440b      	add	r3, r1
 8003740:	335c      	adds	r3, #92	; 0x5c
 8003742:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	212c      	movs	r1, #44	; 0x2c
 800374a:	fb01 f303 	mul.w	r3, r1, r3
 800374e:	4413      	add	r3, r2
 8003750:	335c      	adds	r3, #92	; 0x5c
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d912      	bls.n	800377e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	212c      	movs	r1, #44	; 0x2c
 800375e:	fb01 f303 	mul.w	r3, r1, r3
 8003762:	4413      	add	r3, r2
 8003764:	335c      	adds	r3, #92	; 0x5c
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	212c      	movs	r1, #44	; 0x2c
 8003770:	fb01 f303 	mul.w	r3, r1, r3
 8003774:	4413      	add	r3, r2
 8003776:	3360      	adds	r3, #96	; 0x60
 8003778:	2204      	movs	r2, #4
 800377a:	701a      	strb	r2, [r3, #0]
 800377c:	e021      	b.n	80037c2 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	212c      	movs	r1, #44	; 0x2c
 8003784:	fb01 f303 	mul.w	r3, r1, r3
 8003788:	4413      	add	r3, r2
 800378a:	3360      	adds	r3, #96	; 0x60
 800378c:	2202      	movs	r2, #2
 800378e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	4413      	add	r3, r2
 8003798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037a6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037ae:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037bc:	461a      	mov	r2, r3
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ce:	461a      	mov	r2, r3
 80037d0:	2302      	movs	r3, #2
 80037d2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	b2d9      	uxtb	r1, r3
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	202c      	movs	r0, #44	; 0x2c
 80037de:	fb00 f303 	mul.w	r3, r0, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	3360      	adds	r3, #96	; 0x60
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f005 faa8 	bl	8008d40 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80037f0:	bf00      	nop
 80037f2:	3720      	adds	r7, #32
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08a      	sub	sp, #40	; 0x28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	0c5b      	lsrs	r3, r3, #17
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	091b      	lsrs	r3, r3, #4
 8003828:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800382c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d004      	beq.n	800383e <HCD_RXQLVL_IRQHandler+0x46>
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2b05      	cmp	r3, #5
 8003838:	f000 80a9 	beq.w	800398e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800383c:	e0aa      	b.n	8003994 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 80a6 	beq.w	8003992 <HCD_RXQLVL_IRQHandler+0x19a>
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	212c      	movs	r1, #44	; 0x2c
 800384c:	fb01 f303 	mul.w	r3, r1, r3
 8003850:	4413      	add	r3, r2
 8003852:	3344      	adds	r3, #68	; 0x44
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 809b 	beq.w	8003992 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	212c      	movs	r1, #44	; 0x2c
 8003862:	fb01 f303 	mul.w	r3, r1, r3
 8003866:	4413      	add	r3, r2
 8003868:	3350      	adds	r3, #80	; 0x50
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	441a      	add	r2, r3
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	202c      	movs	r0, #44	; 0x2c
 8003876:	fb00 f303 	mul.w	r3, r0, r3
 800387a:	440b      	add	r3, r1
 800387c:	334c      	adds	r3, #76	; 0x4c
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d87a      	bhi.n	800397a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	212c      	movs	r1, #44	; 0x2c
 800388e:	fb01 f303 	mul.w	r3, r1, r3
 8003892:	4413      	add	r3, r2
 8003894:	3344      	adds	r3, #68	; 0x44
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	b292      	uxth	r2, r2
 800389c:	4619      	mov	r1, r3
 800389e:	f002 fc0b 	bl	80060b8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	212c      	movs	r1, #44	; 0x2c
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	4413      	add	r3, r2
 80038ae:	3344      	adds	r3, #68	; 0x44
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	441a      	add	r2, r3
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	202c      	movs	r0, #44	; 0x2c
 80038bc:	fb00 f303 	mul.w	r3, r0, r3
 80038c0:	440b      	add	r3, r1
 80038c2:	3344      	adds	r3, #68	; 0x44
 80038c4:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	212c      	movs	r1, #44	; 0x2c
 80038cc:	fb01 f303 	mul.w	r3, r1, r3
 80038d0:	4413      	add	r3, r2
 80038d2:	3350      	adds	r3, #80	; 0x50
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	441a      	add	r2, r3
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	202c      	movs	r0, #44	; 0x2c
 80038e0:	fb00 f303 	mul.w	r3, r0, r3
 80038e4:	440b      	add	r3, r1
 80038e6:	3350      	adds	r3, #80	; 0x50
 80038e8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	015a      	lsls	r2, r3, #5
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	4413      	add	r3, r2
 80038f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	0cdb      	lsrs	r3, r3, #19
 80038fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038fe:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	212c      	movs	r1, #44	; 0x2c
 8003906:	fb01 f303 	mul.w	r3, r1, r3
 800390a:	4413      	add	r3, r2
 800390c:	3340      	adds	r3, #64	; 0x40
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4293      	cmp	r3, r2
 8003916:	d13c      	bne.n	8003992 <HCD_RXQLVL_IRQHandler+0x19a>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d039      	beq.n	8003992 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	4413      	add	r3, r2
 8003926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003934:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800393c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	4413      	add	r3, r2
 8003946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394a:	461a      	mov	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	212c      	movs	r1, #44	; 0x2c
 8003956:	fb01 f303 	mul.w	r3, r1, r3
 800395a:	4413      	add	r3, r2
 800395c:	3354      	adds	r3, #84	; 0x54
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	f083 0301 	eor.w	r3, r3, #1
 8003964:	b2d8      	uxtb	r0, r3
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	212c      	movs	r1, #44	; 0x2c
 800396c:	fb01 f303 	mul.w	r3, r1, r3
 8003970:	4413      	add	r3, r2
 8003972:	3354      	adds	r3, #84	; 0x54
 8003974:	4602      	mov	r2, r0
 8003976:	701a      	strb	r2, [r3, #0]
      break;
 8003978:	e00b      	b.n	8003992 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	212c      	movs	r1, #44	; 0x2c
 8003980:	fb01 f303 	mul.w	r3, r1, r3
 8003984:	4413      	add	r3, r2
 8003986:	3360      	adds	r3, #96	; 0x60
 8003988:	2204      	movs	r2, #4
 800398a:	701a      	strb	r2, [r3, #0]
      break;
 800398c:	e001      	b.n	8003992 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800398e:	bf00      	nop
 8003990:	e000      	b.n	8003994 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003992:	bf00      	nop
  }
}
 8003994:	bf00      	nop
 8003996:	3728      	adds	r7, #40	; 0x28
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80039c8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d10b      	bne.n	80039ec <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d102      	bne.n	80039e4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f005 f992 	bl	8008d08 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f043 0302 	orr.w	r3, r3, #2
 80039ea:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d132      	bne.n	8003a5c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	f043 0308 	orr.w	r3, r3, #8
 80039fc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d126      	bne.n	8003a56 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d113      	bne.n	8003a38 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003a16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a1a:	d106      	bne.n	8003a2a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2102      	movs	r1, #2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f002 fca8 	bl	8006378 <USB_InitFSLSPClkSel>
 8003a28:	e011      	b.n	8003a4e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2101      	movs	r1, #1
 8003a30:	4618      	mov	r0, r3
 8003a32:	f002 fca1 	bl	8006378 <USB_InitFSLSPClkSel>
 8003a36:	e00a      	b.n	8003a4e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d106      	bne.n	8003a4e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a46:	461a      	mov	r2, r3
 8003a48:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003a4c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f005 f984 	bl	8008d5c <HAL_HCD_PortEnabled_Callback>
 8003a54:	e002      	b.n	8003a5c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f005 f98e 	bl	8008d78 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d103      	bne.n	8003a6e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f043 0320 	orr.w	r3, r3, #32
 8003a6c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a74:	461a      	mov	r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	6013      	str	r3, [r2, #0]
}
 8003a7a:	bf00      	nop
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e12b      	b.n	8003cee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fd fcce 	bl	800144c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2224      	movs	r2, #36	; 0x24
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ad6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ae6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ae8:	f001 f9fc 	bl	8004ee4 <HAL_RCC_GetPCLK1Freq>
 8003aec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	4a81      	ldr	r2, [pc, #516]	; (8003cf8 <HAL_I2C_Init+0x274>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d807      	bhi.n	8003b08 <HAL_I2C_Init+0x84>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4a80      	ldr	r2, [pc, #512]	; (8003cfc <HAL_I2C_Init+0x278>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	bf94      	ite	ls
 8003b00:	2301      	movls	r3, #1
 8003b02:	2300      	movhi	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	e006      	b.n	8003b16 <HAL_I2C_Init+0x92>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4a7d      	ldr	r2, [pc, #500]	; (8003d00 <HAL_I2C_Init+0x27c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	bf94      	ite	ls
 8003b10:	2301      	movls	r3, #1
 8003b12:	2300      	movhi	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e0e7      	b.n	8003cee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4a78      	ldr	r2, [pc, #480]	; (8003d04 <HAL_I2C_Init+0x280>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	0c9b      	lsrs	r3, r3, #18
 8003b28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	4a6a      	ldr	r2, [pc, #424]	; (8003cf8 <HAL_I2C_Init+0x274>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d802      	bhi.n	8003b58 <HAL_I2C_Init+0xd4>
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	3301      	adds	r3, #1
 8003b56:	e009      	b.n	8003b6c <HAL_I2C_Init+0xe8>
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	4a69      	ldr	r2, [pc, #420]	; (8003d08 <HAL_I2C_Init+0x284>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	099b      	lsrs	r3, r3, #6
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	430b      	orrs	r3, r1
 8003b72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	495c      	ldr	r1, [pc, #368]	; (8003cf8 <HAL_I2C_Init+0x274>)
 8003b88:	428b      	cmp	r3, r1
 8003b8a:	d819      	bhi.n	8003bc0 <HAL_I2C_Init+0x13c>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	1e59      	subs	r1, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b9a:	1c59      	adds	r1, r3, #1
 8003b9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ba0:	400b      	ands	r3, r1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <HAL_I2C_Init+0x138>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	1e59      	subs	r1, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bba:	e051      	b.n	8003c60 <HAL_I2C_Init+0x1dc>
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	e04f      	b.n	8003c60 <HAL_I2C_Init+0x1dc>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d111      	bne.n	8003bec <HAL_I2C_Init+0x168>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	1e58      	subs	r0, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6859      	ldr	r1, [r3, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	440b      	add	r3, r1
 8003bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bda:	3301      	adds	r3, #1
 8003bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	bf0c      	ite	eq
 8003be4:	2301      	moveq	r3, #1
 8003be6:	2300      	movne	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	e012      	b.n	8003c12 <HAL_I2C_Init+0x18e>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	1e58      	subs	r0, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6859      	ldr	r1, [r3, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	0099      	lsls	r1, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c02:	3301      	adds	r3, #1
 8003c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	bf0c      	ite	eq
 8003c0c:	2301      	moveq	r3, #1
 8003c0e:	2300      	movne	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_I2C_Init+0x196>
 8003c16:	2301      	movs	r3, #1
 8003c18:	e022      	b.n	8003c60 <HAL_I2C_Init+0x1dc>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10e      	bne.n	8003c40 <HAL_I2C_Init+0x1bc>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	1e58      	subs	r0, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6859      	ldr	r1, [r3, #4]
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	440b      	add	r3, r1
 8003c30:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c34:	3301      	adds	r3, #1
 8003c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c3e:	e00f      	b.n	8003c60 <HAL_I2C_Init+0x1dc>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	1e58      	subs	r0, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6859      	ldr	r1, [r3, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	0099      	lsls	r1, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c56:	3301      	adds	r3, #1
 8003c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	6809      	ldr	r1, [r1, #0]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69da      	ldr	r2, [r3, #28]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6911      	ldr	r1, [r2, #16]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	68d2      	ldr	r2, [r2, #12]
 8003c9a:	4311      	orrs	r1, r2
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6812      	ldr	r2, [r2, #0]
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695a      	ldr	r2, [r3, #20]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	000186a0 	.word	0x000186a0
 8003cfc:	001e847f 	.word	0x001e847f
 8003d00:	003d08ff 	.word	0x003d08ff
 8003d04:	431bde83 	.word	0x431bde83
 8003d08:	10624dd3 	.word	0x10624dd3

08003d0c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e128      	b.n	8003f70 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d109      	bne.n	8003d3e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a90      	ldr	r2, [pc, #576]	; (8003f78 <HAL_I2S_Init+0x26c>)
 8003d36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7fd fbcf 	bl	80014dc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2202      	movs	r2, #2
 8003d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d54:	f023 030f 	bic.w	r3, r3, #15
 8003d58:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d060      	beq.n	8003e2c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d102      	bne.n	8003d78 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003d72:	2310      	movs	r3, #16
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	e001      	b.n	8003d7c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003d78:	2320      	movs	r3, #32
 8003d7a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d802      	bhi.n	8003d8a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003d8a:	2001      	movs	r0, #1
 8003d8c:	f001 f9a0 	bl	80050d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d90:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d9a:	d125      	bne.n	8003de8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d010      	beq.n	8003dc6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dae:	4613      	mov	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	461a      	mov	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc0:	3305      	adds	r3, #5
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	e01f      	b.n	8003e06 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	461a      	mov	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de2:	3305      	adds	r3, #5
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	e00e      	b.n	8003e06 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	fbb2 f2f3 	udiv	r2, r2, r3
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	461a      	mov	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e02:	3305      	adds	r3, #5
 8003e04:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4a5c      	ldr	r2, [pc, #368]	; (8003f7c <HAL_I2S_Init+0x270>)
 8003e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0e:	08db      	lsrs	r3, r3, #3
 8003e10:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	085b      	lsrs	r3, r3, #1
 8003e22:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	021b      	lsls	r3, r3, #8
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	e003      	b.n	8003e34 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d902      	bls.n	8003e40 <HAL_I2S_Init+0x134>
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	2bff      	cmp	r3, #255	; 0xff
 8003e3e:	d907      	bls.n	8003e50 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e44:	f043 0210 	orr.w	r2, r3, #16
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e08f      	b.n	8003f70 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	ea42 0103 	orr.w	r1, r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69fa      	ldr	r2, [r7, #28]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e6e:	f023 030f 	bic.w	r3, r3, #15
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6851      	ldr	r1, [r2, #4]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6892      	ldr	r2, [r2, #8]
 8003e7a:	4311      	orrs	r1, r2
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	68d2      	ldr	r2, [r2, #12]
 8003e80:	4311      	orrs	r1, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6992      	ldr	r2, [r2, #24]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e92:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d161      	bne.n	8003f60 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a38      	ldr	r2, [pc, #224]	; (8003f80 <HAL_I2S_Init+0x274>)
 8003ea0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a37      	ldr	r2, [pc, #220]	; (8003f84 <HAL_I2S_Init+0x278>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d101      	bne.n	8003eb0 <HAL_I2S_Init+0x1a4>
 8003eac:	4b36      	ldr	r3, [pc, #216]	; (8003f88 <HAL_I2S_Init+0x27c>)
 8003eae:	e001      	b.n	8003eb4 <HAL_I2S_Init+0x1a8>
 8003eb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6812      	ldr	r2, [r2, #0]
 8003eba:	4932      	ldr	r1, [pc, #200]	; (8003f84 <HAL_I2S_Init+0x278>)
 8003ebc:	428a      	cmp	r2, r1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_I2S_Init+0x1b8>
 8003ec0:	4a31      	ldr	r2, [pc, #196]	; (8003f88 <HAL_I2S_Init+0x27c>)
 8003ec2:	e001      	b.n	8003ec8 <HAL_I2S_Init+0x1bc>
 8003ec4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003ec8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ecc:	f023 030f 	bic.w	r3, r3, #15
 8003ed0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a2b      	ldr	r2, [pc, #172]	; (8003f84 <HAL_I2S_Init+0x278>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d101      	bne.n	8003ee0 <HAL_I2S_Init+0x1d4>
 8003edc:	4b2a      	ldr	r3, [pc, #168]	; (8003f88 <HAL_I2S_Init+0x27c>)
 8003ede:	e001      	b.n	8003ee4 <HAL_I2S_Init+0x1d8>
 8003ee0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a25      	ldr	r2, [pc, #148]	; (8003f84 <HAL_I2S_Init+0x278>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d101      	bne.n	8003ef6 <HAL_I2S_Init+0x1ea>
 8003ef2:	4b25      	ldr	r3, [pc, #148]	; (8003f88 <HAL_I2S_Init+0x27c>)
 8003ef4:	e001      	b.n	8003efa <HAL_I2S_Init+0x1ee>
 8003ef6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f06:	d003      	beq.n	8003f10 <HAL_I2S_Init+0x204>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d103      	bne.n	8003f18 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	e001      	b.n	8003f1c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f26:	4313      	orrs	r3, r2
 8003f28:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f30:	4313      	orrs	r3, r2
 8003f32:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	897b      	ldrh	r3, [r7, #10]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f48:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a0d      	ldr	r2, [pc, #52]	; (8003f84 <HAL_I2S_Init+0x278>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d101      	bne.n	8003f58 <HAL_I2S_Init+0x24c>
 8003f54:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <HAL_I2S_Init+0x27c>)
 8003f56:	e001      	b.n	8003f5c <HAL_I2S_Init+0x250>
 8003f58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f5c:	897a      	ldrh	r2, [r7, #10]
 8003f5e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3720      	adds	r7, #32
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	08004083 	.word	0x08004083
 8003f7c:	cccccccd 	.word	0xcccccccd
 8003f80:	08004199 	.word	0x08004199
 8003f84:	40003800 	.word	0x40003800
 8003f88:	40003400 	.word	0x40003400

08003f8c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	881a      	ldrh	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	1c9a      	adds	r2, r3, #2
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10e      	bne.n	800401c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800400c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff ffb8 	bl	8003f8c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800401c:	bf00      	nop
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	b292      	uxth	r2, r2
 8004038:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	1c9a      	adds	r2, r3, #2
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004056:	b29b      	uxth	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10e      	bne.n	800407a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800406a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff ff93 	bl	8003fa0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800407a:	bf00      	nop
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b086      	sub	sp, #24
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b04      	cmp	r3, #4
 800409c:	d13a      	bne.n	8004114 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d109      	bne.n	80040bc <I2S_IRQHandler+0x3a>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b2:	2b40      	cmp	r3, #64	; 0x40
 80040b4:	d102      	bne.n	80040bc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff ffb4 	bl	8004024 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c2:	2b40      	cmp	r3, #64	; 0x40
 80040c4:	d126      	bne.n	8004114 <I2S_IRQHandler+0x92>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b20      	cmp	r3, #32
 80040d2:	d11f      	bne.n	8004114 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040e2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040e4:	2300      	movs	r3, #0
 80040e6:	613b      	str	r3, [r7, #16]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	613b      	str	r3, [r7, #16]
 80040f8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004106:	f043 0202 	orr.w	r2, r3, #2
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7ff ff50 	bl	8003fb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b03      	cmp	r3, #3
 800411e:	d136      	bne.n	800418e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b02      	cmp	r3, #2
 8004128:	d109      	bne.n	800413e <I2S_IRQHandler+0xbc>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004134:	2b80      	cmp	r3, #128	; 0x80
 8004136:	d102      	bne.n	800413e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7ff ff45 	bl	8003fc8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b08      	cmp	r3, #8
 8004146:	d122      	bne.n	800418e <I2S_IRQHandler+0x10c>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f003 0320 	and.w	r3, r3, #32
 8004152:	2b20      	cmp	r3, #32
 8004154:	d11b      	bne.n	800418e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004164:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004180:	f043 0204 	orr.w	r2, r3, #4
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff ff13 	bl	8003fb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800418e:	bf00      	nop
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4aa2      	ldr	r2, [pc, #648]	; (8004438 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d101      	bne.n	80041b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80041b2:	4ba2      	ldr	r3, [pc, #648]	; (800443c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80041b4:	e001      	b.n	80041ba <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80041b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a9b      	ldr	r2, [pc, #620]	; (8004438 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d101      	bne.n	80041d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80041d0:	4b9a      	ldr	r3, [pc, #616]	; (800443c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80041d2:	e001      	b.n	80041d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80041d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e4:	d004      	beq.n	80041f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f040 8099 	bne.w	8004322 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d107      	bne.n	800420a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f925 	bl	8004454 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b01      	cmp	r3, #1
 8004212:	d107      	bne.n	8004224 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f9c8 	bl	80045b4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422a:	2b40      	cmp	r3, #64	; 0x40
 800422c:	d13a      	bne.n	80042a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b00      	cmp	r3, #0
 8004236:	d035      	beq.n	80042a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a7e      	ldr	r2, [pc, #504]	; (8004438 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d101      	bne.n	8004246 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004242:	4b7e      	ldr	r3, [pc, #504]	; (800443c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004244:	e001      	b.n	800424a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004246:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4979      	ldr	r1, [pc, #484]	; (8004438 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004252:	428b      	cmp	r3, r1
 8004254:	d101      	bne.n	800425a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004256:	4b79      	ldr	r3, [pc, #484]	; (800443c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004258:	e001      	b.n	800425e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800425a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800425e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004262:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004272:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004274:	2300      	movs	r3, #0
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004296:	f043 0202 	orr.w	r2, r3, #2
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7ff fe88 	bl	8003fb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b08      	cmp	r3, #8
 80042ac:	f040 80be 	bne.w	800442c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 80b8 	beq.w	800442c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042ca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a59      	ldr	r2, [pc, #356]	; (8004438 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d101      	bne.n	80042da <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80042d6:	4b59      	ldr	r3, [pc, #356]	; (800443c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042d8:	e001      	b.n	80042de <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80042da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4954      	ldr	r1, [pc, #336]	; (8004438 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042e6:	428b      	cmp	r3, r1
 80042e8:	d101      	bne.n	80042ee <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80042ea:	4b54      	ldr	r3, [pc, #336]	; (800443c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042ec:	e001      	b.n	80042f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80042ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042f6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80042f8:	2300      	movs	r3, #0
 80042fa:	60bb      	str	r3, [r7, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	60bb      	str	r3, [r7, #8]
 8004304:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004312:	f043 0204 	orr.w	r2, r3, #4
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7ff fe4a 	bl	8003fb4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004320:	e084      	b.n	800442c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b02      	cmp	r3, #2
 800432a:	d107      	bne.n	800433c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f8be 	bl	80044b8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b01      	cmp	r3, #1
 8004344:	d107      	bne.n	8004356 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f8fd 	bl	8004550 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435c:	2b40      	cmp	r3, #64	; 0x40
 800435e:	d12f      	bne.n	80043c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f003 0320 	and.w	r3, r3, #32
 8004366:	2b00      	cmp	r3, #0
 8004368:	d02a      	beq.n	80043c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004378:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a2e      	ldr	r2, [pc, #184]	; (8004438 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d101      	bne.n	8004388 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004384:	4b2d      	ldr	r3, [pc, #180]	; (800443c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004386:	e001      	b.n	800438c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004388:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4929      	ldr	r1, [pc, #164]	; (8004438 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004394:	428b      	cmp	r3, r1
 8004396:	d101      	bne.n	800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004398:	4b28      	ldr	r3, [pc, #160]	; (800443c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800439a:	e001      	b.n	80043a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800439c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043a4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b2:	f043 0202 	orr.w	r2, r3, #2
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7ff fdfa 	bl	8003fb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d131      	bne.n	800442e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f003 0320 	and.w	r3, r3, #32
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d02c      	beq.n	800442e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a17      	ldr	r2, [pc, #92]	; (8004438 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d101      	bne.n	80043e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80043de:	4b17      	ldr	r3, [pc, #92]	; (800443c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043e0:	e001      	b.n	80043e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80043e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4912      	ldr	r1, [pc, #72]	; (8004438 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043ee:	428b      	cmp	r3, r1
 80043f0:	d101      	bne.n	80043f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80043f2:	4b12      	ldr	r3, [pc, #72]	; (800443c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043f4:	e001      	b.n	80043fa <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80043f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043fe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800440e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441c:	f043 0204 	orr.w	r2, r3, #4
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7ff fdc5 	bl	8003fb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800442a:	e000      	b.n	800442e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800442c:	bf00      	nop
}
 800442e:	bf00      	nop
 8004430:	3720      	adds	r7, #32
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40003800 	.word	0x40003800
 800443c:	40003400 	.word	0x40003400

08004440 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	1c99      	adds	r1, r3, #2
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6251      	str	r1, [r2, #36]	; 0x24
 8004466:	881a      	ldrh	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004472:	b29b      	uxth	r3, r3
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d113      	bne.n	80044ae <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004494:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800449a:	b29b      	uxth	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d106      	bne.n	80044ae <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff ffc9 	bl	8004440 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044ae:	bf00      	nop
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	1c99      	adds	r1, r3, #2
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6251      	str	r1, [r2, #36]	; 0x24
 80044ca:	8819      	ldrh	r1, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a1d      	ldr	r2, [pc, #116]	; (8004548 <I2SEx_TxISR_I2SExt+0x90>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d101      	bne.n	80044da <I2SEx_TxISR_I2SExt+0x22>
 80044d6:	4b1d      	ldr	r3, [pc, #116]	; (800454c <I2SEx_TxISR_I2SExt+0x94>)
 80044d8:	e001      	b.n	80044de <I2SEx_TxISR_I2SExt+0x26>
 80044da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044de:	460a      	mov	r2, r1
 80044e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d121      	bne.n	800453e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a12      	ldr	r2, [pc, #72]	; (8004548 <I2SEx_TxISR_I2SExt+0x90>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d101      	bne.n	8004508 <I2SEx_TxISR_I2SExt+0x50>
 8004504:	4b11      	ldr	r3, [pc, #68]	; (800454c <I2SEx_TxISR_I2SExt+0x94>)
 8004506:	e001      	b.n	800450c <I2SEx_TxISR_I2SExt+0x54>
 8004508:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	490d      	ldr	r1, [pc, #52]	; (8004548 <I2SEx_TxISR_I2SExt+0x90>)
 8004514:	428b      	cmp	r3, r1
 8004516:	d101      	bne.n	800451c <I2SEx_TxISR_I2SExt+0x64>
 8004518:	4b0c      	ldr	r3, [pc, #48]	; (800454c <I2SEx_TxISR_I2SExt+0x94>)
 800451a:	e001      	b.n	8004520 <I2SEx_TxISR_I2SExt+0x68>
 800451c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004520:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004524:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d106      	bne.n	800453e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7ff ff81 	bl	8004440 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800453e:	bf00      	nop
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40003800 	.word	0x40003800
 800454c:	40003400 	.word	0x40003400

08004550 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68d8      	ldr	r0, [r3, #12]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004562:	1c99      	adds	r1, r3, #2
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004568:	b282      	uxth	r2, r0
 800456a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004570:	b29b      	uxth	r3, r3
 8004572:	3b01      	subs	r3, #1
 8004574:	b29a      	uxth	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d113      	bne.n	80045ac <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004592:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004598:	b29b      	uxth	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d106      	bne.n	80045ac <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7ff ff4a 	bl	8004440 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045ac:	bf00      	nop
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a20      	ldr	r2, [pc, #128]	; (8004644 <I2SEx_RxISR_I2SExt+0x90>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d101      	bne.n	80045ca <I2SEx_RxISR_I2SExt+0x16>
 80045c6:	4b20      	ldr	r3, [pc, #128]	; (8004648 <I2SEx_RxISR_I2SExt+0x94>)
 80045c8:	e001      	b.n	80045ce <I2SEx_RxISR_I2SExt+0x1a>
 80045ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045ce:	68d8      	ldr	r0, [r3, #12]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	1c99      	adds	r1, r3, #2
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80045da:	b282      	uxth	r2, r0
 80045dc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d121      	bne.n	800463a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a12      	ldr	r2, [pc, #72]	; (8004644 <I2SEx_RxISR_I2SExt+0x90>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d101      	bne.n	8004604 <I2SEx_RxISR_I2SExt+0x50>
 8004600:	4b11      	ldr	r3, [pc, #68]	; (8004648 <I2SEx_RxISR_I2SExt+0x94>)
 8004602:	e001      	b.n	8004608 <I2SEx_RxISR_I2SExt+0x54>
 8004604:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	490d      	ldr	r1, [pc, #52]	; (8004644 <I2SEx_RxISR_I2SExt+0x90>)
 8004610:	428b      	cmp	r3, r1
 8004612:	d101      	bne.n	8004618 <I2SEx_RxISR_I2SExt+0x64>
 8004614:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <I2SEx_RxISR_I2SExt+0x94>)
 8004616:	e001      	b.n	800461c <I2SEx_RxISR_I2SExt+0x68>
 8004618:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800461c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004620:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004626:	b29b      	uxth	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d106      	bne.n	800463a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7ff ff03 	bl	8004440 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800463a:	bf00      	nop
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40003800 	.word	0x40003800
 8004648:	40003400 	.word	0x40003400

0800464c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e264      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d075      	beq.n	8004756 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800466a:	4ba3      	ldr	r3, [pc, #652]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
 8004672:	2b04      	cmp	r3, #4
 8004674:	d00c      	beq.n	8004690 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004676:	4ba0      	ldr	r3, [pc, #640]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800467e:	2b08      	cmp	r3, #8
 8004680:	d112      	bne.n	80046a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004682:	4b9d      	ldr	r3, [pc, #628]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800468e:	d10b      	bne.n	80046a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004690:	4b99      	ldr	r3, [pc, #612]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d05b      	beq.n	8004754 <HAL_RCC_OscConfig+0x108>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d157      	bne.n	8004754 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e23f      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b0:	d106      	bne.n	80046c0 <HAL_RCC_OscConfig+0x74>
 80046b2:	4b91      	ldr	r3, [pc, #580]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a90      	ldr	r2, [pc, #576]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	e01d      	b.n	80046fc <HAL_RCC_OscConfig+0xb0>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046c8:	d10c      	bne.n	80046e4 <HAL_RCC_OscConfig+0x98>
 80046ca:	4b8b      	ldr	r3, [pc, #556]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a8a      	ldr	r2, [pc, #552]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	4b88      	ldr	r3, [pc, #544]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a87      	ldr	r2, [pc, #540]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	e00b      	b.n	80046fc <HAL_RCC_OscConfig+0xb0>
 80046e4:	4b84      	ldr	r3, [pc, #528]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a83      	ldr	r2, [pc, #524]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	4b81      	ldr	r3, [pc, #516]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a80      	ldr	r2, [pc, #512]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d013      	beq.n	800472c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004704:	f7fd f956 	bl	80019b4 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800470c:	f7fd f952 	bl	80019b4 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b64      	cmp	r3, #100	; 0x64
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e204      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800471e:	4b76      	ldr	r3, [pc, #472]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0xc0>
 800472a:	e014      	b.n	8004756 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472c:	f7fd f942 	bl	80019b4 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004734:	f7fd f93e 	bl	80019b4 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b64      	cmp	r3, #100	; 0x64
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e1f0      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004746:	4b6c      	ldr	r3, [pc, #432]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0xe8>
 8004752:	e000      	b.n	8004756 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d063      	beq.n	800482a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004762:	4b65      	ldr	r3, [pc, #404]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 030c 	and.w	r3, r3, #12
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00b      	beq.n	8004786 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800476e:	4b62      	ldr	r3, [pc, #392]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004776:	2b08      	cmp	r3, #8
 8004778:	d11c      	bne.n	80047b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800477a:	4b5f      	ldr	r3, [pc, #380]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d116      	bne.n	80047b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004786:	4b5c      	ldr	r3, [pc, #368]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d005      	beq.n	800479e <HAL_RCC_OscConfig+0x152>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d001      	beq.n	800479e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e1c4      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800479e:	4b56      	ldr	r3, [pc, #344]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	4952      	ldr	r1, [pc, #328]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047b2:	e03a      	b.n	800482a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d020      	beq.n	80047fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047bc:	4b4f      	ldr	r3, [pc, #316]	; (80048fc <HAL_RCC_OscConfig+0x2b0>)
 80047be:	2201      	movs	r2, #1
 80047c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c2:	f7fd f8f7 	bl	80019b4 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ca:	f7fd f8f3 	bl	80019b4 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e1a5      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047dc:	4b46      	ldr	r3, [pc, #280]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e8:	4b43      	ldr	r3, [pc, #268]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	4940      	ldr	r1, [pc, #256]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	600b      	str	r3, [r1, #0]
 80047fc:	e015      	b.n	800482a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047fe:	4b3f      	ldr	r3, [pc, #252]	; (80048fc <HAL_RCC_OscConfig+0x2b0>)
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fd f8d6 	bl	80019b4 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800480c:	f7fd f8d2 	bl	80019b4 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e184      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800481e:	4b36      	ldr	r3, [pc, #216]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f0      	bne.n	800480c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b00      	cmp	r3, #0
 8004834:	d030      	beq.n	8004898 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d016      	beq.n	800486c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800483e:	4b30      	ldr	r3, [pc, #192]	; (8004900 <HAL_RCC_OscConfig+0x2b4>)
 8004840:	2201      	movs	r2, #1
 8004842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004844:	f7fd f8b6 	bl	80019b4 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800484c:	f7fd f8b2 	bl	80019b4 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e164      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800485e:	4b26      	ldr	r3, [pc, #152]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0f0      	beq.n	800484c <HAL_RCC_OscConfig+0x200>
 800486a:	e015      	b.n	8004898 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800486c:	4b24      	ldr	r3, [pc, #144]	; (8004900 <HAL_RCC_OscConfig+0x2b4>)
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004872:	f7fd f89f 	bl	80019b4 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800487a:	f7fd f89b 	bl	80019b4 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e14d      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800488c:	4b1a      	ldr	r3, [pc, #104]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 800488e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f0      	bne.n	800487a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 80a0 	beq.w	80049e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048a6:	2300      	movs	r3, #0
 80048a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048aa:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10f      	bne.n	80048d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048b6:	2300      	movs	r3, #0
 80048b8:	60bb      	str	r3, [r7, #8]
 80048ba:	4b0f      	ldr	r3, [pc, #60]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	4a0e      	ldr	r2, [pc, #56]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80048c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c4:	6413      	str	r3, [r2, #64]	; 0x40
 80048c6:	4b0c      	ldr	r3, [pc, #48]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ce:	60bb      	str	r3, [r7, #8]
 80048d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048d2:	2301      	movs	r3, #1
 80048d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d6:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <HAL_RCC_OscConfig+0x2b8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d121      	bne.n	8004926 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048e2:	4b08      	ldr	r3, [pc, #32]	; (8004904 <HAL_RCC_OscConfig+0x2b8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a07      	ldr	r2, [pc, #28]	; (8004904 <HAL_RCC_OscConfig+0x2b8>)
 80048e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ee:	f7fd f861 	bl	80019b4 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f4:	e011      	b.n	800491a <HAL_RCC_OscConfig+0x2ce>
 80048f6:	bf00      	nop
 80048f8:	40023800 	.word	0x40023800
 80048fc:	42470000 	.word	0x42470000
 8004900:	42470e80 	.word	0x42470e80
 8004904:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004908:	f7fd f854 	bl	80019b4 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e106      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800491a:	4b85      	ldr	r3, [pc, #532]	; (8004b30 <HAL_RCC_OscConfig+0x4e4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0f0      	beq.n	8004908 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d106      	bne.n	800493c <HAL_RCC_OscConfig+0x2f0>
 800492e:	4b81      	ldr	r3, [pc, #516]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	4a80      	ldr	r2, [pc, #512]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004934:	f043 0301 	orr.w	r3, r3, #1
 8004938:	6713      	str	r3, [r2, #112]	; 0x70
 800493a:	e01c      	b.n	8004976 <HAL_RCC_OscConfig+0x32a>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b05      	cmp	r3, #5
 8004942:	d10c      	bne.n	800495e <HAL_RCC_OscConfig+0x312>
 8004944:	4b7b      	ldr	r3, [pc, #492]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004948:	4a7a      	ldr	r2, [pc, #488]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 800494a:	f043 0304 	orr.w	r3, r3, #4
 800494e:	6713      	str	r3, [r2, #112]	; 0x70
 8004950:	4b78      	ldr	r3, [pc, #480]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004954:	4a77      	ldr	r2, [pc, #476]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004956:	f043 0301 	orr.w	r3, r3, #1
 800495a:	6713      	str	r3, [r2, #112]	; 0x70
 800495c:	e00b      	b.n	8004976 <HAL_RCC_OscConfig+0x32a>
 800495e:	4b75      	ldr	r3, [pc, #468]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004962:	4a74      	ldr	r2, [pc, #464]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004964:	f023 0301 	bic.w	r3, r3, #1
 8004968:	6713      	str	r3, [r2, #112]	; 0x70
 800496a:	4b72      	ldr	r3, [pc, #456]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	4a71      	ldr	r2, [pc, #452]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004970:	f023 0304 	bic.w	r3, r3, #4
 8004974:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d015      	beq.n	80049aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497e:	f7fd f819 	bl	80019b4 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004984:	e00a      	b.n	800499c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004986:	f7fd f815 	bl	80019b4 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	f241 3288 	movw	r2, #5000	; 0x1388
 8004994:	4293      	cmp	r3, r2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e0c5      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499c:	4b65      	ldr	r3, [pc, #404]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0ee      	beq.n	8004986 <HAL_RCC_OscConfig+0x33a>
 80049a8:	e014      	b.n	80049d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049aa:	f7fd f803 	bl	80019b4 <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b0:	e00a      	b.n	80049c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049b2:	f7fc ffff 	bl	80019b4 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e0af      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049c8:	4b5a      	ldr	r3, [pc, #360]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 80049ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1ee      	bne.n	80049b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049d4:	7dfb      	ldrb	r3, [r7, #23]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d105      	bne.n	80049e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049da:	4b56      	ldr	r3, [pc, #344]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	4a55      	ldr	r2, [pc, #340]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 80049e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 809b 	beq.w	8004b26 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049f0:	4b50      	ldr	r3, [pc, #320]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 030c 	and.w	r3, r3, #12
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d05c      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d141      	bne.n	8004a88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a04:	4b4c      	ldr	r3, [pc, #304]	; (8004b38 <HAL_RCC_OscConfig+0x4ec>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0a:	f7fc ffd3 	bl	80019b4 <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a12:	f7fc ffcf 	bl	80019b4 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e081      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a24:	4b43      	ldr	r3, [pc, #268]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f0      	bne.n	8004a12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	69da      	ldr	r2, [r3, #28]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	019b      	lsls	r3, r3, #6
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a46:	085b      	lsrs	r3, r3, #1
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	041b      	lsls	r3, r3, #16
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a52:	061b      	lsls	r3, r3, #24
 8004a54:	4937      	ldr	r1, [pc, #220]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a5a:	4b37      	ldr	r3, [pc, #220]	; (8004b38 <HAL_RCC_OscConfig+0x4ec>)
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a60:	f7fc ffa8 	bl	80019b4 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a68:	f7fc ffa4 	bl	80019b4 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e056      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a7a:	4b2e      	ldr	r3, [pc, #184]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0f0      	beq.n	8004a68 <HAL_RCC_OscConfig+0x41c>
 8004a86:	e04e      	b.n	8004b26 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a88:	4b2b      	ldr	r3, [pc, #172]	; (8004b38 <HAL_RCC_OscConfig+0x4ec>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8e:	f7fc ff91 	bl	80019b4 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a96:	f7fc ff8d 	bl	80019b4 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e03f      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa8:	4b22      	ldr	r3, [pc, #136]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f0      	bne.n	8004a96 <HAL_RCC_OscConfig+0x44a>
 8004ab4:	e037      	b.n	8004b26 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e032      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ac2:	4b1c      	ldr	r3, [pc, #112]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d028      	beq.n	8004b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d121      	bne.n	8004b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d11a      	bne.n	8004b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004af2:	4013      	ands	r3, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004af8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d111      	bne.n	8004b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	085b      	lsrs	r3, r3, #1
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d107      	bne.n	8004b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d001      	beq.n	8004b26 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40007000 	.word	0x40007000
 8004b34:	40023800 	.word	0x40023800
 8004b38:	42470060 	.word	0x42470060

08004b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e0cc      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b50:	4b68      	ldr	r3, [pc, #416]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d90c      	bls.n	8004b78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5e:	4b65      	ldr	r3, [pc, #404]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b66:	4b63      	ldr	r3, [pc, #396]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d001      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e0b8      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d020      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d005      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b90:	4b59      	ldr	r3, [pc, #356]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	4a58      	ldr	r2, [pc, #352]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ba8:	4b53      	ldr	r3, [pc, #332]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	4a52      	ldr	r2, [pc, #328]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bb4:	4b50      	ldr	r3, [pc, #320]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	494d      	ldr	r1, [pc, #308]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d044      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d107      	bne.n	8004bea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bda:	4b47      	ldr	r3, [pc, #284]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d119      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e07f      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d003      	beq.n	8004bfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d107      	bne.n	8004c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bfa:	4b3f      	ldr	r3, [pc, #252]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d109      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e06f      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c0a:	4b3b      	ldr	r3, [pc, #236]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e067      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c1a:	4b37      	ldr	r3, [pc, #220]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f023 0203 	bic.w	r2, r3, #3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	4934      	ldr	r1, [pc, #208]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c2c:	f7fc fec2 	bl	80019b4 <HAL_GetTick>
 8004c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c32:	e00a      	b.n	8004c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c34:	f7fc febe 	bl	80019b4 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e04f      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4a:	4b2b      	ldr	r3, [pc, #172]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 020c 	and.w	r2, r3, #12
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d1eb      	bne.n	8004c34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c5c:	4b25      	ldr	r3, [pc, #148]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d20c      	bcs.n	8004c84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6a:	4b22      	ldr	r3, [pc, #136]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c72:	4b20      	ldr	r3, [pc, #128]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d001      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e032      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d008      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c90:	4b19      	ldr	r3, [pc, #100]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	4916      	ldr	r1, [pc, #88]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d009      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cae:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	490e      	ldr	r1, [pc, #56]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cc2:	f000 f821 	bl	8004d08 <HAL_RCC_GetSysClockFreq>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	091b      	lsrs	r3, r3, #4
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	490a      	ldr	r1, [pc, #40]	; (8004cfc <HAL_RCC_ClockConfig+0x1c0>)
 8004cd4:	5ccb      	ldrb	r3, [r1, r3]
 8004cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cda:	4a09      	ldr	r2, [pc, #36]	; (8004d00 <HAL_RCC_ClockConfig+0x1c4>)
 8004cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cde:	4b09      	ldr	r3, [pc, #36]	; (8004d04 <HAL_RCC_ClockConfig+0x1c8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fc fe22 	bl	800192c <HAL_InitTick>

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40023c00 	.word	0x40023c00
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	080093ac 	.word	0x080093ac
 8004d00:	20000000 	.word	0x20000000
 8004d04:	20000004 	.word	0x20000004

08004d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	607b      	str	r3, [r7, #4]
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	2300      	movs	r3, #0
 8004d1a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d20:	4b67      	ldr	r3, [pc, #412]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 030c 	and.w	r3, r3, #12
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d00d      	beq.n	8004d48 <HAL_RCC_GetSysClockFreq+0x40>
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	f200 80bd 	bhi.w	8004eac <HAL_RCC_GetSysClockFreq+0x1a4>
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <HAL_RCC_GetSysClockFreq+0x34>
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d003      	beq.n	8004d42 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d3a:	e0b7      	b.n	8004eac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d3c:	4b61      	ldr	r3, [pc, #388]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004d3e:	60bb      	str	r3, [r7, #8]
       break;
 8004d40:	e0b7      	b.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d42:	4b61      	ldr	r3, [pc, #388]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004d44:	60bb      	str	r3, [r7, #8]
      break;
 8004d46:	e0b4      	b.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d48:	4b5d      	ldr	r3, [pc, #372]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d52:	4b5b      	ldr	r3, [pc, #364]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d04d      	beq.n	8004dfa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5e:	4b58      	ldr	r3, [pc, #352]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	099b      	lsrs	r3, r3, #6
 8004d64:	461a      	mov	r2, r3
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d6e:	f04f 0100 	mov.w	r1, #0
 8004d72:	ea02 0800 	and.w	r8, r2, r0
 8004d76:	ea03 0901 	and.w	r9, r3, r1
 8004d7a:	4640      	mov	r0, r8
 8004d7c:	4649      	mov	r1, r9
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	f04f 0300 	mov.w	r3, #0
 8004d86:	014b      	lsls	r3, r1, #5
 8004d88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d8c:	0142      	lsls	r2, r0, #5
 8004d8e:	4610      	mov	r0, r2
 8004d90:	4619      	mov	r1, r3
 8004d92:	ebb0 0008 	subs.w	r0, r0, r8
 8004d96:	eb61 0109 	sbc.w	r1, r1, r9
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	018b      	lsls	r3, r1, #6
 8004da4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004da8:	0182      	lsls	r2, r0, #6
 8004daa:	1a12      	subs	r2, r2, r0
 8004dac:	eb63 0301 	sbc.w	r3, r3, r1
 8004db0:	f04f 0000 	mov.w	r0, #0
 8004db4:	f04f 0100 	mov.w	r1, #0
 8004db8:	00d9      	lsls	r1, r3, #3
 8004dba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dbe:	00d0      	lsls	r0, r2, #3
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	eb12 0208 	adds.w	r2, r2, r8
 8004dc8:	eb43 0309 	adc.w	r3, r3, r9
 8004dcc:	f04f 0000 	mov.w	r0, #0
 8004dd0:	f04f 0100 	mov.w	r1, #0
 8004dd4:	0259      	lsls	r1, r3, #9
 8004dd6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004dda:	0250      	lsls	r0, r2, #9
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	4610      	mov	r0, r2
 8004de2:	4619      	mov	r1, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	461a      	mov	r2, r3
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	f7fb fdda 	bl	80009a4 <__aeabi_uldivmod>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	4613      	mov	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	e04a      	b.n	8004e90 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dfa:	4b31      	ldr	r3, [pc, #196]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	099b      	lsrs	r3, r3, #6
 8004e00:	461a      	mov	r2, r3
 8004e02:	f04f 0300 	mov.w	r3, #0
 8004e06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e0a:	f04f 0100 	mov.w	r1, #0
 8004e0e:	ea02 0400 	and.w	r4, r2, r0
 8004e12:	ea03 0501 	and.w	r5, r3, r1
 8004e16:	4620      	mov	r0, r4
 8004e18:	4629      	mov	r1, r5
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	014b      	lsls	r3, r1, #5
 8004e24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e28:	0142      	lsls	r2, r0, #5
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	1b00      	subs	r0, r0, r4
 8004e30:	eb61 0105 	sbc.w	r1, r1, r5
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	018b      	lsls	r3, r1, #6
 8004e3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e42:	0182      	lsls	r2, r0, #6
 8004e44:	1a12      	subs	r2, r2, r0
 8004e46:	eb63 0301 	sbc.w	r3, r3, r1
 8004e4a:	f04f 0000 	mov.w	r0, #0
 8004e4e:	f04f 0100 	mov.w	r1, #0
 8004e52:	00d9      	lsls	r1, r3, #3
 8004e54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e58:	00d0      	lsls	r0, r2, #3
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	1912      	adds	r2, r2, r4
 8004e60:	eb45 0303 	adc.w	r3, r5, r3
 8004e64:	f04f 0000 	mov.w	r0, #0
 8004e68:	f04f 0100 	mov.w	r1, #0
 8004e6c:	0299      	lsls	r1, r3, #10
 8004e6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004e72:	0290      	lsls	r0, r2, #10
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4610      	mov	r0, r2
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f04f 0300 	mov.w	r3, #0
 8004e84:	f7fb fd8e 	bl	80009a4 <__aeabi_uldivmod>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e90:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	0c1b      	lsrs	r3, r3, #16
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea8:	60bb      	str	r3, [r7, #8]
      break;
 8004eaa:	e002      	b.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004eac:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004eae:	60bb      	str	r3, [r7, #8]
      break;
 8004eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	00f42400 	.word	0x00f42400
 8004ec8:	007a1200 	.word	0x007a1200

08004ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ed0:	4b03      	ldr	r3, [pc, #12]	; (8004ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	20000000 	.word	0x20000000

08004ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ee8:	f7ff fff0 	bl	8004ecc <HAL_RCC_GetHCLKFreq>
 8004eec:	4602      	mov	r2, r0
 8004eee:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	0a9b      	lsrs	r3, r3, #10
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	4903      	ldr	r1, [pc, #12]	; (8004f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004efa:	5ccb      	ldrb	r3, [r1, r3]
 8004efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	40023800 	.word	0x40023800
 8004f08:	080093bc 	.word	0x080093bc

08004f0c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d105      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d035      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f34:	4b62      	ldr	r3, [pc, #392]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f3a:	f7fc fd3b 	bl	80019b4 <HAL_GetTick>
 8004f3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f40:	e008      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f42:	f7fc fd37 	bl	80019b4 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e0b0      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f54:	4b5b      	ldr	r3, [pc, #364]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1f0      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	019a      	lsls	r2, r3, #6
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	071b      	lsls	r3, r3, #28
 8004f6c:	4955      	ldr	r1, [pc, #340]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f74:	4b52      	ldr	r3, [pc, #328]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f76:	2201      	movs	r2, #1
 8004f78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f7a:	f7fc fd1b 	bl	80019b4 <HAL_GetTick>
 8004f7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f80:	e008      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f82:	f7fc fd17 	bl	80019b4 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e090      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f94:	4b4b      	ldr	r3, [pc, #300]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0f0      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 8083 	beq.w	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	4b44      	ldr	r3, [pc, #272]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	4a43      	ldr	r2, [pc, #268]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8004fbe:	4b41      	ldr	r3, [pc, #260]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004fca:	4b3f      	ldr	r3, [pc, #252]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a3e      	ldr	r2, [pc, #248]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fd4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fd6:	f7fc fced 	bl	80019b4 <HAL_GetTick>
 8004fda:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004fde:	f7fc fce9 	bl	80019b4 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e062      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ff0:	4b35      	ldr	r3, [pc, #212]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0f0      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ffc:	4b31      	ldr	r3, [pc, #196]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005000:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005004:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d02f      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	429a      	cmp	r2, r3
 8005018:	d028      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800501a:	4b2a      	ldr	r3, [pc, #168]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800501c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005022:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005024:	4b29      	ldr	r3, [pc, #164]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005026:	2201      	movs	r2, #1
 8005028:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800502a:	4b28      	ldr	r3, [pc, #160]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005030:	4a24      	ldr	r2, [pc, #144]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005036:	4b23      	ldr	r3, [pc, #140]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b01      	cmp	r3, #1
 8005040:	d114      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005042:	f7fc fcb7 	bl	80019b4 <HAL_GetTick>
 8005046:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005048:	e00a      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800504a:	f7fc fcb3 	bl	80019b4 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	f241 3288 	movw	r2, #5000	; 0x1388
 8005058:	4293      	cmp	r3, r2
 800505a:	d901      	bls.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e02a      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005060:	4b18      	ldr	r3, [pc, #96]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0ee      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005074:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005078:	d10d      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800507a:	4b12      	ldr	r3, [pc, #72]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800508a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800508e:	490d      	ldr	r1, [pc, #52]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005090:	4313      	orrs	r3, r2
 8005092:	608b      	str	r3, [r1, #8]
 8005094:	e005      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005096:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	4a0a      	ldr	r2, [pc, #40]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800509c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050a0:	6093      	str	r3, [r2, #8]
 80050a2:	4b08      	ldr	r3, [pc, #32]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ae:	4905      	ldr	r1, [pc, #20]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	42470068 	.word	0x42470068
 80050c4:	40023800 	.word	0x40023800
 80050c8:	40007000 	.word	0x40007000
 80050cc:	42470e40 	.word	0x42470e40

080050d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d13e      	bne.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80050ee:	4b23      	ldr	r3, [pc, #140]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d005      	beq.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d12f      	bne.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005104:	4b1e      	ldr	r3, [pc, #120]	; (8005180 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005106:	617b      	str	r3, [r7, #20]
          break;
 8005108:	e02f      	b.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800510a:	4b1c      	ldr	r3, [pc, #112]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005112:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005116:	d108      	bne.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005118:	4b18      	ldr	r3, [pc, #96]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005120:	4a18      	ldr	r2, [pc, #96]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005122:	fbb2 f3f3 	udiv	r3, r2, r3
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	e007      	b.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800512a:	4b14      	ldr	r3, [pc, #80]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005132:	4a15      	ldr	r2, [pc, #84]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005134:	fbb2 f3f3 	udiv	r3, r2, r3
 8005138:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800513a:	4b10      	ldr	r3, [pc, #64]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800513c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005140:	099b      	lsrs	r3, r3, #6
 8005142:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	fb02 f303 	mul.w	r3, r2, r3
 800514c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800514e:	4b0b      	ldr	r3, [pc, #44]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005154:	0f1b      	lsrs	r3, r3, #28
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005160:	617b      	str	r3, [r7, #20]
          break;
 8005162:	e002      	b.n	800516a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	617b      	str	r3, [r7, #20]
          break;
 8005168:	bf00      	nop
        }
      }
      break;
 800516a:	bf00      	nop
    }
  }
  return frequency;
 800516c:	697b      	ldr	r3, [r7, #20]
}
 800516e:	4618      	mov	r0, r3
 8005170:	371c      	adds	r7, #28
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40023800 	.word	0x40023800
 8005180:	00bb8000 	.word	0x00bb8000
 8005184:	007a1200 	.word	0x007a1200
 8005188:	00f42400 	.word	0x00f42400

0800518c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e07b      	b.n	8005296 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d108      	bne.n	80051b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ae:	d009      	beq.n	80051c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	61da      	str	r2, [r3, #28]
 80051b6:	e005      	b.n	80051c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fc fa3a 	bl	8001658 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800520c:	431a      	orrs	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	431a      	orrs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800523e:	431a      	orrs	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005248:	ea42 0103 	orr.w	r1, r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005250:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	0c1b      	lsrs	r3, r3, #16
 8005262:	f003 0104 	and.w	r1, r3, #4
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	f003 0210 	and.w	r2, r3, #16
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69da      	ldr	r2, [r3, #28]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005284:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b082      	sub	sp, #8
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e041      	b.n	8005334 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d106      	bne.n	80052ca <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7fc fa0f 	bl	80016e8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2202      	movs	r2, #2
 80052ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	3304      	adds	r3, #4
 80052da:	4619      	mov	r1, r3
 80052dc:	4610      	mov	r0, r2
 80052de:	f000 fb19 	bl	8005914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3708      	adds	r7, #8
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d104      	bne.n	8005356 <HAL_TIM_IC_Start+0x1a>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005352:	b2db      	uxtb	r3, r3
 8005354:	e013      	b.n	800537e <HAL_TIM_IC_Start+0x42>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b04      	cmp	r3, #4
 800535a:	d104      	bne.n	8005366 <HAL_TIM_IC_Start+0x2a>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005362:	b2db      	uxtb	r3, r3
 8005364:	e00b      	b.n	800537e <HAL_TIM_IC_Start+0x42>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b08      	cmp	r3, #8
 800536a:	d104      	bne.n	8005376 <HAL_TIM_IC_Start+0x3a>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005372:	b2db      	uxtb	r3, r3
 8005374:	e003      	b.n	800537e <HAL_TIM_IC_Start+0x42>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800537c:	b2db      	uxtb	r3, r3
 800537e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d104      	bne.n	8005390 <HAL_TIM_IC_Start+0x54>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800538c:	b2db      	uxtb	r3, r3
 800538e:	e013      	b.n	80053b8 <HAL_TIM_IC_Start+0x7c>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b04      	cmp	r3, #4
 8005394:	d104      	bne.n	80053a0 <HAL_TIM_IC_Start+0x64>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800539c:	b2db      	uxtb	r3, r3
 800539e:	e00b      	b.n	80053b8 <HAL_TIM_IC_Start+0x7c>
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d104      	bne.n	80053b0 <HAL_TIM_IC_Start+0x74>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	e003      	b.n	80053b8 <HAL_TIM_IC_Start+0x7c>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80053ba:	7bfb      	ldrb	r3, [r7, #15]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d102      	bne.n	80053c6 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80053c0:	7bbb      	ldrb	r3, [r7, #14]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d001      	beq.n	80053ca <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e081      	b.n	80054ce <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d104      	bne.n	80053da <HAL_TIM_IC_Start+0x9e>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053d8:	e013      	b.n	8005402 <HAL_TIM_IC_Start+0xc6>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b04      	cmp	r3, #4
 80053de:	d104      	bne.n	80053ea <HAL_TIM_IC_Start+0xae>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053e8:	e00b      	b.n	8005402 <HAL_TIM_IC_Start+0xc6>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d104      	bne.n	80053fa <HAL_TIM_IC_Start+0xbe>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053f8:	e003      	b.n	8005402 <HAL_TIM_IC_Start+0xc6>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2202      	movs	r2, #2
 80053fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d104      	bne.n	8005412 <HAL_TIM_IC_Start+0xd6>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005410:	e013      	b.n	800543a <HAL_TIM_IC_Start+0xfe>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b04      	cmp	r3, #4
 8005416:	d104      	bne.n	8005422 <HAL_TIM_IC_Start+0xe6>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005420:	e00b      	b.n	800543a <HAL_TIM_IC_Start+0xfe>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b08      	cmp	r3, #8
 8005426:	d104      	bne.n	8005432 <HAL_TIM_IC_Start+0xf6>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005430:	e003      	b.n	800543a <HAL_TIM_IC_Start+0xfe>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2202      	movs	r2, #2
 8005436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2201      	movs	r2, #1
 8005440:	6839      	ldr	r1, [r7, #0]
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fc30 	bl	8005ca8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a22      	ldr	r2, [pc, #136]	; (80054d8 <HAL_TIM_IC_Start+0x19c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d022      	beq.n	8005498 <HAL_TIM_IC_Start+0x15c>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545a:	d01d      	beq.n	8005498 <HAL_TIM_IC_Start+0x15c>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a1e      	ldr	r2, [pc, #120]	; (80054dc <HAL_TIM_IC_Start+0x1a0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d018      	beq.n	8005498 <HAL_TIM_IC_Start+0x15c>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a1d      	ldr	r2, [pc, #116]	; (80054e0 <HAL_TIM_IC_Start+0x1a4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d013      	beq.n	8005498 <HAL_TIM_IC_Start+0x15c>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a1b      	ldr	r2, [pc, #108]	; (80054e4 <HAL_TIM_IC_Start+0x1a8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00e      	beq.n	8005498 <HAL_TIM_IC_Start+0x15c>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a1a      	ldr	r2, [pc, #104]	; (80054e8 <HAL_TIM_IC_Start+0x1ac>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d009      	beq.n	8005498 <HAL_TIM_IC_Start+0x15c>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a18      	ldr	r2, [pc, #96]	; (80054ec <HAL_TIM_IC_Start+0x1b0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d004      	beq.n	8005498 <HAL_TIM_IC_Start+0x15c>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a17      	ldr	r2, [pc, #92]	; (80054f0 <HAL_TIM_IC_Start+0x1b4>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d111      	bne.n	80054bc <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f003 0307 	and.w	r3, r3, #7
 80054a2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b06      	cmp	r3, #6
 80054a8:	d010      	beq.n	80054cc <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f042 0201 	orr.w	r2, r2, #1
 80054b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ba:	e007      	b.n	80054cc <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f042 0201 	orr.w	r2, r2, #1
 80054ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	40010000 	.word	0x40010000
 80054dc:	40000400 	.word	0x40000400
 80054e0:	40000800 	.word	0x40000800
 80054e4:	40000c00 	.word	0x40000c00
 80054e8:	40010400 	.word	0x40010400
 80054ec:	40014000 	.word	0x40014000
 80054f0:	40001800 	.word	0x40001800

080054f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b02      	cmp	r3, #2
 8005508:	d122      	bne.n	8005550 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b02      	cmp	r3, #2
 8005516:	d11b      	bne.n	8005550 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f06f 0202 	mvn.w	r2, #2
 8005520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	f003 0303 	and.w	r3, r3, #3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7fb fbea 	bl	8000d10 <HAL_TIM_IC_CaptureCallback>
 800553c:	e005      	b.n	800554a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f9ca 	bl	80058d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f9d1 	bl	80058ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f003 0304 	and.w	r3, r3, #4
 800555a:	2b04      	cmp	r3, #4
 800555c:	d122      	bne.n	80055a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b04      	cmp	r3, #4
 800556a:	d11b      	bne.n	80055a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f06f 0204 	mvn.w	r2, #4
 8005574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2202      	movs	r2, #2
 800557a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fb fbc0 	bl	8000d10 <HAL_TIM_IC_CaptureCallback>
 8005590:	e005      	b.n	800559e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f9a0 	bl	80058d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f9a7 	bl	80058ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	f003 0308 	and.w	r3, r3, #8
 80055ae:	2b08      	cmp	r3, #8
 80055b0:	d122      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f003 0308 	and.w	r3, r3, #8
 80055bc:	2b08      	cmp	r3, #8
 80055be:	d11b      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0208 	mvn.w	r2, #8
 80055c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2204      	movs	r2, #4
 80055ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7fb fb96 	bl	8000d10 <HAL_TIM_IC_CaptureCallback>
 80055e4:	e005      	b.n	80055f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f976 	bl	80058d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f97d 	bl	80058ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	f003 0310 	and.w	r3, r3, #16
 8005602:	2b10      	cmp	r3, #16
 8005604:	d122      	bne.n	800564c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f003 0310 	and.w	r3, r3, #16
 8005610:	2b10      	cmp	r3, #16
 8005612:	d11b      	bne.n	800564c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f06f 0210 	mvn.w	r2, #16
 800561c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2208      	movs	r2, #8
 8005622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7fb fb6c 	bl	8000d10 <HAL_TIM_IC_CaptureCallback>
 8005638:	e005      	b.n	8005646 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f94c 	bl	80058d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f953 	bl	80058ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b01      	cmp	r3, #1
 8005658:	d10e      	bne.n	8005678 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b01      	cmp	r3, #1
 8005666:	d107      	bne.n	8005678 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f06f 0201 	mvn.w	r2, #1
 8005670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f926 	bl	80058c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005682:	2b80      	cmp	r3, #128	; 0x80
 8005684:	d10e      	bne.n	80056a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005690:	2b80      	cmp	r3, #128	; 0x80
 8005692:	d107      	bne.n	80056a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800569c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fbae 	bl	8005e00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ae:	2b40      	cmp	r3, #64	; 0x40
 80056b0:	d10e      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056bc:	2b40      	cmp	r3, #64	; 0x40
 80056be:	d107      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f918 	bl	8005900 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f003 0320 	and.w	r3, r3, #32
 80056da:	2b20      	cmp	r3, #32
 80056dc:	d10e      	bne.n	80056fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f003 0320 	and.w	r3, r3, #32
 80056e8:	2b20      	cmp	r3, #32
 80056ea:	d107      	bne.n	80056fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f06f 0220 	mvn.w	r2, #32
 80056f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 fb78 	bl	8005dec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056fc:	bf00      	nop
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005710:	2300      	movs	r3, #0
 8005712:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_TIM_IC_ConfigChannel+0x1e>
 800571e:	2302      	movs	r3, #2
 8005720:	e088      	b.n	8005834 <HAL_TIM_IC_ConfigChannel+0x130>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d11b      	bne.n	8005768 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6818      	ldr	r0, [r3, #0]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	6819      	ldr	r1, [r3, #0]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f000 f988 	bl	8005a54 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699a      	ldr	r2, [r3, #24]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 020c 	bic.w	r2, r2, #12
 8005752:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6999      	ldr	r1, [r3, #24]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	689a      	ldr	r2, [r3, #8]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	619a      	str	r2, [r3, #24]
 8005766:	e060      	b.n	800582a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b04      	cmp	r3, #4
 800576c:	d11c      	bne.n	80057a8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6818      	ldr	r0, [r3, #0]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	6819      	ldr	r1, [r3, #0]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f000 f9dd 	bl	8005b3c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	699a      	ldr	r2, [r3, #24]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005790:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6999      	ldr	r1, [r3, #24]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	021a      	lsls	r2, r3, #8
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	619a      	str	r2, [r3, #24]
 80057a6:	e040      	b.n	800582a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b08      	cmp	r3, #8
 80057ac:	d11b      	bne.n	80057e6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6818      	ldr	r0, [r3, #0]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	6819      	ldr	r1, [r3, #0]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	f000 f9fa 	bl	8005bb6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	69da      	ldr	r2, [r3, #28]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 020c 	bic.w	r2, r2, #12
 80057d0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69d9      	ldr	r1, [r3, #28]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	61da      	str	r2, [r3, #28]
 80057e4:	e021      	b.n	800582a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b0c      	cmp	r3, #12
 80057ea:	d11c      	bne.n	8005826 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6818      	ldr	r0, [r3, #0]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	6819      	ldr	r1, [r3, #0]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f000 fa17 	bl	8005c2e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	69da      	ldr	r2, [r3, #28]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800580e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	69d9      	ldr	r1, [r3, #28]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	021a      	lsls	r2, r3, #8
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	61da      	str	r2, [r3, #28]
 8005824:	e001      	b.n	800582a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005832:	7dfb      	ldrb	r3, [r7, #23]
}
 8005834:	4618      	mov	r0, r3
 8005836:	3718      	adds	r7, #24
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b0c      	cmp	r3, #12
 800584e:	d831      	bhi.n	80058b4 <HAL_TIM_ReadCapturedValue+0x78>
 8005850:	a201      	add	r2, pc, #4	; (adr r2, 8005858 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005856:	bf00      	nop
 8005858:	0800588d 	.word	0x0800588d
 800585c:	080058b5 	.word	0x080058b5
 8005860:	080058b5 	.word	0x080058b5
 8005864:	080058b5 	.word	0x080058b5
 8005868:	08005897 	.word	0x08005897
 800586c:	080058b5 	.word	0x080058b5
 8005870:	080058b5 	.word	0x080058b5
 8005874:	080058b5 	.word	0x080058b5
 8005878:	080058a1 	.word	0x080058a1
 800587c:	080058b5 	.word	0x080058b5
 8005880:	080058b5 	.word	0x080058b5
 8005884:	080058b5 	.word	0x080058b5
 8005888:	080058ab 	.word	0x080058ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005892:	60fb      	str	r3, [r7, #12]

      break;
 8005894:	e00f      	b.n	80058b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	60fb      	str	r3, [r7, #12]

      break;
 800589e:	e00a      	b.n	80058b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a6:	60fb      	str	r3, [r7, #12]

      break;
 80058a8:	e005      	b.n	80058b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	60fb      	str	r3, [r7, #12]

      break;
 80058b2:	e000      	b.n	80058b6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80058b4:	bf00      	nop
  }

  return tmpreg;
 80058b6:	68fb      	ldr	r3, [r7, #12]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a40      	ldr	r2, [pc, #256]	; (8005a28 <TIM_Base_SetConfig+0x114>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d013      	beq.n	8005954 <TIM_Base_SetConfig+0x40>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005932:	d00f      	beq.n	8005954 <TIM_Base_SetConfig+0x40>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a3d      	ldr	r2, [pc, #244]	; (8005a2c <TIM_Base_SetConfig+0x118>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d00b      	beq.n	8005954 <TIM_Base_SetConfig+0x40>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a3c      	ldr	r2, [pc, #240]	; (8005a30 <TIM_Base_SetConfig+0x11c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d007      	beq.n	8005954 <TIM_Base_SetConfig+0x40>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a3b      	ldr	r2, [pc, #236]	; (8005a34 <TIM_Base_SetConfig+0x120>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d003      	beq.n	8005954 <TIM_Base_SetConfig+0x40>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a3a      	ldr	r2, [pc, #232]	; (8005a38 <TIM_Base_SetConfig+0x124>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d108      	bne.n	8005966 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a2f      	ldr	r2, [pc, #188]	; (8005a28 <TIM_Base_SetConfig+0x114>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d02b      	beq.n	80059c6 <TIM_Base_SetConfig+0xb2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005974:	d027      	beq.n	80059c6 <TIM_Base_SetConfig+0xb2>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a2c      	ldr	r2, [pc, #176]	; (8005a2c <TIM_Base_SetConfig+0x118>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d023      	beq.n	80059c6 <TIM_Base_SetConfig+0xb2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a2b      	ldr	r2, [pc, #172]	; (8005a30 <TIM_Base_SetConfig+0x11c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d01f      	beq.n	80059c6 <TIM_Base_SetConfig+0xb2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a2a      	ldr	r2, [pc, #168]	; (8005a34 <TIM_Base_SetConfig+0x120>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d01b      	beq.n	80059c6 <TIM_Base_SetConfig+0xb2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a29      	ldr	r2, [pc, #164]	; (8005a38 <TIM_Base_SetConfig+0x124>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d017      	beq.n	80059c6 <TIM_Base_SetConfig+0xb2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a28      	ldr	r2, [pc, #160]	; (8005a3c <TIM_Base_SetConfig+0x128>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d013      	beq.n	80059c6 <TIM_Base_SetConfig+0xb2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a27      	ldr	r2, [pc, #156]	; (8005a40 <TIM_Base_SetConfig+0x12c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d00f      	beq.n	80059c6 <TIM_Base_SetConfig+0xb2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a26      	ldr	r2, [pc, #152]	; (8005a44 <TIM_Base_SetConfig+0x130>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00b      	beq.n	80059c6 <TIM_Base_SetConfig+0xb2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a25      	ldr	r2, [pc, #148]	; (8005a48 <TIM_Base_SetConfig+0x134>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d007      	beq.n	80059c6 <TIM_Base_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a24      	ldr	r2, [pc, #144]	; (8005a4c <TIM_Base_SetConfig+0x138>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d003      	beq.n	80059c6 <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a23      	ldr	r2, [pc, #140]	; (8005a50 <TIM_Base_SetConfig+0x13c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d108      	bne.n	80059d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a0a      	ldr	r2, [pc, #40]	; (8005a28 <TIM_Base_SetConfig+0x114>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d003      	beq.n	8005a0c <TIM_Base_SetConfig+0xf8>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a0c      	ldr	r2, [pc, #48]	; (8005a38 <TIM_Base_SetConfig+0x124>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d103      	bne.n	8005a14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	691a      	ldr	r2, [r3, #16]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	615a      	str	r2, [r3, #20]
}
 8005a1a:	bf00      	nop
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	40010000 	.word	0x40010000
 8005a2c:	40000400 	.word	0x40000400
 8005a30:	40000800 	.word	0x40000800
 8005a34:	40000c00 	.word	0x40000c00
 8005a38:	40010400 	.word	0x40010400
 8005a3c:	40014000 	.word	0x40014000
 8005a40:	40014400 	.word	0x40014400
 8005a44:	40014800 	.word	0x40014800
 8005a48:	40001800 	.word	0x40001800
 8005a4c:	40001c00 	.word	0x40001c00
 8005a50:	40002000 	.word	0x40002000

08005a54 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
 8005a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	f023 0201 	bic.w	r2, r3, #1
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4a28      	ldr	r2, [pc, #160]	; (8005b20 <TIM_TI1_SetConfig+0xcc>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d01b      	beq.n	8005aba <TIM_TI1_SetConfig+0x66>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a88:	d017      	beq.n	8005aba <TIM_TI1_SetConfig+0x66>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	4a25      	ldr	r2, [pc, #148]	; (8005b24 <TIM_TI1_SetConfig+0xd0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d013      	beq.n	8005aba <TIM_TI1_SetConfig+0x66>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4a24      	ldr	r2, [pc, #144]	; (8005b28 <TIM_TI1_SetConfig+0xd4>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d00f      	beq.n	8005aba <TIM_TI1_SetConfig+0x66>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4a23      	ldr	r2, [pc, #140]	; (8005b2c <TIM_TI1_SetConfig+0xd8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d00b      	beq.n	8005aba <TIM_TI1_SetConfig+0x66>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	4a22      	ldr	r2, [pc, #136]	; (8005b30 <TIM_TI1_SetConfig+0xdc>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d007      	beq.n	8005aba <TIM_TI1_SetConfig+0x66>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	4a21      	ldr	r2, [pc, #132]	; (8005b34 <TIM_TI1_SetConfig+0xe0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d003      	beq.n	8005aba <TIM_TI1_SetConfig+0x66>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	4a20      	ldr	r2, [pc, #128]	; (8005b38 <TIM_TI1_SetConfig+0xe4>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d101      	bne.n	8005abe <TIM_TI1_SetConfig+0x6a>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <TIM_TI1_SetConfig+0x6c>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d008      	beq.n	8005ad6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f023 0303 	bic.w	r3, r3, #3
 8005aca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	617b      	str	r3, [r7, #20]
 8005ad4:	e003      	b.n	8005ade <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f043 0301 	orr.w	r3, r3, #1
 8005adc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ae4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	011b      	lsls	r3, r3, #4
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	f023 030a 	bic.w	r3, r3, #10
 8005af8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	f003 030a 	and.w	r3, r3, #10
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	621a      	str	r2, [r3, #32]
}
 8005b12:	bf00      	nop
 8005b14:	371c      	adds	r7, #28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	40010000 	.word	0x40010000
 8005b24:	40000400 	.word	0x40000400
 8005b28:	40000800 	.word	0x40000800
 8005b2c:	40000c00 	.word	0x40000c00
 8005b30:	40010400 	.word	0x40010400
 8005b34:	40014000 	.word	0x40014000
 8005b38:	40001800 	.word	0x40001800

08005b3c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	f023 0210 	bic.w	r2, r3, #16
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	021b      	lsls	r3, r3, #8
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	031b      	lsls	r3, r3, #12
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b8e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	011b      	lsls	r3, r3, #4
 8005b94:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	621a      	str	r2, [r3, #32]
}
 8005baa:	bf00      	nop
 8005bac:	371c      	adds	r7, #28
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b087      	sub	sp, #28
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	60f8      	str	r0, [r7, #12]
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	607a      	str	r2, [r7, #4]
 8005bc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f023 0303 	bic.w	r3, r3, #3
 8005be2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bf2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005c06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	021b      	lsls	r3, r3, #8
 8005c0c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	621a      	str	r2, [r3, #32]
}
 8005c22:	bf00      	nop
 8005c24:	371c      	adds	r7, #28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b087      	sub	sp, #28
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	60f8      	str	r0, [r7, #12]
 8005c36:	60b9      	str	r1, [r7, #8]
 8005c38:	607a      	str	r2, [r7, #4]
 8005c3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c5a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	021b      	lsls	r3, r3, #8
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	031b      	lsls	r3, r3, #12
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005c80:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	031b      	lsls	r3, r3, #12
 8005c86:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	621a      	str	r2, [r3, #32]
}
 8005c9c:	bf00      	nop
 8005c9e:	371c      	adds	r7, #28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f003 031f 	and.w	r3, r3, #31
 8005cba:	2201      	movs	r2, #1
 8005cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6a1a      	ldr	r2, [r3, #32]
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	43db      	mvns	r3, r3
 8005cca:	401a      	ands	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6a1a      	ldr	r2, [r3, #32]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f003 031f 	and.w	r3, r3, #31
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	621a      	str	r2, [r3, #32]
}
 8005ce6:	bf00      	nop
 8005ce8:	371c      	adds	r7, #28
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
	...

08005cf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d101      	bne.n	8005d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d08:	2302      	movs	r3, #2
 8005d0a:	e05a      	b.n	8005dc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a21      	ldr	r2, [pc, #132]	; (8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d022      	beq.n	8005d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d58:	d01d      	beq.n	8005d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a1d      	ldr	r2, [pc, #116]	; (8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d018      	beq.n	8005d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a1b      	ldr	r2, [pc, #108]	; (8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d013      	beq.n	8005d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a1a      	ldr	r2, [pc, #104]	; (8005ddc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00e      	beq.n	8005d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a18      	ldr	r2, [pc, #96]	; (8005de0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d009      	beq.n	8005d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a17      	ldr	r2, [pc, #92]	; (8005de4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d004      	beq.n	8005d96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a15      	ldr	r2, [pc, #84]	; (8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d10c      	bne.n	8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40010000 	.word	0x40010000
 8005dd4:	40000400 	.word	0x40000400
 8005dd8:	40000800 	.word	0x40000800
 8005ddc:	40000c00 	.word	0x40000c00
 8005de0:	40010400 	.word	0x40010400
 8005de4:	40014000 	.word	0x40014000
 8005de8:	40001800 	.word	0x40001800

08005dec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e14:	b084      	sub	sp, #16
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b084      	sub	sp, #16
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	f107 001c 	add.w	r0, r7, #28
 8005e22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d122      	bne.n	8005e72 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005e40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d105      	bne.n	8005e66 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f9a0 	bl	80061ac <USB_CoreReset>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	73fb      	strb	r3, [r7, #15]
 8005e70:	e01a      	b.n	8005ea8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f994 	bl	80061ac <USB_CoreReset>
 8005e84:	4603      	mov	r3, r0
 8005e86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d106      	bne.n	8005e9c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	639a      	str	r2, [r3, #56]	; 0x38
 8005e9a:	e005      	b.n	8005ea8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d10b      	bne.n	8005ec6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f043 0206 	orr.w	r2, r3, #6
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f043 0220 	orr.w	r2, r3, #32
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ed2:	b004      	add	sp, #16
 8005ed4:	4770      	bx	lr

08005ed6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b083      	sub	sp, #12
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f043 0201 	orr.w	r2, r3, #1
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f023 0201 	bic.w	r2, r3, #1
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b084      	sub	sp, #16
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	460b      	mov	r3, r1
 8005f24:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f36:	78fb      	ldrb	r3, [r7, #3]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d115      	bne.n	8005f68 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f48:	2001      	movs	r0, #1
 8005f4a:	f7fb fd3f 	bl	80019cc <HAL_Delay>
      ms++;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	3301      	adds	r3, #1
 8005f52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f91a 	bl	800618e <USB_GetMode>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d01e      	beq.n	8005f9e <USB_SetCurrentMode+0x84>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2b31      	cmp	r3, #49	; 0x31
 8005f64:	d9f0      	bls.n	8005f48 <USB_SetCurrentMode+0x2e>
 8005f66:	e01a      	b.n	8005f9e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f68:	78fb      	ldrb	r3, [r7, #3]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d115      	bne.n	8005f9a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	f7fb fd26 	bl	80019cc <HAL_Delay>
      ms++;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3301      	adds	r3, #1
 8005f84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f901 	bl	800618e <USB_GetMode>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d005      	beq.n	8005f9e <USB_SetCurrentMode+0x84>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b31      	cmp	r3, #49	; 0x31
 8005f96:	d9f0      	bls.n	8005f7a <USB_SetCurrentMode+0x60>
 8005f98:	e001      	b.n	8005f9e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e005      	b.n	8005faa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2b32      	cmp	r3, #50	; 0x32
 8005fa2:	d101      	bne.n	8005fa8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e000      	b.n	8005faa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
	...

08005fb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	019b      	lsls	r3, r3, #6
 8005fc6:	f043 0220 	orr.w	r2, r3, #32
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	4a08      	ldr	r2, [pc, #32]	; (8005ff8 <USB_FlushTxFifo+0x44>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d901      	bls.n	8005fde <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e006      	b.n	8005fec <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	f003 0320 	and.w	r3, r3, #32
 8005fe6:	2b20      	cmp	r3, #32
 8005fe8:	d0f1      	beq.n	8005fce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	00030d40 	.word	0x00030d40

08005ffc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006004:	2300      	movs	r3, #0
 8006006:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2210      	movs	r2, #16
 800600c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	3301      	adds	r3, #1
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	4a08      	ldr	r2, [pc, #32]	; (8006038 <USB_FlushRxFifo+0x3c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d901      	bls.n	800601e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e006      	b.n	800602c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	f003 0310 	and.w	r3, r3, #16
 8006026:	2b10      	cmp	r3, #16
 8006028:	d0f1      	beq.n	800600e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	00030d40 	.word	0x00030d40

0800603c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800603c:	b480      	push	{r7}
 800603e:	b089      	sub	sp, #36	; 0x24
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	4611      	mov	r1, r2
 8006048:	461a      	mov	r2, r3
 800604a:	460b      	mov	r3, r1
 800604c:	71fb      	strb	r3, [r7, #7]
 800604e:	4613      	mov	r3, r2
 8006050:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800605a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800605e:	2b00      	cmp	r3, #0
 8006060:	d123      	bne.n	80060aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006062:	88bb      	ldrh	r3, [r7, #4]
 8006064:	3303      	adds	r3, #3
 8006066:	089b      	lsrs	r3, r3, #2
 8006068:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800606a:	2300      	movs	r3, #0
 800606c:	61bb      	str	r3, [r7, #24]
 800606e:	e018      	b.n	80060a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006070:	79fb      	ldrb	r3, [r7, #7]
 8006072:	031a      	lsls	r2, r3, #12
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	4413      	add	r3, r2
 8006078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800607c:	461a      	mov	r2, r3
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	3301      	adds	r3, #1
 8006088:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	3301      	adds	r3, #1
 800608e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	3301      	adds	r3, #1
 8006094:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	3301      	adds	r3, #1
 800609a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	3301      	adds	r3, #1
 80060a0:	61bb      	str	r3, [r7, #24]
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d3e2      	bcc.n	8006070 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3724      	adds	r7, #36	; 0x24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b08b      	sub	sp, #44	; 0x2c
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	4613      	mov	r3, r2
 80060c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80060ce:	88fb      	ldrh	r3, [r7, #6]
 80060d0:	089b      	lsrs	r3, r3, #2
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80060d6:	88fb      	ldrh	r3, [r7, #6]
 80060d8:	f003 0303 	and.w	r3, r3, #3
 80060dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80060de:	2300      	movs	r3, #0
 80060e0:	623b      	str	r3, [r7, #32]
 80060e2:	e014      	b.n	800610e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	3301      	adds	r3, #1
 80060f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	3301      	adds	r3, #1
 80060fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	3301      	adds	r3, #1
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	3301      	adds	r3, #1
 8006106:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	3301      	adds	r3, #1
 800610c:	623b      	str	r3, [r7, #32]
 800610e:	6a3a      	ldr	r2, [r7, #32]
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	429a      	cmp	r2, r3
 8006114:	d3e6      	bcc.n	80060e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006116:	8bfb      	ldrh	r3, [r7, #30]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d01e      	beq.n	800615a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800611c:	2300      	movs	r3, #0
 800611e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006126:	461a      	mov	r2, r3
 8006128:	f107 0310 	add.w	r3, r7, #16
 800612c:	6812      	ldr	r2, [r2, #0]
 800612e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	b2db      	uxtb	r3, r3
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	fa22 f303 	lsr.w	r3, r2, r3
 800613c:	b2da      	uxtb	r2, r3
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	701a      	strb	r2, [r3, #0]
      i++;
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	3301      	adds	r3, #1
 8006146:	623b      	str	r3, [r7, #32]
      pDest++;
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	3301      	adds	r3, #1
 800614c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800614e:	8bfb      	ldrh	r3, [r7, #30]
 8006150:	3b01      	subs	r3, #1
 8006152:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006154:	8bfb      	ldrh	r3, [r7, #30]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1ea      	bne.n	8006130 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800615c:	4618      	mov	r0, r3
 800615e:	372c      	adds	r7, #44	; 0x2c
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	4013      	ands	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006180:	68fb      	ldr	r3, [r7, #12]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800618e:	b480      	push	{r7}
 8006190:	b083      	sub	sp, #12
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	f003 0301 	and.w	r3, r3, #1
}
 800619e:	4618      	mov	r0, r3
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
	...

080061ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061b4:	2300      	movs	r3, #0
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	3301      	adds	r3, #1
 80061bc:	60fb      	str	r3, [r7, #12]
 80061be:	4a13      	ldr	r2, [pc, #76]	; (800620c <USB_CoreReset+0x60>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d901      	bls.n	80061c8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e01a      	b.n	80061fe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	daf3      	bge.n	80061b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	f043 0201 	orr.w	r2, r3, #1
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	3301      	adds	r3, #1
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	4a09      	ldr	r2, [pc, #36]	; (800620c <USB_CoreReset+0x60>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d901      	bls.n	80061f0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e006      	b.n	80061fe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d0f1      	beq.n	80061e0 <USB_CoreReset+0x34>

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	00030d40 	.word	0x00030d40

08006210 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006210:	b084      	sub	sp, #16
 8006212:	b580      	push	{r7, lr}
 8006214:	b084      	sub	sp, #16
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
 800621a:	f107 001c 	add.w	r0, r7, #28
 800621e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800622c:	461a      	mov	r2, r3
 800622e:	2300      	movs	r3, #0
 8006230:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006236:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006242:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800625a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800625e:	2b00      	cmp	r3, #0
 8006260:	d018      	beq.n	8006294 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	2b01      	cmp	r3, #1
 8006266:	d10a      	bne.n	800627e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006276:	f043 0304 	orr.w	r3, r3, #4
 800627a:	6013      	str	r3, [r2, #0]
 800627c:	e014      	b.n	80062a8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800628c:	f023 0304 	bic.w	r3, r3, #4
 8006290:	6013      	str	r3, [r2, #0]
 8006292:	e009      	b.n	80062a8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062a2:	f023 0304 	bic.w	r3, r3, #4
 80062a6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80062a8:	2110      	movs	r1, #16
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7ff fe82 	bl	8005fb4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7ff fea3 	bl	8005ffc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80062b6:	2300      	movs	r3, #0
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	e015      	b.n	80062e8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c8:	461a      	mov	r2, r3
 80062ca:	f04f 33ff 	mov.w	r3, #4294967295
 80062ce:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062dc:	461a      	mov	r2, r3
 80062de:	2300      	movs	r3, #0
 80062e0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	3301      	adds	r3, #1
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	6a3b      	ldr	r3, [r7, #32]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d3e5      	bcc.n	80062bc <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f04f 32ff 	mov.w	r2, #4294967295
 80062fc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00b      	beq.n	8006322 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006310:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a13      	ldr	r2, [pc, #76]	; (8006364 <USB_HostInit+0x154>)
 8006316:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a13      	ldr	r2, [pc, #76]	; (8006368 <USB_HostInit+0x158>)
 800631c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006320:	e009      	b.n	8006336 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2280      	movs	r2, #128	; 0x80
 8006326:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a10      	ldr	r2, [pc, #64]	; (800636c <USB_HostInit+0x15c>)
 800632c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a0f      	ldr	r2, [pc, #60]	; (8006370 <USB_HostInit+0x160>)
 8006332:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006338:	2b00      	cmp	r3, #0
 800633a:	d105      	bne.n	8006348 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	f043 0210 	orr.w	r2, r3, #16
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	699a      	ldr	r2, [r3, #24]
 800634c:	4b09      	ldr	r3, [pc, #36]	; (8006374 <USB_HostInit+0x164>)
 800634e:	4313      	orrs	r3, r2
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006360:	b004      	add	sp, #16
 8006362:	4770      	bx	lr
 8006364:	01000200 	.word	0x01000200
 8006368:	00e00300 	.word	0x00e00300
 800636c:	00600080 	.word	0x00600080
 8006370:	004000e0 	.word	0x004000e0
 8006374:	a3200008 	.word	0xa3200008

08006378 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006396:	f023 0303 	bic.w	r3, r3, #3
 800639a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	78fb      	ldrb	r3, [r7, #3]
 80063a6:	f003 0303 	and.w	r3, r3, #3
 80063aa:	68f9      	ldr	r1, [r7, #12]
 80063ac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80063b0:	4313      	orrs	r3, r2
 80063b2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80063b4:	78fb      	ldrb	r3, [r7, #3]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d107      	bne.n	80063ca <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063c0:	461a      	mov	r2, r3
 80063c2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80063c6:	6053      	str	r3, [r2, #4]
 80063c8:	e009      	b.n	80063de <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80063ca:	78fb      	ldrb	r3, [r7, #3]
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d106      	bne.n	80063de <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063d6:	461a      	mov	r2, r3
 80063d8:	f241 7370 	movw	r3, #6000	; 0x1770
 80063dc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800640c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800641a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800641c:	2064      	movs	r0, #100	; 0x64
 800641e:	f7fb fad5 	bl	80019cc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800642a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800642e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006430:	200a      	movs	r0, #10
 8006432:	f7fb facb 	bl	80019cc <HAL_Delay>

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	460b      	mov	r3, r1
 800644a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006464:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d109      	bne.n	8006484 <USB_DriveVbus+0x44>
 8006470:	78fb      	ldrb	r3, [r7, #3]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d106      	bne.n	8006484 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800647e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006482:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800648a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800648e:	d109      	bne.n	80064a4 <USB_DriveVbus+0x64>
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d106      	bne.n	80064a4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800649e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064a2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b085      	sub	sp, #20
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	0c5b      	lsrs	r3, r3, #17
 80064d0:	f003 0303 	and.w	r3, r3, #3
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3714      	adds	r7, #20
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	b29b      	uxth	r3, r3
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3714      	adds	r7, #20
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
	...

08006504 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b088      	sub	sp, #32
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	4608      	mov	r0, r1
 800650e:	4611      	mov	r1, r2
 8006510:	461a      	mov	r2, r3
 8006512:	4603      	mov	r3, r0
 8006514:	70fb      	strb	r3, [r7, #3]
 8006516:	460b      	mov	r3, r1
 8006518:	70bb      	strb	r3, [r7, #2]
 800651a:	4613      	mov	r3, r2
 800651c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006526:	78fb      	ldrb	r3, [r7, #3]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	4413      	add	r3, r2
 800652e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006532:	461a      	mov	r2, r3
 8006534:	f04f 33ff 	mov.w	r3, #4294967295
 8006538:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800653a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800653e:	2b03      	cmp	r3, #3
 8006540:	d87e      	bhi.n	8006640 <USB_HC_Init+0x13c>
 8006542:	a201      	add	r2, pc, #4	; (adr r2, 8006548 <USB_HC_Init+0x44>)
 8006544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006548:	08006559 	.word	0x08006559
 800654c:	08006603 	.word	0x08006603
 8006550:	08006559 	.word	0x08006559
 8006554:	080065c5 	.word	0x080065c5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006558:	78fb      	ldrb	r3, [r7, #3]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	4413      	add	r3, r2
 8006560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006564:	461a      	mov	r2, r3
 8006566:	f240 439d 	movw	r3, #1181	; 0x49d
 800656a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800656c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006570:	2b00      	cmp	r3, #0
 8006572:	da10      	bge.n	8006596 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006574:	78fb      	ldrb	r3, [r7, #3]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	4413      	add	r3, r2
 800657c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	78fa      	ldrb	r2, [r7, #3]
 8006584:	0151      	lsls	r1, r2, #5
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	440a      	add	r2, r1
 800658a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800658e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006592:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006594:	e057      	b.n	8006646 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800659a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d051      	beq.n	8006646 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80065a2:	78fb      	ldrb	r3, [r7, #3]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	78fa      	ldrb	r2, [r7, #3]
 80065b2:	0151      	lsls	r1, r2, #5
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	440a      	add	r2, r1
 80065b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80065c0:	60d3      	str	r3, [r2, #12]
      break;
 80065c2:	e040      	b.n	8006646 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80065c4:	78fb      	ldrb	r3, [r7, #3]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d0:	461a      	mov	r2, r3
 80065d2:	f240 639d 	movw	r3, #1693	; 0x69d
 80065d6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80065d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	da34      	bge.n	800664a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	78fa      	ldrb	r2, [r7, #3]
 80065f0:	0151      	lsls	r1, r2, #5
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	440a      	add	r2, r1
 80065f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065fe:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006600:	e023      	b.n	800664a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006602:	78fb      	ldrb	r3, [r7, #3]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	4413      	add	r3, r2
 800660a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660e:	461a      	mov	r2, r3
 8006610:	f240 2325 	movw	r3, #549	; 0x225
 8006614:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006616:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800661a:	2b00      	cmp	r3, #0
 800661c:	da17      	bge.n	800664e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800661e:	78fb      	ldrb	r3, [r7, #3]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	4413      	add	r3, r2
 8006626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	78fa      	ldrb	r2, [r7, #3]
 800662e:	0151      	lsls	r1, r2, #5
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	440a      	add	r2, r1
 8006634:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006638:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800663c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800663e:	e006      	b.n	800664e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	77fb      	strb	r3, [r7, #31]
      break;
 8006644:	e004      	b.n	8006650 <USB_HC_Init+0x14c>
      break;
 8006646:	bf00      	nop
 8006648:	e002      	b.n	8006650 <USB_HC_Init+0x14c>
      break;
 800664a:	bf00      	nop
 800664c:	e000      	b.n	8006650 <USB_HC_Init+0x14c>
      break;
 800664e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006656:	699a      	ldr	r2, [r3, #24]
 8006658:	78fb      	ldrb	r3, [r7, #3]
 800665a:	f003 030f 	and.w	r3, r3, #15
 800665e:	2101      	movs	r1, #1
 8006660:	fa01 f303 	lsl.w	r3, r1, r3
 8006664:	6939      	ldr	r1, [r7, #16]
 8006666:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800666a:	4313      	orrs	r3, r2
 800666c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800667a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800667e:	2b00      	cmp	r3, #0
 8006680:	da03      	bge.n	800668a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006686:	61bb      	str	r3, [r7, #24]
 8006688:	e001      	b.n	800668e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800668a:	2300      	movs	r3, #0
 800668c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7ff ff0f 	bl	80064b2 <USB_GetHostSpeed>
 8006694:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006696:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800669a:	2b02      	cmp	r3, #2
 800669c:	d106      	bne.n	80066ac <USB_HC_Init+0x1a8>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d003      	beq.n	80066ac <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80066a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80066a8:	617b      	str	r3, [r7, #20]
 80066aa:	e001      	b.n	80066b0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80066b0:	787b      	ldrb	r3, [r7, #1]
 80066b2:	059b      	lsls	r3, r3, #22
 80066b4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80066b8:	78bb      	ldrb	r3, [r7, #2]
 80066ba:	02db      	lsls	r3, r3, #11
 80066bc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80066c0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80066c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80066c6:	049b      	lsls	r3, r3, #18
 80066c8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80066cc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80066ce:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80066d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80066d4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80066da:	78fb      	ldrb	r3, [r7, #3]
 80066dc:	0159      	lsls	r1, r3, #5
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	440b      	add	r3, r1
 80066e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80066ec:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80066ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80066f2:	2b03      	cmp	r3, #3
 80066f4:	d10f      	bne.n	8006716 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80066f6:	78fb      	ldrb	r3, [r7, #3]
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	78fa      	ldrb	r2, [r7, #3]
 8006706:	0151      	lsls	r1, r2, #5
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	440a      	add	r2, r1
 800670c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006710:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006714:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006716:	7ffb      	ldrb	r3, [r7, #31]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3720      	adds	r7, #32
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b08c      	sub	sp, #48	; 0x30
 8006724:	af02      	add	r7, sp, #8
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	4613      	mov	r3, r2
 800672c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	785b      	ldrb	r3, [r3, #1]
 8006736:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800673c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006746:	2b00      	cmp	r3, #0
 8006748:	d02d      	beq.n	80067a6 <USB_HC_StartXfer+0x86>
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	791b      	ldrb	r3, [r3, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d129      	bne.n	80067a6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006752:	79fb      	ldrb	r3, [r7, #7]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d117      	bne.n	8006788 <USB_HC_StartXfer+0x68>
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	79db      	ldrb	r3, [r3, #7]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d003      	beq.n	8006768 <USB_HC_StartXfer+0x48>
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	79db      	ldrb	r3, [r3, #7]
 8006764:	2b02      	cmp	r3, #2
 8006766:	d10f      	bne.n	8006788 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	4413      	add	r3, r2
 8006770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	69fa      	ldr	r2, [r7, #28]
 8006778:	0151      	lsls	r1, r2, #5
 800677a:	6a3a      	ldr	r2, [r7, #32]
 800677c:	440a      	add	r2, r1
 800677e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006786:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10b      	bne.n	80067a6 <USB_HC_StartXfer+0x86>
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	795b      	ldrb	r3, [r3, #5]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d107      	bne.n	80067a6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	785b      	ldrb	r3, [r3, #1]
 800679a:	4619      	mov	r1, r3
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f000 fa2f 	bl	8006c00 <USB_DoPing>
      return HAL_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	e0f8      	b.n	8006998 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d018      	beq.n	80067e0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	8912      	ldrh	r2, [r2, #8]
 80067b6:	4413      	add	r3, r2
 80067b8:	3b01      	subs	r3, #1
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	8912      	ldrh	r2, [r2, #8]
 80067be:	fbb3 f3f2 	udiv	r3, r3, r2
 80067c2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80067c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80067c6:	8b7b      	ldrh	r3, [r7, #26]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d90b      	bls.n	80067e4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80067cc:	8b7b      	ldrh	r3, [r7, #26]
 80067ce:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80067d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	8912      	ldrh	r2, [r2, #8]
 80067d6:	fb02 f203 	mul.w	r2, r2, r3
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	611a      	str	r2, [r3, #16]
 80067de:	e001      	b.n	80067e4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80067e0:	2301      	movs	r3, #1
 80067e2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	78db      	ldrb	r3, [r3, #3]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d007      	beq.n	80067fc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80067ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	8912      	ldrh	r2, [r2, #8]
 80067f2:	fb02 f203 	mul.w	r2, r2, r3
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	611a      	str	r2, [r3, #16]
 80067fa:	e003      	b.n	8006804 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	695a      	ldr	r2, [r3, #20]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800680c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800680e:	04d9      	lsls	r1, r3, #19
 8006810:	4b63      	ldr	r3, [pc, #396]	; (80069a0 <USB_HC_StartXfer+0x280>)
 8006812:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006814:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	7a9b      	ldrb	r3, [r3, #10]
 800681a:	075b      	lsls	r3, r3, #29
 800681c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006820:	69f9      	ldr	r1, [r7, #28]
 8006822:	0148      	lsls	r0, r1, #5
 8006824:	6a39      	ldr	r1, [r7, #32]
 8006826:	4401      	add	r1, r0
 8006828:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800682c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800682e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006830:	79fb      	ldrb	r3, [r7, #7]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d009      	beq.n	800684a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	68d9      	ldr	r1, [r3, #12]
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	015a      	lsls	r2, r3, #5
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	4413      	add	r3, r2
 8006842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006846:	460a      	mov	r2, r1
 8006848:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b00      	cmp	r3, #0
 8006858:	bf0c      	ite	eq
 800685a:	2301      	moveq	r3, #1
 800685c:	2300      	movne	r3, #0
 800685e:	b2db      	uxtb	r3, r3
 8006860:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	4413      	add	r3, r2
 800686a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	69fa      	ldr	r2, [r7, #28]
 8006872:	0151      	lsls	r1, r2, #5
 8006874:	6a3a      	ldr	r2, [r7, #32]
 8006876:	440a      	add	r2, r1
 8006878:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800687c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006880:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	4413      	add	r3, r2
 800688a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	7e7b      	ldrb	r3, [r7, #25]
 8006892:	075b      	lsls	r3, r3, #29
 8006894:	69f9      	ldr	r1, [r7, #28]
 8006896:	0148      	lsls	r0, r1, #5
 8006898:	6a39      	ldr	r1, [r7, #32]
 800689a:	4401      	add	r1, r0
 800689c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80068a0:	4313      	orrs	r3, r2
 80068a2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068ba:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	78db      	ldrb	r3, [r3, #3]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d004      	beq.n	80068ce <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ca:	613b      	str	r3, [r7, #16]
 80068cc:	e003      	b.n	80068d6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068d4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068dc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	015a      	lsls	r2, r3, #5
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	4413      	add	r3, r2
 80068e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ea:	461a      	mov	r2, r3
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80068f0:	79fb      	ldrb	r3, [r7, #7]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	e04e      	b.n	8006998 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	78db      	ldrb	r3, [r3, #3]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d149      	bne.n	8006996 <USB_HC_StartXfer+0x276>
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d045      	beq.n	8006996 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	79db      	ldrb	r3, [r3, #7]
 800690e:	2b03      	cmp	r3, #3
 8006910:	d830      	bhi.n	8006974 <USB_HC_StartXfer+0x254>
 8006912:	a201      	add	r2, pc, #4	; (adr r2, 8006918 <USB_HC_StartXfer+0x1f8>)
 8006914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006918:	08006929 	.word	0x08006929
 800691c:	0800694d 	.word	0x0800694d
 8006920:	08006929 	.word	0x08006929
 8006924:	0800694d 	.word	0x0800694d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	3303      	adds	r3, #3
 800692e:	089b      	lsrs	r3, r3, #2
 8006930:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006932:	8afa      	ldrh	r2, [r7, #22]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006938:	b29b      	uxth	r3, r3
 800693a:	429a      	cmp	r2, r3
 800693c:	d91c      	bls.n	8006978 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	f043 0220 	orr.w	r2, r3, #32
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	619a      	str	r2, [r3, #24]
        }
        break;
 800694a:	e015      	b.n	8006978 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	3303      	adds	r3, #3
 8006952:	089b      	lsrs	r3, r3, #2
 8006954:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006956:	8afa      	ldrh	r2, [r7, #22]
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	b29b      	uxth	r3, r3
 8006962:	429a      	cmp	r2, r3
 8006964:	d90a      	bls.n	800697c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	619a      	str	r2, [r3, #24]
        }
        break;
 8006972:	e003      	b.n	800697c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006974:	bf00      	nop
 8006976:	e002      	b.n	800697e <USB_HC_StartXfer+0x25e>
        break;
 8006978:	bf00      	nop
 800697a:	e000      	b.n	800697e <USB_HC_StartXfer+0x25e>
        break;
 800697c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	68d9      	ldr	r1, [r3, #12]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	785a      	ldrb	r2, [r3, #1]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	b29b      	uxth	r3, r3
 800698c:	2000      	movs	r0, #0
 800698e:	9000      	str	r0, [sp, #0]
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f7ff fb53 	bl	800603c <USB_WritePacket>
  }

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3728      	adds	r7, #40	; 0x28
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	1ff80000 	.word	0x1ff80000

080069a4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	b29b      	uxth	r3, r3
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b089      	sub	sp, #36	; 0x24
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
 80069ce:	460b      	mov	r3, r1
 80069d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80069d6:	78fb      	ldrb	r3, [r7, #3]
 80069d8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80069da:	2300      	movs	r3, #0
 80069dc:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	0c9b      	lsrs	r3, r3, #18
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	0fdb      	lsrs	r3, r3, #31
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f003 0320 	and.w	r3, r3, #32
 8006a12:	2b20      	cmp	r3, #32
 8006a14:	d104      	bne.n	8006a20 <USB_HC_Halt+0x5a>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	e0e8      	b.n	8006bf2 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <USB_HC_Halt+0x66>
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d173      	bne.n	8006b14 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	0151      	lsls	r1, r2, #5
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	440a      	add	r2, r1
 8006a42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a4a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f003 0320 	and.w	r3, r3, #32
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f040 80cb 	bne.w	8006bf0 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d143      	bne.n	8006aee <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	0151      	lsls	r1, r2, #5
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	440a      	add	r2, r1
 8006a7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a84:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	015a      	lsls	r2, r3, #5
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	0151      	lsls	r1, r2, #5
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	440a      	add	r2, r1
 8006a9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aa0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006aa4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	015a      	lsls	r2, r3, #5
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	4413      	add	r3, r2
 8006aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	0151      	lsls	r1, r2, #5
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	440a      	add	r2, r1
 8006abc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ac0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ac4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	61fb      	str	r3, [r7, #28]
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ad2:	d81d      	bhi.n	8006b10 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ae6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006aea:	d0ec      	beq.n	8006ac6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006aec:	e080      	b.n	8006bf0 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	015a      	lsls	r2, r3, #5
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	4413      	add	r3, r2
 8006af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	0151      	lsls	r1, r2, #5
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	440a      	add	r2, r1
 8006b04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b0c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b0e:	e06f      	b.n	8006bf0 <USB_HC_Halt+0x22a>
            break;
 8006b10:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b12:	e06d      	b.n	8006bf0 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	0151      	lsls	r1, r2, #5
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	440a      	add	r2, r1
 8006b2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b32:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d143      	bne.n	8006bcc <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	0151      	lsls	r1, r2, #5
 8006b56:	69ba      	ldr	r2, [r7, #24]
 8006b58:	440a      	add	r2, r1
 8006b5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b62:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	0151      	lsls	r1, r2, #5
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	440a      	add	r2, r1
 8006b7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b82:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	0151      	lsls	r1, r2, #5
 8006b96:	69ba      	ldr	r2, [r7, #24]
 8006b98:	440a      	add	r2, r1
 8006b9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ba2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	61fb      	str	r3, [r7, #28]
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bb0:	d81d      	bhi.n	8006bee <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bc8:	d0ec      	beq.n	8006ba4 <USB_HC_Halt+0x1de>
 8006bca:	e011      	b.n	8006bf0 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	015a      	lsls	r2, r3, #5
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	0151      	lsls	r1, r2, #5
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	440a      	add	r2, r1
 8006be2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006be6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bea:	6013      	str	r3, [r2, #0]
 8006bec:	e000      	b.n	8006bf0 <USB_HC_Halt+0x22a>
          break;
 8006bee:	bf00      	nop
    }
  }

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3724      	adds	r7, #36	; 0x24
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
	...

08006c00 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006c10:	78fb      	ldrb	r3, [r7, #3]
 8006c12:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006c14:	2301      	movs	r3, #1
 8006c16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	04da      	lsls	r2, r3, #19
 8006c1c:	4b15      	ldr	r3, [pc, #84]	; (8006c74 <USB_DoPing+0x74>)
 8006c1e:	4013      	ands	r3, r2
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	0151      	lsls	r1, r2, #5
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	440a      	add	r2, r1
 8006c28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c30:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c48:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c50:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	015a      	lsls	r2, r3, #5
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c5e:	461a      	mov	r2, r3
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	371c      	adds	r7, #28
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	1ff80000 	.word	0x1ff80000

08006c78 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7ff f935 	bl	8005ef8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006c8e:	2110      	movs	r1, #16
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7ff f98f 	bl	8005fb4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7ff f9b0 	bl	8005ffc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	613b      	str	r3, [r7, #16]
 8006ca0:	e01f      	b.n	8006ce2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cb8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cc0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cc8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	613b      	str	r3, [r7, #16]
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	2b0f      	cmp	r3, #15
 8006ce6:	d9dc      	bls.n	8006ca2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006ce8:	2300      	movs	r3, #0
 8006cea:	613b      	str	r3, [r7, #16]
 8006cec:	e034      	b.n	8006d58 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	015a      	lsls	r2, r3, #5
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d04:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d0c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d14:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	015a      	lsls	r2, r3, #5
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d22:	461a      	mov	r2, r3
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	617b      	str	r3, [r7, #20]
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d34:	d80c      	bhi.n	8006d50 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	015a      	lsls	r2, r3, #5
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d4c:	d0ec      	beq.n	8006d28 <USB_StopHost+0xb0>
 8006d4e:	e000      	b.n	8006d52 <USB_StopHost+0xda>
        break;
 8006d50:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	3301      	adds	r3, #1
 8006d56:	613b      	str	r3, [r7, #16]
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	2b0f      	cmp	r3, #15
 8006d5c:	d9c7      	bls.n	8006cee <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d64:	461a      	mov	r2, r3
 8006d66:	f04f 33ff 	mov.w	r3, #4294967295
 8006d6a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d72:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7ff f8ae 	bl	8005ed6 <USB_EnableGlobalInt>

  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3718      	adds	r7, #24
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006d84:	b590      	push	{r4, r7, lr}
 8006d86:	b089      	sub	sp, #36	; 0x24
 8006d88:	af04      	add	r7, sp, #16
 8006d8a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	2202      	movs	r2, #2
 8006d90:	2102      	movs	r1, #2
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fc66 	bl	8007664 <USBH_FindInterface>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
 8006d9e:	2bff      	cmp	r3, #255	; 0xff
 8006da0:	d002      	beq.n	8006da8 <USBH_CDC_InterfaceInit+0x24>
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d901      	bls.n	8006dac <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006da8:	2302      	movs	r3, #2
 8006daa:	e13d      	b.n	8007028 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
 8006dae:	4619      	mov	r1, r3
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fc3b 	bl	800762c <USBH_SelectInterface>
 8006db6:	4603      	mov	r3, r0
 8006db8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006dba:	7bbb      	ldrb	r3, [r7, #14]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d001      	beq.n	8006dc4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	e131      	b.n	8007028 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006dca:	2050      	movs	r0, #80	; 0x50
 8006dcc:	f002 fa00 	bl	80091d0 <malloc>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dda:	69db      	ldr	r3, [r3, #28]
 8006ddc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006de4:	2302      	movs	r3, #2
 8006de6:	e11f      	b.n	8007028 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006de8:	2250      	movs	r2, #80	; 0x50
 8006dea:	2100      	movs	r1, #0
 8006dec:	68b8      	ldr	r0, [r7, #8]
 8006dee:	f002 f9ff 	bl	80091f0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006df2:	7bfb      	ldrb	r3, [r7, #15]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	211a      	movs	r1, #26
 8006df8:	fb01 f303 	mul.w	r3, r1, r3
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	b25b      	sxtb	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	da15      	bge.n	8006e36 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	211a      	movs	r1, #26
 8006e10:	fb01 f303 	mul.w	r3, r1, r3
 8006e14:	4413      	add	r3, r2
 8006e16:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e1a:	781a      	ldrb	r2, [r3, #0]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e20:	7bfb      	ldrb	r3, [r7, #15]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	211a      	movs	r1, #26
 8006e26:	fb01 f303 	mul.w	r3, r1, r3
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006e30:	881a      	ldrh	r2, [r3, #0]
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	785b      	ldrb	r3, [r3, #1]
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f001 fe32 	bl	8008aa6 <USBH_AllocPipe>
 8006e42:	4603      	mov	r3, r0
 8006e44:	461a      	mov	r2, r3
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	7819      	ldrb	r1, [r3, #0]
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	7858      	ldrb	r0, [r3, #1]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	8952      	ldrh	r2, [r2, #10]
 8006e62:	9202      	str	r2, [sp, #8]
 8006e64:	2203      	movs	r2, #3
 8006e66:	9201      	str	r2, [sp, #4]
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	4623      	mov	r3, r4
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f001 fdea 	bl	8008a48 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f002 f8f9 	bl	8009074 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006e82:	2300      	movs	r3, #0
 8006e84:	2200      	movs	r2, #0
 8006e86:	210a      	movs	r1, #10
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fbeb 	bl	8007664 <USBH_FindInterface>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
 8006e94:	2bff      	cmp	r3, #255	; 0xff
 8006e96:	d002      	beq.n	8006e9e <USBH_CDC_InterfaceInit+0x11a>
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d901      	bls.n	8006ea2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	e0c2      	b.n	8007028 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	211a      	movs	r1, #26
 8006ea8:	fb01 f303 	mul.w	r3, r1, r3
 8006eac:	4413      	add	r3, r2
 8006eae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	b25b      	sxtb	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	da16      	bge.n	8006ee8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	211a      	movs	r1, #26
 8006ec0:	fb01 f303 	mul.w	r3, r1, r3
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006eca:	781a      	ldrb	r2, [r3, #0]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	211a      	movs	r1, #26
 8006ed6:	fb01 f303 	mul.w	r3, r1, r3
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ee0:	881a      	ldrh	r2, [r3, #0]
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	835a      	strh	r2, [r3, #26]
 8006ee6:	e015      	b.n	8006f14 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	211a      	movs	r1, #26
 8006eee:	fb01 f303 	mul.w	r3, r1, r3
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ef8:	781a      	ldrb	r2, [r3, #0]
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	211a      	movs	r1, #26
 8006f04:	fb01 f303 	mul.w	r3, r1, r3
 8006f08:	4413      	add	r3, r2
 8006f0a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006f0e:	881a      	ldrh	r2, [r3, #0]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	211a      	movs	r1, #26
 8006f1a:	fb01 f303 	mul.w	r3, r1, r3
 8006f1e:	4413      	add	r3, r2
 8006f20:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	b25b      	sxtb	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	da16      	bge.n	8006f5a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006f2c:	7bfb      	ldrb	r3, [r7, #15]
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	211a      	movs	r1, #26
 8006f32:	fb01 f303 	mul.w	r3, r1, r3
 8006f36:	4413      	add	r3, r2
 8006f38:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006f3c:	781a      	ldrb	r2, [r3, #0]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006f42:	7bfb      	ldrb	r3, [r7, #15]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	211a      	movs	r1, #26
 8006f48:	fb01 f303 	mul.w	r3, r1, r3
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006f52:	881a      	ldrh	r2, [r3, #0]
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	835a      	strh	r2, [r3, #26]
 8006f58:	e015      	b.n	8006f86 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	211a      	movs	r1, #26
 8006f60:	fb01 f303 	mul.w	r3, r1, r3
 8006f64:	4413      	add	r3, r2
 8006f66:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006f6a:	781a      	ldrb	r2, [r3, #0]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	211a      	movs	r1, #26
 8006f76:	fb01 f303 	mul.w	r3, r1, r3
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006f80:	881a      	ldrh	r2, [r3, #0]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	7b9b      	ldrb	r3, [r3, #14]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f001 fd8a 	bl	8008aa6 <USBH_AllocPipe>
 8006f92:	4603      	mov	r3, r0
 8006f94:	461a      	mov	r2, r3
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	7bdb      	ldrb	r3, [r3, #15]
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f001 fd80 	bl	8008aa6 <USBH_AllocPipe>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	461a      	mov	r2, r3
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	7b59      	ldrb	r1, [r3, #13]
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	7b98      	ldrb	r0, [r3, #14]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	8b12      	ldrh	r2, [r2, #24]
 8006fc6:	9202      	str	r2, [sp, #8]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	9201      	str	r2, [sp, #4]
 8006fcc:	9300      	str	r3, [sp, #0]
 8006fce:	4623      	mov	r3, r4
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f001 fd38 	bl	8008a48 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	7b19      	ldrb	r1, [r3, #12]
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	7bd8      	ldrb	r0, [r3, #15]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	8b52      	ldrh	r2, [r2, #26]
 8006ff0:	9202      	str	r2, [sp, #8]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	9201      	str	r2, [sp, #4]
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	4623      	mov	r3, r4
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f001 fd23 	bl	8008a48 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	7b5b      	ldrb	r3, [r3, #13]
 800700e:	2200      	movs	r2, #0
 8007010:	4619      	mov	r1, r3
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f002 f82e 	bl	8009074 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	7b1b      	ldrb	r3, [r3, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	4619      	mov	r1, r3
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f002 f827 	bl	8009074 <USBH_LL_SetToggle>

  return USBH_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	bd90      	pop	{r4, r7, pc}

08007030 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00e      	beq.n	8007068 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	4619      	mov	r1, r3
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f001 fd18 	bl	8008a86 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	4619      	mov	r1, r3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 fd43 	bl	8008ae8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	7b1b      	ldrb	r3, [r3, #12]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00e      	beq.n	800708e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	7b1b      	ldrb	r3, [r3, #12]
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f001 fd05 	bl	8008a86 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	7b1b      	ldrb	r3, [r3, #12]
 8007080:	4619      	mov	r1, r3
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f001 fd30 	bl	8008ae8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	7b5b      	ldrb	r3, [r3, #13]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00e      	beq.n	80070b4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	7b5b      	ldrb	r3, [r3, #13]
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 fcf2 	bl	8008a86 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	7b5b      	ldrb	r3, [r3, #13]
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f001 fd1d 	bl	8008ae8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070ba:	69db      	ldr	r3, [r3, #28]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00b      	beq.n	80070d8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070c6:	69db      	ldr	r3, [r3, #28]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f002 f889 	bl	80091e0 <free>
    phost->pActiveClass->pData = 0U;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070d4:	2200      	movs	r2, #0
 80070d6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b084      	sub	sp, #16
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3340      	adds	r3, #64	; 0x40
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f8b1 	bl	8007262 <GetLineCoding>
 8007100:	4603      	mov	r3, r0
 8007102:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007104:	7afb      	ldrb	r3, [r7, #11]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d105      	bne.n	8007116 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007110:	2102      	movs	r1, #2
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007116:	7afb      	ldrb	r3, [r7, #11]
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007128:	2301      	movs	r3, #1
 800712a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800712c:	2300      	movs	r3, #0
 800712e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007140:	2b04      	cmp	r3, #4
 8007142:	d877      	bhi.n	8007234 <USBH_CDC_Process+0x114>
 8007144:	a201      	add	r2, pc, #4	; (adr r2, 800714c <USBH_CDC_Process+0x2c>)
 8007146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714a:	bf00      	nop
 800714c:	08007161 	.word	0x08007161
 8007150:	08007167 	.word	0x08007167
 8007154:	08007197 	.word	0x08007197
 8007158:	0800720b 	.word	0x0800720b
 800715c:	08007219 	.word	0x08007219
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	73fb      	strb	r3, [r7, #15]
      break;
 8007164:	e06d      	b.n	8007242 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f897 	bl	80072a0 <SetLineCoding>
 8007172:	4603      	mov	r3, r0
 8007174:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007176:	7bbb      	ldrb	r3, [r7, #14]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d104      	bne.n	8007186 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2202      	movs	r2, #2
 8007180:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007184:	e058      	b.n	8007238 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007186:	7bbb      	ldrb	r3, [r7, #14]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d055      	beq.n	8007238 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	2204      	movs	r2, #4
 8007190:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007194:	e050      	b.n	8007238 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	3340      	adds	r3, #64	; 0x40
 800719a:	4619      	mov	r1, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f860 	bl	8007262 <GetLineCoding>
 80071a2:	4603      	mov	r3, r0
 80071a4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80071a6:	7bbb      	ldrb	r3, [r7, #14]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d126      	bne.n	80071fa <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071be:	791b      	ldrb	r3, [r3, #4]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d13b      	bne.n	800723c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ce:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d133      	bne.n	800723c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071de:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d12b      	bne.n	800723c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ec:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d124      	bne.n	800723c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f958 	bl	80074a8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80071f8:	e020      	b.n	800723c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80071fa:	7bbb      	ldrb	r3, [r7, #14]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d01d      	beq.n	800723c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2204      	movs	r2, #4
 8007204:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007208:	e018      	b.n	800723c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f867 	bl	80072de <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f8da 	bl	80073ca <CDC_ProcessReception>
      break;
 8007216:	e014      	b.n	8007242 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007218:	2100      	movs	r1, #0
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 ffe3 	bl	80081e6 <USBH_ClrFeature>
 8007220:	4603      	mov	r3, r0
 8007222:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007224:	7bbb      	ldrb	r3, [r7, #14]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10a      	bne.n	8007240 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007232:	e005      	b.n	8007240 <USBH_CDC_Process+0x120>

    default:
      break;
 8007234:	bf00      	nop
 8007236:	e004      	b.n	8007242 <USBH_CDC_Process+0x122>
      break;
 8007238:	bf00      	nop
 800723a:	e002      	b.n	8007242 <USBH_CDC_Process+0x122>
      break;
 800723c:	bf00      	nop
 800723e:	e000      	b.n	8007242 <USBH_CDC_Process+0x122>
      break;
 8007240:	bf00      	nop

  }

  return status;
 8007242:	7bfb      	ldrb	r3, [r7, #15]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b082      	sub	sp, #8
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	22a1      	movs	r2, #161	; 0xa1
 8007270:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2221      	movs	r2, #33	; 0x21
 8007276:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2207      	movs	r2, #7
 8007288:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	2207      	movs	r2, #7
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f001 f988 	bl	80085a6 <USBH_CtlReq>
 8007296:	4603      	mov	r3, r0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3708      	adds	r7, #8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2221      	movs	r2, #33	; 0x21
 80072ae:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2220      	movs	r2, #32
 80072b4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2207      	movs	r2, #7
 80072c6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	2207      	movs	r2, #7
 80072cc:	4619      	mov	r1, r3
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f001 f969 	bl	80085a6 <USBH_CtlReq>
 80072d4:	4603      	mov	r3, r0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b086      	sub	sp, #24
 80072e2:	af02      	add	r7, sp, #8
 80072e4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072ec:	69db      	ldr	r3, [r3, #28]
 80072ee:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80072f0:	2300      	movs	r3, #0
 80072f2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d002      	beq.n	8007304 <CDC_ProcessTransmission+0x26>
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d023      	beq.n	800734a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007302:	e05e      	b.n	80073c2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	8b12      	ldrh	r2, [r2, #24]
 800730c:	4293      	cmp	r3, r2
 800730e:	d90b      	bls.n	8007328 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	69d9      	ldr	r1, [r3, #28]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	8b1a      	ldrh	r2, [r3, #24]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	7b5b      	ldrb	r3, [r3, #13]
 800731c:	2001      	movs	r0, #1
 800731e:	9000      	str	r0, [sp, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f001 fb4e 	bl	80089c2 <USBH_BulkSendData>
 8007326:	e00b      	b.n	8007340 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007330:	b29a      	uxth	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	7b5b      	ldrb	r3, [r3, #13]
 8007336:	2001      	movs	r0, #1
 8007338:	9000      	str	r0, [sp, #0]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f001 fb41 	bl	80089c2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2202      	movs	r2, #2
 8007344:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007348:	e03b      	b.n	80073c2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	7b5b      	ldrb	r3, [r3, #13]
 800734e:	4619      	mov	r1, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f001 fe65 	bl	8009020 <USBH_LL_GetURBState>
 8007356:	4603      	mov	r3, r0
 8007358:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800735a:	7afb      	ldrb	r3, [r7, #11]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d128      	bne.n	80073b2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	8b12      	ldrh	r2, [r2, #24]
 8007368:	4293      	cmp	r3, r2
 800736a:	d90e      	bls.n	800738a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	8b12      	ldrh	r2, [r2, #24]
 8007374:	1a9a      	subs	r2, r3, r2
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	8b12      	ldrh	r2, [r2, #24]
 8007382:	441a      	add	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	61da      	str	r2, [r3, #28]
 8007388:	e002      	b.n	8007390 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	2b00      	cmp	r3, #0
 8007396:	d004      	beq.n	80073a2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80073a0:	e00e      	b.n	80073c0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f868 	bl	8007480 <USBH_CDC_TransmitCallback>
      break;
 80073b0:	e006      	b.n	80073c0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80073b2:	7afb      	ldrb	r3, [r7, #11]
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d103      	bne.n	80073c0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80073c0:	bf00      	nop
  }
}
 80073c2:	bf00      	nop
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b086      	sub	sp, #24
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073d8:	69db      	ldr	r3, [r3, #28]
 80073da:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80073dc:	2300      	movs	r3, #0
 80073de:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d002      	beq.n	80073f0 <CDC_ProcessReception+0x26>
 80073ea:	2b04      	cmp	r3, #4
 80073ec:	d00e      	beq.n	800740c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80073ee:	e043      	b.n	8007478 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	6a19      	ldr	r1, [r3, #32]
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	8b5a      	ldrh	r2, [r3, #26]
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	7b1b      	ldrb	r3, [r3, #12]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f001 fb05 	bl	8008a0c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2204      	movs	r2, #4
 8007406:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800740a:	e035      	b.n	8007478 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	7b1b      	ldrb	r3, [r3, #12]
 8007410:	4619      	mov	r1, r3
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 fe04 	bl	8009020 <USBH_LL_GetURBState>
 8007418:	4603      	mov	r3, r0
 800741a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800741c:	7cfb      	ldrb	r3, [r7, #19]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d129      	bne.n	8007476 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	7b1b      	ldrb	r3, [r3, #12]
 8007426:	4619      	mov	r1, r3
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f001 fd67 	bl	8008efc <USBH_LL_GetLastXferSize>
 800742e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	429a      	cmp	r2, r3
 8007438:	d016      	beq.n	8007468 <CDC_ProcessReception+0x9e>
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	8b5b      	ldrh	r3, [r3, #26]
 800743e:	461a      	mov	r2, r3
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	4293      	cmp	r3, r2
 8007444:	d910      	bls.n	8007468 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	1ad2      	subs	r2, r2, r3
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	6a1a      	ldr	r2, [r3, #32]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	441a      	add	r2, r3
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	2203      	movs	r2, #3
 8007462:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007466:	e006      	b.n	8007476 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f80f 	bl	8007494 <USBH_CDC_ReceiveCallback>
      break;
 8007476:	bf00      	nop
  }
}
 8007478:	bf00      	nop
 800747a:	3718      	adds	r7, #24
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	4613      	mov	r3, r2
 80074c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d101      	bne.n	80074d4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80074d0:	2302      	movs	r3, #2
 80074d2:	e029      	b.n	8007528 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	79fa      	ldrb	r2, [r7, #7]
 80074d8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f000 f81f 	bl	8007530 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f001 fc37 	bl	8008d94 <USBH_LL_Init>

  return USBH_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007538:	2300      	movs	r3, #0
 800753a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800753c:	2300      	movs	r3, #0
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	e009      	b.n	8007556 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	33e0      	adds	r3, #224	; 0xe0
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	4413      	add	r3, r2
 800754c:	2200      	movs	r2, #0
 800754e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	3301      	adds	r3, #1
 8007554:	60fb      	str	r3, [r7, #12]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2b0e      	cmp	r3, #14
 800755a:	d9f2      	bls.n	8007542 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800755c:	2300      	movs	r3, #0
 800755e:	60fb      	str	r3, [r7, #12]
 8007560:	e009      	b.n	8007576 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	4413      	add	r3, r2
 8007568:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800756c:	2200      	movs	r2, #0
 800756e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	3301      	adds	r3, #1
 8007574:	60fb      	str	r3, [r7, #12]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800757c:	d3f1      	bcc.n	8007562 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2240      	movs	r2, #64	; 0x40
 80075a2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d016      	beq.n	800761a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10e      	bne.n	8007614 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80075fc:	1c59      	adds	r1, r3, #1
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	33de      	adds	r3, #222	; 0xde
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800760e:	2300      	movs	r3, #0
 8007610:	73fb      	strb	r3, [r7, #15]
 8007612:	e004      	b.n	800761e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007614:	2302      	movs	r3, #2
 8007616:	73fb      	strb	r3, [r7, #15]
 8007618:	e001      	b.n	800761e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800761a:	2302      	movs	r3, #2
 800761c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800761e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007642:	78fa      	ldrb	r2, [r7, #3]
 8007644:	429a      	cmp	r2, r3
 8007646:	d204      	bcs.n	8007652 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	78fa      	ldrb	r2, [r7, #3]
 800764c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007650:	e001      	b.n	8007656 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007652:	2302      	movs	r3, #2
 8007654:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007656:	7bfb      	ldrb	r3, [r7, #15]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007664:	b480      	push	{r7}
 8007666:	b087      	sub	sp, #28
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	4608      	mov	r0, r1
 800766e:	4611      	mov	r1, r2
 8007670:	461a      	mov	r2, r3
 8007672:	4603      	mov	r3, r0
 8007674:	70fb      	strb	r3, [r7, #3]
 8007676:	460b      	mov	r3, r1
 8007678:	70bb      	strb	r3, [r7, #2]
 800767a:	4613      	mov	r3, r2
 800767c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800767e:	2300      	movs	r3, #0
 8007680:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007682:	2300      	movs	r3, #0
 8007684:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800768c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800768e:	e025      	b.n	80076dc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007690:	7dfb      	ldrb	r3, [r7, #23]
 8007692:	221a      	movs	r2, #26
 8007694:	fb02 f303 	mul.w	r3, r2, r3
 8007698:	3308      	adds	r3, #8
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	4413      	add	r3, r2
 800769e:	3302      	adds	r3, #2
 80076a0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	795b      	ldrb	r3, [r3, #5]
 80076a6:	78fa      	ldrb	r2, [r7, #3]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d002      	beq.n	80076b2 <USBH_FindInterface+0x4e>
 80076ac:	78fb      	ldrb	r3, [r7, #3]
 80076ae:	2bff      	cmp	r3, #255	; 0xff
 80076b0:	d111      	bne.n	80076d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80076b6:	78ba      	ldrb	r2, [r7, #2]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d002      	beq.n	80076c2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80076bc:	78bb      	ldrb	r3, [r7, #2]
 80076be:	2bff      	cmp	r3, #255	; 0xff
 80076c0:	d109      	bne.n	80076d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80076c6:	787a      	ldrb	r2, [r7, #1]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d002      	beq.n	80076d2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80076cc:	787b      	ldrb	r3, [r7, #1]
 80076ce:	2bff      	cmp	r3, #255	; 0xff
 80076d0:	d101      	bne.n	80076d6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80076d2:	7dfb      	ldrb	r3, [r7, #23]
 80076d4:	e006      	b.n	80076e4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80076d6:	7dfb      	ldrb	r3, [r7, #23]
 80076d8:	3301      	adds	r3, #1
 80076da:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80076dc:	7dfb      	ldrb	r3, [r7, #23]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d9d6      	bls.n	8007690 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80076e2:	23ff      	movs	r3, #255	; 0xff
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	371c      	adds	r7, #28
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f001 fb87 	bl	8008e0c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80076fe:	2101      	movs	r1, #1
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f001 fca0 	bl	8009046 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b088      	sub	sp, #32
 8007714:	af04      	add	r7, sp, #16
 8007716:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007718:	2302      	movs	r3, #2
 800771a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800771c:	2300      	movs	r3, #0
 800771e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2b01      	cmp	r3, #1
 800772a:	d102      	bne.n	8007732 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2203      	movs	r2, #3
 8007730:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b0b      	cmp	r3, #11
 800773a:	f200 81b3 	bhi.w	8007aa4 <USBH_Process+0x394>
 800773e:	a201      	add	r2, pc, #4	; (adr r2, 8007744 <USBH_Process+0x34>)
 8007740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007744:	08007775 	.word	0x08007775
 8007748:	080077a7 	.word	0x080077a7
 800774c:	0800780f 	.word	0x0800780f
 8007750:	08007a3f 	.word	0x08007a3f
 8007754:	08007aa5 	.word	0x08007aa5
 8007758:	080078b3 	.word	0x080078b3
 800775c:	080079e5 	.word	0x080079e5
 8007760:	080078e9 	.word	0x080078e9
 8007764:	08007909 	.word	0x08007909
 8007768:	08007929 	.word	0x08007929
 800776c:	08007957 	.word	0x08007957
 8007770:	08007a27 	.word	0x08007a27
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 8193 	beq.w	8007aa8 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007788:	20c8      	movs	r0, #200	; 0xc8
 800778a:	f001 fca3 	bl	80090d4 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f001 fb99 	bl	8008ec6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80077a4:	e180      	b.n	8007aa8 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d107      	bne.n	80077c0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2202      	movs	r2, #2
 80077bc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80077be:	e182      	b.n	8007ac6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80077c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077ca:	d914      	bls.n	80077f6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80077d2:	3301      	adds	r3, #1
 80077d4:	b2da      	uxtb	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d903      	bls.n	80077ee <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	220d      	movs	r2, #13
 80077ea:	701a      	strb	r2, [r3, #0]
      break;
 80077ec:	e16b      	b.n	8007ac6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	701a      	strb	r2, [r3, #0]
      break;
 80077f4:	e167      	b.n	8007ac6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80077fc:	f103 020a 	add.w	r2, r3, #10
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007806:	200a      	movs	r0, #10
 8007808:	f001 fc64 	bl	80090d4 <USBH_Delay>
      break;
 800780c:	e15b      	b.n	8007ac6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007814:	2b00      	cmp	r3, #0
 8007816:	d005      	beq.n	8007824 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800781e:	2104      	movs	r1, #4
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007824:	2064      	movs	r0, #100	; 0x64
 8007826:	f001 fc55 	bl	80090d4 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f001 fb24 	bl	8008e78 <USBH_LL_GetSpeed>
 8007830:	4603      	mov	r3, r0
 8007832:	461a      	mov	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2205      	movs	r2, #5
 800783e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007840:	2100      	movs	r1, #0
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f001 f92f 	bl	8008aa6 <USBH_AllocPipe>
 8007848:	4603      	mov	r3, r0
 800784a:	461a      	mov	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007850:	2180      	movs	r1, #128	; 0x80
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f001 f927 	bl	8008aa6 <USBH_AllocPipe>
 8007858:	4603      	mov	r3, r0
 800785a:	461a      	mov	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	7919      	ldrb	r1, [r3, #4]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007874:	b292      	uxth	r2, r2
 8007876:	9202      	str	r2, [sp, #8]
 8007878:	2200      	movs	r2, #0
 800787a:	9201      	str	r2, [sp, #4]
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	4603      	mov	r3, r0
 8007880:	2280      	movs	r2, #128	; 0x80
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f001 f8e0 	bl	8008a48 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	7959      	ldrb	r1, [r3, #5]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800789c:	b292      	uxth	r2, r2
 800789e:	9202      	str	r2, [sp, #8]
 80078a0:	2200      	movs	r2, #0
 80078a2:	9201      	str	r2, [sp, #4]
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	4603      	mov	r3, r0
 80078a8:	2200      	movs	r2, #0
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f001 f8cc 	bl	8008a48 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80078b0:	e109      	b.n	8007ac6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f90c 	bl	8007ad0 <USBH_HandleEnum>
 80078b8:	4603      	mov	r3, r0
 80078ba:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f040 80f3 	bne.w	8007aac <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d103      	bne.n	80078e0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2208      	movs	r2, #8
 80078dc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80078de:	e0e5      	b.n	8007aac <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2207      	movs	r2, #7
 80078e4:	701a      	strb	r2, [r3, #0]
      break;
 80078e6:	e0e1      	b.n	8007aac <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	f000 80de 	beq.w	8007ab0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078fa:	2101      	movs	r1, #1
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2208      	movs	r2, #8
 8007904:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007906:	e0d3      	b.n	8007ab0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800790e:	b29b      	uxth	r3, r3
 8007910:	4619      	mov	r1, r3
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fc20 	bl	8008158 <USBH_SetCfg>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	f040 80ca 	bne.w	8007ab4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2209      	movs	r2, #9
 8007924:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007926:	e0c5      	b.n	8007ab4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800792e:	f003 0320 	and.w	r3, r3, #32
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00b      	beq.n	800794e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007936:	2101      	movs	r1, #1
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fc30 	bl	800819e <USBH_SetFeature>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	f040 80b9 	bne.w	8007ab8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	220a      	movs	r2, #10
 800794a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800794c:	e0b4      	b.n	8007ab8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	220a      	movs	r2, #10
 8007952:	701a      	strb	r2, [r3, #0]
      break;
 8007954:	e0b0      	b.n	8007ab8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 80ad 	beq.w	8007abc <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800796a:	2300      	movs	r3, #0
 800796c:	73fb      	strb	r3, [r7, #15]
 800796e:	e016      	b.n	800799e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007970:	7bfa      	ldrb	r2, [r7, #15]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	32de      	adds	r2, #222	; 0xde
 8007976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800797a:	791a      	ldrb	r2, [r3, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007982:	429a      	cmp	r2, r3
 8007984:	d108      	bne.n	8007998 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007986:	7bfa      	ldrb	r2, [r7, #15]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	32de      	adds	r2, #222	; 0xde
 800798c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007996:	e005      	b.n	80079a4 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007998:	7bfb      	ldrb	r3, [r7, #15]
 800799a:	3301      	adds	r3, #1
 800799c:	73fb      	strb	r3, [r7, #15]
 800799e:	7bfb      	ldrb	r3, [r7, #15]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d0e5      	beq.n	8007970 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d016      	beq.n	80079dc <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	4798      	blx	r3
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d109      	bne.n	80079d4 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2206      	movs	r2, #6
 80079c4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079cc:	2103      	movs	r1, #3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80079d2:	e073      	b.n	8007abc <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	220d      	movs	r2, #13
 80079d8:	701a      	strb	r2, [r3, #0]
      break;
 80079da:	e06f      	b.n	8007abc <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	220d      	movs	r2, #13
 80079e0:	701a      	strb	r2, [r3, #0]
      break;
 80079e2:	e06b      	b.n	8007abc <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d017      	beq.n	8007a1e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	4798      	blx	r3
 80079fa:	4603      	mov	r3, r0
 80079fc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d103      	bne.n	8007a0e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	220b      	movs	r2, #11
 8007a0a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a0c:	e058      	b.n	8007ac0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007a0e:	7bbb      	ldrb	r3, [r7, #14]
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d154      	bne.n	8007ac0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	220d      	movs	r2, #13
 8007a1a:	701a      	strb	r2, [r3, #0]
      break;
 8007a1c:	e050      	b.n	8007ac0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	220d      	movs	r2, #13
 8007a22:	701a      	strb	r2, [r3, #0]
      break;
 8007a24:	e04c      	b.n	8007ac0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d049      	beq.n	8007ac4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a36:	695b      	ldr	r3, [r3, #20]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	4798      	blx	r3
      }
      break;
 8007a3c:	e042      	b.n	8007ac4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7ff fd72 	bl	8007530 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d009      	beq.n	8007a6a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d005      	beq.n	8007a80 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a7a:	2105      	movs	r1, #5
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d107      	bne.n	8007a9c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f7ff fe2b 	bl	80076f0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a9a:	e014      	b.n	8007ac6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f001 f9b5 	bl	8008e0c <USBH_LL_Start>
      break;
 8007aa2:	e010      	b.n	8007ac6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007aa4:	bf00      	nop
 8007aa6:	e00e      	b.n	8007ac6 <USBH_Process+0x3b6>
      break;
 8007aa8:	bf00      	nop
 8007aaa:	e00c      	b.n	8007ac6 <USBH_Process+0x3b6>
      break;
 8007aac:	bf00      	nop
 8007aae:	e00a      	b.n	8007ac6 <USBH_Process+0x3b6>
    break;
 8007ab0:	bf00      	nop
 8007ab2:	e008      	b.n	8007ac6 <USBH_Process+0x3b6>
      break;
 8007ab4:	bf00      	nop
 8007ab6:	e006      	b.n	8007ac6 <USBH_Process+0x3b6>
      break;
 8007ab8:	bf00      	nop
 8007aba:	e004      	b.n	8007ac6 <USBH_Process+0x3b6>
      break;
 8007abc:	bf00      	nop
 8007abe:	e002      	b.n	8007ac6 <USBH_Process+0x3b6>
      break;
 8007ac0:	bf00      	nop
 8007ac2:	e000      	b.n	8007ac6 <USBH_Process+0x3b6>
      break;
 8007ac4:	bf00      	nop
  }
  return USBH_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af04      	add	r7, sp, #16
 8007ad6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007adc:	2301      	movs	r3, #1
 8007ade:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	785b      	ldrb	r3, [r3, #1]
 8007ae4:	2b07      	cmp	r3, #7
 8007ae6:	f200 81c1 	bhi.w	8007e6c <USBH_HandleEnum+0x39c>
 8007aea:	a201      	add	r2, pc, #4	; (adr r2, 8007af0 <USBH_HandleEnum+0x20>)
 8007aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af0:	08007b11 	.word	0x08007b11
 8007af4:	08007bcf 	.word	0x08007bcf
 8007af8:	08007c39 	.word	0x08007c39
 8007afc:	08007cc7 	.word	0x08007cc7
 8007b00:	08007d31 	.word	0x08007d31
 8007b04:	08007da1 	.word	0x08007da1
 8007b08:	08007de7 	.word	0x08007de7
 8007b0c:	08007e2d 	.word	0x08007e2d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007b10:	2108      	movs	r1, #8
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fa50 	bl	8007fb8 <USBH_Get_DevDesc>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b1c:	7bbb      	ldrb	r3, [r7, #14]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d130      	bne.n	8007b84 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	7919      	ldrb	r1, [r3, #4]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007b46:	b292      	uxth	r2, r2
 8007b48:	9202      	str	r2, [sp, #8]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	9201      	str	r2, [sp, #4]
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	4603      	mov	r3, r0
 8007b52:	2280      	movs	r2, #128	; 0x80
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 ff77 	bl	8008a48 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	7959      	ldrb	r1, [r3, #5]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b6e:	b292      	uxth	r2, r2
 8007b70:	9202      	str	r2, [sp, #8]
 8007b72:	2200      	movs	r2, #0
 8007b74:	9201      	str	r2, [sp, #4]
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 ff63 	bl	8008a48 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b82:	e175      	b.n	8007e70 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b84:	7bbb      	ldrb	r3, [r7, #14]
 8007b86:	2b03      	cmp	r3, #3
 8007b88:	f040 8172 	bne.w	8007e70 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b92:	3301      	adds	r3, #1
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	d903      	bls.n	8007bae <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	220d      	movs	r2, #13
 8007baa:	701a      	strb	r2, [r3, #0]
      break;
 8007bac:	e160      	b.n	8007e70 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	795b      	ldrb	r3, [r3, #5]
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 ff97 	bl	8008ae8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	791b      	ldrb	r3, [r3, #4]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 ff91 	bl	8008ae8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	701a      	strb	r2, [r3, #0]
      break;
 8007bcc:	e150      	b.n	8007e70 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007bce:	2112      	movs	r1, #18
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f9f1 	bl	8007fb8 <USBH_Get_DevDesc>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bda:	7bbb      	ldrb	r3, [r7, #14]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d103      	bne.n	8007be8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2202      	movs	r2, #2
 8007be4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007be6:	e145      	b.n	8007e74 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007be8:	7bbb      	ldrb	r3, [r7, #14]
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	f040 8142 	bne.w	8007e74 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c06:	2b03      	cmp	r3, #3
 8007c08:	d903      	bls.n	8007c12 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	220d      	movs	r2, #13
 8007c0e:	701a      	strb	r2, [r3, #0]
      break;
 8007c10:	e130      	b.n	8007e74 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	795b      	ldrb	r3, [r3, #5]
 8007c16:	4619      	mov	r1, r3
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 ff65 	bl	8008ae8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	791b      	ldrb	r3, [r3, #4]
 8007c22:	4619      	mov	r1, r3
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 ff5f 	bl	8008ae8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	701a      	strb	r2, [r3, #0]
      break;
 8007c36:	e11d      	b.n	8007e74 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007c38:	2101      	movs	r1, #1
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fa68 	bl	8008110 <USBH_SetAddress>
 8007c40:	4603      	mov	r3, r0
 8007c42:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c44:	7bbb      	ldrb	r3, [r7, #14]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d132      	bne.n	8007cb0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007c4a:	2002      	movs	r0, #2
 8007c4c:	f001 fa42 	bl	80090d4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2203      	movs	r2, #3
 8007c5c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	7919      	ldrb	r1, [r3, #4]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007c72:	b292      	uxth	r2, r2
 8007c74:	9202      	str	r2, [sp, #8]
 8007c76:	2200      	movs	r2, #0
 8007c78:	9201      	str	r2, [sp, #4]
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2280      	movs	r2, #128	; 0x80
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fee1 	bl	8008a48 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	7959      	ldrb	r1, [r3, #5]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c9a:	b292      	uxth	r2, r2
 8007c9c:	9202      	str	r2, [sp, #8]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	9201      	str	r2, [sp, #4]
 8007ca2:	9300      	str	r3, [sp, #0]
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 fecd 	bl	8008a48 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007cae:	e0e3      	b.n	8007e78 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cb0:	7bbb      	ldrb	r3, [r7, #14]
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	f040 80e0 	bne.w	8007e78 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	220d      	movs	r2, #13
 8007cbc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	705a      	strb	r2, [r3, #1]
      break;
 8007cc4:	e0d8      	b.n	8007e78 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007cc6:	2109      	movs	r1, #9
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 f99d 	bl	8008008 <USBH_Get_CfgDesc>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007cd2:	7bbb      	ldrb	r3, [r7, #14]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d103      	bne.n	8007ce0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2204      	movs	r2, #4
 8007cdc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007cde:	e0cd      	b.n	8007e7c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ce0:	7bbb      	ldrb	r3, [r7, #14]
 8007ce2:	2b03      	cmp	r3, #3
 8007ce4:	f040 80ca 	bne.w	8007e7c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007cee:	3301      	adds	r3, #1
 8007cf0:	b2da      	uxtb	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007cfe:	2b03      	cmp	r3, #3
 8007d00:	d903      	bls.n	8007d0a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	220d      	movs	r2, #13
 8007d06:	701a      	strb	r2, [r3, #0]
      break;
 8007d08:	e0b8      	b.n	8007e7c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	795b      	ldrb	r3, [r3, #5]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fee9 	bl	8008ae8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	791b      	ldrb	r3, [r3, #4]
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fee3 	bl	8008ae8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	701a      	strb	r2, [r3, #0]
      break;
 8007d2e:	e0a5      	b.n	8007e7c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007d36:	4619      	mov	r1, r3
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 f965 	bl	8008008 <USBH_Get_CfgDesc>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d42:	7bbb      	ldrb	r3, [r7, #14]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d103      	bne.n	8007d50 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2205      	movs	r2, #5
 8007d4c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007d4e:	e097      	b.n	8007e80 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d50:	7bbb      	ldrb	r3, [r7, #14]
 8007d52:	2b03      	cmp	r3, #3
 8007d54:	f040 8094 	bne.w	8007e80 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d5e:	3301      	adds	r3, #1
 8007d60:	b2da      	uxtb	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d6e:	2b03      	cmp	r3, #3
 8007d70:	d903      	bls.n	8007d7a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	220d      	movs	r2, #13
 8007d76:	701a      	strb	r2, [r3, #0]
      break;
 8007d78:	e082      	b.n	8007e80 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	795b      	ldrb	r3, [r3, #5]
 8007d7e:	4619      	mov	r1, r3
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 feb1 	bl	8008ae8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	791b      	ldrb	r3, [r3, #4]
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 feab 	bl	8008ae8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	701a      	strb	r2, [r3, #0]
      break;
 8007d9e:	e06f      	b.n	8007e80 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d019      	beq.n	8007dde <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007db6:	23ff      	movs	r3, #255	; 0xff
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f949 	bl	8008050 <USBH_Get_StringDesc>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007dc2:	7bbb      	ldrb	r3, [r7, #14]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d103      	bne.n	8007dd0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2206      	movs	r2, #6
 8007dcc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007dce:	e059      	b.n	8007e84 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dd0:	7bbb      	ldrb	r3, [r7, #14]
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	d156      	bne.n	8007e84 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2206      	movs	r2, #6
 8007dda:	705a      	strb	r2, [r3, #1]
      break;
 8007ddc:	e052      	b.n	8007e84 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2206      	movs	r2, #6
 8007de2:	705a      	strb	r2, [r3, #1]
      break;
 8007de4:	e04e      	b.n	8007e84 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d019      	beq.n	8007e24 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007dfc:	23ff      	movs	r3, #255	; 0xff
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f926 	bl	8008050 <USBH_Get_StringDesc>
 8007e04:	4603      	mov	r3, r0
 8007e06:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007e08:	7bbb      	ldrb	r3, [r7, #14]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d103      	bne.n	8007e16 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2207      	movs	r2, #7
 8007e12:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007e14:	e038      	b.n	8007e88 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e16:	7bbb      	ldrb	r3, [r7, #14]
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	d135      	bne.n	8007e88 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2207      	movs	r2, #7
 8007e20:	705a      	strb	r2, [r3, #1]
      break;
 8007e22:	e031      	b.n	8007e88 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2207      	movs	r2, #7
 8007e28:	705a      	strb	r2, [r3, #1]
      break;
 8007e2a:	e02d      	b.n	8007e88 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d017      	beq.n	8007e66 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007e42:	23ff      	movs	r3, #255	; 0xff
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f903 	bl	8008050 <USBH_Get_StringDesc>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007e4e:	7bbb      	ldrb	r3, [r7, #14]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d102      	bne.n	8007e5a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007e58:	e018      	b.n	8007e8c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e5a:	7bbb      	ldrb	r3, [r7, #14]
 8007e5c:	2b03      	cmp	r3, #3
 8007e5e:	d115      	bne.n	8007e8c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007e60:	2300      	movs	r3, #0
 8007e62:	73fb      	strb	r3, [r7, #15]
      break;
 8007e64:	e012      	b.n	8007e8c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007e66:	2300      	movs	r3, #0
 8007e68:	73fb      	strb	r3, [r7, #15]
      break;
 8007e6a:	e00f      	b.n	8007e8c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007e6c:	bf00      	nop
 8007e6e:	e00e      	b.n	8007e8e <USBH_HandleEnum+0x3be>
      break;
 8007e70:	bf00      	nop
 8007e72:	e00c      	b.n	8007e8e <USBH_HandleEnum+0x3be>
      break;
 8007e74:	bf00      	nop
 8007e76:	e00a      	b.n	8007e8e <USBH_HandleEnum+0x3be>
      break;
 8007e78:	bf00      	nop
 8007e7a:	e008      	b.n	8007e8e <USBH_HandleEnum+0x3be>
      break;
 8007e7c:	bf00      	nop
 8007e7e:	e006      	b.n	8007e8e <USBH_HandleEnum+0x3be>
      break;
 8007e80:	bf00      	nop
 8007e82:	e004      	b.n	8007e8e <USBH_HandleEnum+0x3be>
      break;
 8007e84:	bf00      	nop
 8007e86:	e002      	b.n	8007e8e <USBH_HandleEnum+0x3be>
      break;
 8007e88:	bf00      	nop
 8007e8a:	e000      	b.n	8007e8e <USBH_HandleEnum+0x3be>
      break;
 8007e8c:	bf00      	nop
  }
  return Status;
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007eaa:	bf00      	nop
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b082      	sub	sp, #8
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ec4:	1c5a      	adds	r2, r3, #1
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f804 	bl	8007eda <USBH_HandleSof>
}
 8007ed2:	bf00      	nop
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b082      	sub	sp, #8
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b0b      	cmp	r3, #11
 8007eea:	d10a      	bne.n	8007f02 <USBH_HandleSof+0x28>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d005      	beq.n	8007f02 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	4798      	blx	r3
  }
}
 8007f02:	bf00      	nop
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b083      	sub	sp, #12
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007f1a:	bf00      	nop
}
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b083      	sub	sp, #12
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007f36:	bf00      	nop
}
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b083      	sub	sp, #12
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 ff56 	bl	8008e42 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	791b      	ldrb	r3, [r3, #4]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 fda3 	bl	8008ae8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	795b      	ldrb	r3, [r3, #5]
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fd9d 	bl	8008ae8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b086      	sub	sp, #24
 8007fbc:	af02      	add	r7, sp, #8
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007fca:	78fb      	ldrb	r3, [r7, #3]
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f864 	bl	80080a6 <USBH_GetDescriptor>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	73fb      	strb	r3, [r7, #15]
 8007fe2:	7bfb      	ldrb	r3, [r7, #15]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10a      	bne.n	8007ffe <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ff4:	78fa      	ldrb	r2, [r7, #3]
 8007ff6:	b292      	uxth	r2, r2
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	f000 f918 	bl	800822e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008008:	b580      	push	{r7, lr}
 800800a:	b086      	sub	sp, #24
 800800c:	af02      	add	r7, sp, #8
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	460b      	mov	r3, r1
 8008012:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	331c      	adds	r3, #28
 8008018:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800801a:	887b      	ldrh	r3, [r7, #2]
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008024:	2100      	movs	r1, #0
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f83d 	bl	80080a6 <USBH_GetDescriptor>
 800802c:	4603      	mov	r3, r0
 800802e:	72fb      	strb	r3, [r7, #11]
 8008030:	7afb      	ldrb	r3, [r7, #11]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d107      	bne.n	8008046 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800803c:	887a      	ldrh	r2, [r7, #2]
 800803e:	68f9      	ldr	r1, [r7, #12]
 8008040:	4618      	mov	r0, r3
 8008042:	f000 f964 	bl	800830e <USBH_ParseCfgDesc>
  }

  return status;
 8008046:	7afb      	ldrb	r3, [r7, #11]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b088      	sub	sp, #32
 8008054:	af02      	add	r7, sp, #8
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	607a      	str	r2, [r7, #4]
 800805a:	461a      	mov	r2, r3
 800805c:	460b      	mov	r3, r1
 800805e:	72fb      	strb	r3, [r7, #11]
 8008060:	4613      	mov	r3, r2
 8008062:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008064:	7afb      	ldrb	r3, [r7, #11]
 8008066:	b29b      	uxth	r3, r3
 8008068:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800806c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008074:	893b      	ldrh	r3, [r7, #8]
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	460b      	mov	r3, r1
 800807a:	2100      	movs	r1, #0
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 f812 	bl	80080a6 <USBH_GetDescriptor>
 8008082:	4603      	mov	r3, r0
 8008084:	75fb      	strb	r3, [r7, #23]
 8008086:	7dfb      	ldrb	r3, [r7, #23]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d107      	bne.n	800809c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008092:	893a      	ldrh	r2, [r7, #8]
 8008094:	6879      	ldr	r1, [r7, #4]
 8008096:	4618      	mov	r0, r3
 8008098:	f000 fa37 	bl	800850a <USBH_ParseStringDesc>
  }

  return status;
 800809c:	7dfb      	ldrb	r3, [r7, #23]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3718      	adds	r7, #24
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	60f8      	str	r0, [r7, #12]
 80080ae:	607b      	str	r3, [r7, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	72fb      	strb	r3, [r7, #11]
 80080b4:	4613      	mov	r3, r2
 80080b6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	789b      	ldrb	r3, [r3, #2]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d11c      	bne.n	80080fa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80080c0:	7afb      	ldrb	r3, [r7, #11]
 80080c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2206      	movs	r2, #6
 80080d0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	893a      	ldrh	r2, [r7, #8]
 80080d6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80080d8:	893b      	ldrh	r3, [r7, #8]
 80080da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80080de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080e2:	d104      	bne.n	80080ee <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f240 4209 	movw	r2, #1033	; 0x409
 80080ea:	829a      	strh	r2, [r3, #20]
 80080ec:	e002      	b.n	80080f4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2200      	movs	r2, #0
 80080f2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	8b3a      	ldrh	r2, [r7, #24]
 80080f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80080fa:	8b3b      	ldrh	r3, [r7, #24]
 80080fc:	461a      	mov	r2, r3
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 fa50 	bl	80085a6 <USBH_CtlReq>
 8008106:	4603      	mov	r3, r0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	460b      	mov	r3, r1
 800811a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	789b      	ldrb	r3, [r3, #2]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d10f      	bne.n	8008144 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2205      	movs	r2, #5
 800812e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008130:	78fb      	ldrb	r3, [r7, #3]
 8008132:	b29a      	uxth	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008144:	2200      	movs	r2, #0
 8008146:	2100      	movs	r1, #0
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fa2c 	bl	80085a6 <USBH_CtlReq>
 800814e:	4603      	mov	r3, r0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	460b      	mov	r3, r1
 8008162:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	789b      	ldrb	r3, [r3, #2]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d10e      	bne.n	800818a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2209      	movs	r2, #9
 8008176:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	887a      	ldrh	r2, [r7, #2]
 800817c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800818a:	2200      	movs	r2, #0
 800818c:	2100      	movs	r1, #0
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fa09 	bl	80085a6 <USBH_CtlReq>
 8008194:	4603      	mov	r3, r0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b082      	sub	sp, #8
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	460b      	mov	r3, r1
 80081a8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	789b      	ldrb	r3, [r3, #2]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d10f      	bne.n	80081d2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2203      	movs	r2, #3
 80081bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80081be:	78fb      	ldrb	r3, [r7, #3]
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80081d2:	2200      	movs	r2, #0
 80081d4:	2100      	movs	r1, #0
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 f9e5 	bl	80085a6 <USBH_CtlReq>
 80081dc:	4603      	mov	r3, r0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3708      	adds	r7, #8
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b082      	sub	sp, #8
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	460b      	mov	r3, r1
 80081f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	789b      	ldrb	r3, [r3, #2]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d10f      	bne.n	800821a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2202      	movs	r2, #2
 80081fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800820c:	78fb      	ldrb	r3, [r7, #3]
 800820e:	b29a      	uxth	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800821a:	2200      	movs	r2, #0
 800821c:	2100      	movs	r1, #0
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f9c1 	bl	80085a6 <USBH_CtlReq>
 8008224:	4603      	mov	r3, r0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800822e:	b480      	push	{r7}
 8008230:	b085      	sub	sp, #20
 8008232:	af00      	add	r7, sp, #0
 8008234:	60f8      	str	r0, [r7, #12]
 8008236:	60b9      	str	r1, [r7, #8]
 8008238:	4613      	mov	r3, r2
 800823a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	781a      	ldrb	r2, [r3, #0]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	785a      	ldrb	r2, [r3, #1]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	3302      	adds	r3, #2
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	b29a      	uxth	r2, r3
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	3303      	adds	r3, #3
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	b29b      	uxth	r3, r3
 800825c:	021b      	lsls	r3, r3, #8
 800825e:	b29b      	uxth	r3, r3
 8008260:	4313      	orrs	r3, r2
 8008262:	b29a      	uxth	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	791a      	ldrb	r2, [r3, #4]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	795a      	ldrb	r2, [r3, #5]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	799a      	ldrb	r2, [r3, #6]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	79da      	ldrb	r2, [r3, #7]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008288:	88fb      	ldrh	r3, [r7, #6]
 800828a:	2b08      	cmp	r3, #8
 800828c:	d939      	bls.n	8008302 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	3308      	adds	r3, #8
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	b29a      	uxth	r2, r3
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	3309      	adds	r3, #9
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	b29b      	uxth	r3, r3
 800829e:	021b      	lsls	r3, r3, #8
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	4313      	orrs	r3, r2
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	330a      	adds	r3, #10
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	330b      	adds	r3, #11
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	021b      	lsls	r3, r3, #8
 80082bc:	b29b      	uxth	r3, r3
 80082be:	4313      	orrs	r3, r2
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	330c      	adds	r3, #12
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	330d      	adds	r3, #13
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	021b      	lsls	r3, r3, #8
 80082d8:	b29b      	uxth	r3, r3
 80082da:	4313      	orrs	r3, r2
 80082dc:	b29a      	uxth	r2, r3
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	7b9a      	ldrb	r2, [r3, #14]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	7bda      	ldrb	r2, [r3, #15]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	7c1a      	ldrb	r2, [r3, #16]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	7c5a      	ldrb	r2, [r3, #17]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	745a      	strb	r2, [r3, #17]
  }
}
 8008302:	bf00      	nop
 8008304:	3714      	adds	r7, #20
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b08a      	sub	sp, #40	; 0x28
 8008312:	af00      	add	r7, sp, #0
 8008314:	60f8      	str	r0, [r7, #12]
 8008316:	60b9      	str	r1, [r7, #8]
 8008318:	4613      	mov	r3, r2
 800831a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008320:	2300      	movs	r3, #0
 8008322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008326:	2300      	movs	r3, #0
 8008328:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	781a      	ldrb	r2, [r3, #0]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	785a      	ldrb	r2, [r3, #1]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	3302      	adds	r3, #2
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	b29a      	uxth	r2, r3
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	3303      	adds	r3, #3
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	b29b      	uxth	r3, r3
 8008350:	021b      	lsls	r3, r3, #8
 8008352:	b29b      	uxth	r3, r3
 8008354:	4313      	orrs	r3, r2
 8008356:	b29a      	uxth	r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	791a      	ldrb	r2, [r3, #4]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	795a      	ldrb	r2, [r3, #5]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	799a      	ldrb	r2, [r3, #6]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	79da      	ldrb	r2, [r3, #7]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	7a1a      	ldrb	r2, [r3, #8]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008384:	88fb      	ldrh	r3, [r7, #6]
 8008386:	2b09      	cmp	r3, #9
 8008388:	d95f      	bls.n	800844a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800838a:	2309      	movs	r3, #9
 800838c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800838e:	2300      	movs	r3, #0
 8008390:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008392:	e051      	b.n	8008438 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008394:	f107 0316 	add.w	r3, r7, #22
 8008398:	4619      	mov	r1, r3
 800839a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800839c:	f000 f8e8 	bl	8008570 <USBH_GetNextDesc>
 80083a0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80083a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a4:	785b      	ldrb	r3, [r3, #1]
 80083a6:	2b04      	cmp	r3, #4
 80083a8:	d146      	bne.n	8008438 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80083aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083ae:	221a      	movs	r2, #26
 80083b0:	fb02 f303 	mul.w	r3, r2, r3
 80083b4:	3308      	adds	r3, #8
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	4413      	add	r3, r2
 80083ba:	3302      	adds	r3, #2
 80083bc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80083be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083c0:	69f8      	ldr	r0, [r7, #28]
 80083c2:	f000 f846 	bl	8008452 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80083c6:	2300      	movs	r3, #0
 80083c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80083cc:	2300      	movs	r3, #0
 80083ce:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80083d0:	e022      	b.n	8008418 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80083d2:	f107 0316 	add.w	r3, r7, #22
 80083d6:	4619      	mov	r1, r3
 80083d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083da:	f000 f8c9 	bl	8008570 <USBH_GetNextDesc>
 80083de:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80083e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e2:	785b      	ldrb	r3, [r3, #1]
 80083e4:	2b05      	cmp	r3, #5
 80083e6:	d117      	bne.n	8008418 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80083e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083ec:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80083f0:	3201      	adds	r2, #1
 80083f2:	00d2      	lsls	r2, r2, #3
 80083f4:	211a      	movs	r1, #26
 80083f6:	fb01 f303 	mul.w	r3, r1, r3
 80083fa:	4413      	add	r3, r2
 80083fc:	3308      	adds	r3, #8
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	4413      	add	r3, r2
 8008402:	3304      	adds	r3, #4
 8008404:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008406:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008408:	69b8      	ldr	r0, [r7, #24]
 800840a:	f000 f851 	bl	80084b0 <USBH_ParseEPDesc>
            ep_ix++;
 800840e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008412:	3301      	adds	r3, #1
 8008414:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	791b      	ldrb	r3, [r3, #4]
 800841c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008420:	429a      	cmp	r2, r3
 8008422:	d204      	bcs.n	800842e <USBH_ParseCfgDesc+0x120>
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	885a      	ldrh	r2, [r3, #2]
 8008428:	8afb      	ldrh	r3, [r7, #22]
 800842a:	429a      	cmp	r2, r3
 800842c:	d8d1      	bhi.n	80083d2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800842e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008432:	3301      	adds	r3, #1
 8008434:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008438:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800843c:	2b01      	cmp	r3, #1
 800843e:	d804      	bhi.n	800844a <USBH_ParseCfgDesc+0x13c>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	885a      	ldrh	r2, [r3, #2]
 8008444:	8afb      	ldrh	r3, [r7, #22]
 8008446:	429a      	cmp	r2, r3
 8008448:	d8a4      	bhi.n	8008394 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800844a:	bf00      	nop
 800844c:	3728      	adds	r7, #40	; 0x28
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008452:	b480      	push	{r7}
 8008454:	b083      	sub	sp, #12
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	781a      	ldrb	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	785a      	ldrb	r2, [r3, #1]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	789a      	ldrb	r2, [r3, #2]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	78da      	ldrb	r2, [r3, #3]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	791a      	ldrb	r2, [r3, #4]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	795a      	ldrb	r2, [r3, #5]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	799a      	ldrb	r2, [r3, #6]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	79da      	ldrb	r2, [r3, #7]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	7a1a      	ldrb	r2, [r3, #8]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	721a      	strb	r2, [r3, #8]
}
 80084a4:	bf00      	nop
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	781a      	ldrb	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	785a      	ldrb	r2, [r3, #1]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	789a      	ldrb	r2, [r3, #2]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	78da      	ldrb	r2, [r3, #3]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	3304      	adds	r3, #4
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	3305      	adds	r3, #5
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	021b      	lsls	r3, r3, #8
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	4313      	orrs	r3, r2
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	799a      	ldrb	r2, [r3, #6]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	719a      	strb	r2, [r3, #6]
}
 80084fe:	bf00      	nop
 8008500:	370c      	adds	r7, #12
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800850a:	b480      	push	{r7}
 800850c:	b087      	sub	sp, #28
 800850e:	af00      	add	r7, sp, #0
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	4613      	mov	r3, r2
 8008516:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	3301      	adds	r3, #1
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	2b03      	cmp	r3, #3
 8008520:	d120      	bne.n	8008564 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	1e9a      	subs	r2, r3, #2
 8008528:	88fb      	ldrh	r3, [r7, #6]
 800852a:	4293      	cmp	r3, r2
 800852c:	bf28      	it	cs
 800852e:	4613      	movcs	r3, r2
 8008530:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	3302      	adds	r3, #2
 8008536:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008538:	2300      	movs	r3, #0
 800853a:	82fb      	strh	r3, [r7, #22]
 800853c:	e00b      	b.n	8008556 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800853e:	8afb      	ldrh	r3, [r7, #22]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	4413      	add	r3, r2
 8008544:	781a      	ldrb	r2, [r3, #0]
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	701a      	strb	r2, [r3, #0]
      pdest++;
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	3301      	adds	r3, #1
 800854e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008550:	8afb      	ldrh	r3, [r7, #22]
 8008552:	3302      	adds	r3, #2
 8008554:	82fb      	strh	r3, [r7, #22]
 8008556:	8afa      	ldrh	r2, [r7, #22]
 8008558:	8abb      	ldrh	r3, [r7, #20]
 800855a:	429a      	cmp	r2, r3
 800855c:	d3ef      	bcc.n	800853e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	2200      	movs	r2, #0
 8008562:	701a      	strb	r2, [r3, #0]
  }
}
 8008564:	bf00      	nop
 8008566:	371c      	adds	r7, #28
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	881a      	ldrh	r2, [r3, #0]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	b29b      	uxth	r3, r3
 8008584:	4413      	add	r3, r2
 8008586:	b29a      	uxth	r2, r3
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4413      	add	r3, r2
 8008596:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008598:	68fb      	ldr	r3, [r7, #12]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3714      	adds	r7, #20
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b086      	sub	sp, #24
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	60f8      	str	r0, [r7, #12]
 80085ae:	60b9      	str	r1, [r7, #8]
 80085b0:	4613      	mov	r3, r2
 80085b2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80085b4:	2301      	movs	r3, #1
 80085b6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	789b      	ldrb	r3, [r3, #2]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d002      	beq.n	80085c6 <USBH_CtlReq+0x20>
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d00f      	beq.n	80085e4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80085c4:	e027      	b.n	8008616 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	88fa      	ldrh	r2, [r7, #6]
 80085d0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2201      	movs	r2, #1
 80085d6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2202      	movs	r2, #2
 80085dc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80085de:	2301      	movs	r3, #1
 80085e0:	75fb      	strb	r3, [r7, #23]
      break;
 80085e2:	e018      	b.n	8008616 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f000 f81b 	bl	8008620 <USBH_HandleControl>
 80085ea:	4603      	mov	r3, r0
 80085ec:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80085ee:	7dfb      	ldrb	r3, [r7, #23]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d002      	beq.n	80085fa <USBH_CtlReq+0x54>
 80085f4:	7dfb      	ldrb	r3, [r7, #23]
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d106      	bne.n	8008608 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2201      	movs	r2, #1
 80085fe:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	761a      	strb	r2, [r3, #24]
      break;
 8008606:	e005      	b.n	8008614 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008608:	7dfb      	ldrb	r3, [r7, #23]
 800860a:	2b02      	cmp	r3, #2
 800860c:	d102      	bne.n	8008614 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2201      	movs	r2, #1
 8008612:	709a      	strb	r2, [r3, #2]
      break;
 8008614:	bf00      	nop
  }
  return status;
 8008616:	7dfb      	ldrb	r3, [r7, #23]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3718      	adds	r7, #24
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af02      	add	r7, sp, #8
 8008626:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008628:	2301      	movs	r3, #1
 800862a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800862c:	2300      	movs	r3, #0
 800862e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	7e1b      	ldrb	r3, [r3, #24]
 8008634:	3b01      	subs	r3, #1
 8008636:	2b0a      	cmp	r3, #10
 8008638:	f200 8156 	bhi.w	80088e8 <USBH_HandleControl+0x2c8>
 800863c:	a201      	add	r2, pc, #4	; (adr r2, 8008644 <USBH_HandleControl+0x24>)
 800863e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008642:	bf00      	nop
 8008644:	08008671 	.word	0x08008671
 8008648:	0800868b 	.word	0x0800868b
 800864c:	080086f5 	.word	0x080086f5
 8008650:	0800871b 	.word	0x0800871b
 8008654:	08008753 	.word	0x08008753
 8008658:	0800877d 	.word	0x0800877d
 800865c:	080087cf 	.word	0x080087cf
 8008660:	080087f1 	.word	0x080087f1
 8008664:	0800882d 	.word	0x0800882d
 8008668:	08008853 	.word	0x08008853
 800866c:	08008891 	.word	0x08008891
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f103 0110 	add.w	r1, r3, #16
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	795b      	ldrb	r3, [r3, #5]
 800867a:	461a      	mov	r2, r3
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f943 	bl	8008908 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2202      	movs	r2, #2
 8008686:	761a      	strb	r2, [r3, #24]
      break;
 8008688:	e139      	b.n	80088fe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	795b      	ldrb	r3, [r3, #5]
 800868e:	4619      	mov	r1, r3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fcc5 	bl	8009020 <USBH_LL_GetURBState>
 8008696:	4603      	mov	r3, r0
 8008698:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800869a:	7bbb      	ldrb	r3, [r7, #14]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d11e      	bne.n	80086de <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	7c1b      	ldrb	r3, [r3, #16]
 80086a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80086a8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	8adb      	ldrh	r3, [r3, #22]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00a      	beq.n	80086c8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80086b2:	7b7b      	ldrb	r3, [r7, #13]
 80086b4:	2b80      	cmp	r3, #128	; 0x80
 80086b6:	d103      	bne.n	80086c0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2203      	movs	r2, #3
 80086bc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80086be:	e115      	b.n	80088ec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2205      	movs	r2, #5
 80086c4:	761a      	strb	r2, [r3, #24]
      break;
 80086c6:	e111      	b.n	80088ec <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80086c8:	7b7b      	ldrb	r3, [r7, #13]
 80086ca:	2b80      	cmp	r3, #128	; 0x80
 80086cc:	d103      	bne.n	80086d6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2209      	movs	r2, #9
 80086d2:	761a      	strb	r2, [r3, #24]
      break;
 80086d4:	e10a      	b.n	80088ec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2207      	movs	r2, #7
 80086da:	761a      	strb	r2, [r3, #24]
      break;
 80086dc:	e106      	b.n	80088ec <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	2b04      	cmp	r3, #4
 80086e2:	d003      	beq.n	80086ec <USBH_HandleControl+0xcc>
 80086e4:	7bbb      	ldrb	r3, [r7, #14]
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	f040 8100 	bne.w	80088ec <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	220b      	movs	r2, #11
 80086f0:	761a      	strb	r2, [r3, #24]
      break;
 80086f2:	e0fb      	b.n	80088ec <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6899      	ldr	r1, [r3, #8]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	899a      	ldrh	r2, [r3, #12]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	791b      	ldrb	r3, [r3, #4]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 f93a 	bl	8008986 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2204      	movs	r2, #4
 8008716:	761a      	strb	r2, [r3, #24]
      break;
 8008718:	e0f1      	b.n	80088fe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	791b      	ldrb	r3, [r3, #4]
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fc7d 	bl	8009020 <USBH_LL_GetURBState>
 8008726:	4603      	mov	r3, r0
 8008728:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800872a:	7bbb      	ldrb	r3, [r7, #14]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d102      	bne.n	8008736 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2209      	movs	r2, #9
 8008734:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008736:	7bbb      	ldrb	r3, [r7, #14]
 8008738:	2b05      	cmp	r3, #5
 800873a:	d102      	bne.n	8008742 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800873c:	2303      	movs	r3, #3
 800873e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008740:	e0d6      	b.n	80088f0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008742:	7bbb      	ldrb	r3, [r7, #14]
 8008744:	2b04      	cmp	r3, #4
 8008746:	f040 80d3 	bne.w	80088f0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	220b      	movs	r2, #11
 800874e:	761a      	strb	r2, [r3, #24]
      break;
 8008750:	e0ce      	b.n	80088f0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6899      	ldr	r1, [r3, #8]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	899a      	ldrh	r2, [r3, #12]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	795b      	ldrb	r3, [r3, #5]
 800875e:	2001      	movs	r0, #1
 8008760:	9000      	str	r0, [sp, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f8ea 	bl	800893c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800876e:	b29a      	uxth	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2206      	movs	r2, #6
 8008778:	761a      	strb	r2, [r3, #24]
      break;
 800877a:	e0c0      	b.n	80088fe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	795b      	ldrb	r3, [r3, #5]
 8008780:	4619      	mov	r1, r3
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fc4c 	bl	8009020 <USBH_LL_GetURBState>
 8008788:	4603      	mov	r3, r0
 800878a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800878c:	7bbb      	ldrb	r3, [r7, #14]
 800878e:	2b01      	cmp	r3, #1
 8008790:	d103      	bne.n	800879a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2207      	movs	r2, #7
 8008796:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008798:	e0ac      	b.n	80088f4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800879a:	7bbb      	ldrb	r3, [r7, #14]
 800879c:	2b05      	cmp	r3, #5
 800879e:	d105      	bne.n	80087ac <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	220c      	movs	r2, #12
 80087a4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80087a6:	2303      	movs	r3, #3
 80087a8:	73fb      	strb	r3, [r7, #15]
      break;
 80087aa:	e0a3      	b.n	80088f4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80087ac:	7bbb      	ldrb	r3, [r7, #14]
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d103      	bne.n	80087ba <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2205      	movs	r2, #5
 80087b6:	761a      	strb	r2, [r3, #24]
      break;
 80087b8:	e09c      	b.n	80088f4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80087ba:	7bbb      	ldrb	r3, [r7, #14]
 80087bc:	2b04      	cmp	r3, #4
 80087be:	f040 8099 	bne.w	80088f4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	220b      	movs	r2, #11
 80087c6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80087c8:	2302      	movs	r3, #2
 80087ca:	73fb      	strb	r3, [r7, #15]
      break;
 80087cc:	e092      	b.n	80088f4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	791b      	ldrb	r3, [r3, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	2100      	movs	r1, #0
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f8d5 	bl	8008986 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2208      	movs	r2, #8
 80087ec:	761a      	strb	r2, [r3, #24]

      break;
 80087ee:	e086      	b.n	80088fe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	791b      	ldrb	r3, [r3, #4]
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fc12 	bl	8009020 <USBH_LL_GetURBState>
 80087fc:	4603      	mov	r3, r0
 80087fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008800:	7bbb      	ldrb	r3, [r7, #14]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d105      	bne.n	8008812 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	220d      	movs	r2, #13
 800880a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800880c:	2300      	movs	r3, #0
 800880e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008810:	e072      	b.n	80088f8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008812:	7bbb      	ldrb	r3, [r7, #14]
 8008814:	2b04      	cmp	r3, #4
 8008816:	d103      	bne.n	8008820 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	220b      	movs	r2, #11
 800881c:	761a      	strb	r2, [r3, #24]
      break;
 800881e:	e06b      	b.n	80088f8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	2b05      	cmp	r3, #5
 8008824:	d168      	bne.n	80088f8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008826:	2303      	movs	r3, #3
 8008828:	73fb      	strb	r3, [r7, #15]
      break;
 800882a:	e065      	b.n	80088f8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	795b      	ldrb	r3, [r3, #5]
 8008830:	2201      	movs	r2, #1
 8008832:	9200      	str	r2, [sp, #0]
 8008834:	2200      	movs	r2, #0
 8008836:	2100      	movs	r1, #0
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 f87f 	bl	800893c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008844:	b29a      	uxth	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	220a      	movs	r2, #10
 800884e:	761a      	strb	r2, [r3, #24]
      break;
 8008850:	e055      	b.n	80088fe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	795b      	ldrb	r3, [r3, #5]
 8008856:	4619      	mov	r1, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fbe1 	bl	8009020 <USBH_LL_GetURBState>
 800885e:	4603      	mov	r3, r0
 8008860:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008862:	7bbb      	ldrb	r3, [r7, #14]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d105      	bne.n	8008874 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008868:	2300      	movs	r3, #0
 800886a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	220d      	movs	r2, #13
 8008870:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008872:	e043      	b.n	80088fc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008874:	7bbb      	ldrb	r3, [r7, #14]
 8008876:	2b02      	cmp	r3, #2
 8008878:	d103      	bne.n	8008882 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2209      	movs	r2, #9
 800887e:	761a      	strb	r2, [r3, #24]
      break;
 8008880:	e03c      	b.n	80088fc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008882:	7bbb      	ldrb	r3, [r7, #14]
 8008884:	2b04      	cmp	r3, #4
 8008886:	d139      	bne.n	80088fc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	220b      	movs	r2, #11
 800888c:	761a      	strb	r2, [r3, #24]
      break;
 800888e:	e035      	b.n	80088fc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	7e5b      	ldrb	r3, [r3, #25]
 8008894:	3301      	adds	r3, #1
 8008896:	b2da      	uxtb	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	765a      	strb	r2, [r3, #25]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	7e5b      	ldrb	r3, [r3, #25]
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d806      	bhi.n	80088b2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80088b0:	e025      	b.n	80088fe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80088b8:	2106      	movs	r1, #6
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	795b      	ldrb	r3, [r3, #5]
 80088c8:	4619      	mov	r1, r3
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f90c 	bl	8008ae8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	791b      	ldrb	r3, [r3, #4]
 80088d4:	4619      	mov	r1, r3
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f906 	bl	8008ae8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80088e2:	2302      	movs	r3, #2
 80088e4:	73fb      	strb	r3, [r7, #15]
      break;
 80088e6:	e00a      	b.n	80088fe <USBH_HandleControl+0x2de>

    default:
      break;
 80088e8:	bf00      	nop
 80088ea:	e008      	b.n	80088fe <USBH_HandleControl+0x2de>
      break;
 80088ec:	bf00      	nop
 80088ee:	e006      	b.n	80088fe <USBH_HandleControl+0x2de>
      break;
 80088f0:	bf00      	nop
 80088f2:	e004      	b.n	80088fe <USBH_HandleControl+0x2de>
      break;
 80088f4:	bf00      	nop
 80088f6:	e002      	b.n	80088fe <USBH_HandleControl+0x2de>
      break;
 80088f8:	bf00      	nop
 80088fa:	e000      	b.n	80088fe <USBH_HandleControl+0x2de>
      break;
 80088fc:	bf00      	nop
  }

  return status;
 80088fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b088      	sub	sp, #32
 800890c:	af04      	add	r7, sp, #16
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	4613      	mov	r3, r2
 8008914:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008916:	79f9      	ldrb	r1, [r7, #7]
 8008918:	2300      	movs	r3, #0
 800891a:	9303      	str	r3, [sp, #12]
 800891c:	2308      	movs	r3, #8
 800891e:	9302      	str	r3, [sp, #8]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	9301      	str	r3, [sp, #4]
 8008924:	2300      	movs	r3, #0
 8008926:	9300      	str	r3, [sp, #0]
 8008928:	2300      	movs	r3, #0
 800892a:	2200      	movs	r2, #0
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f000 fb46 	bl	8008fbe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b088      	sub	sp, #32
 8008940:	af04      	add	r7, sp, #16
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	4611      	mov	r1, r2
 8008948:	461a      	mov	r2, r3
 800894a:	460b      	mov	r3, r1
 800894c:	80fb      	strh	r3, [r7, #6]
 800894e:	4613      	mov	r3, r2
 8008950:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800895c:	2300      	movs	r3, #0
 800895e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008960:	7979      	ldrb	r1, [r7, #5]
 8008962:	7e3b      	ldrb	r3, [r7, #24]
 8008964:	9303      	str	r3, [sp, #12]
 8008966:	88fb      	ldrh	r3, [r7, #6]
 8008968:	9302      	str	r3, [sp, #8]
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	9301      	str	r3, [sp, #4]
 800896e:	2301      	movs	r3, #1
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	2300      	movs	r3, #0
 8008974:	2200      	movs	r2, #0
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f000 fb21 	bl	8008fbe <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b088      	sub	sp, #32
 800898a:	af04      	add	r7, sp, #16
 800898c:	60f8      	str	r0, [r7, #12]
 800898e:	60b9      	str	r1, [r7, #8]
 8008990:	4611      	mov	r1, r2
 8008992:	461a      	mov	r2, r3
 8008994:	460b      	mov	r3, r1
 8008996:	80fb      	strh	r3, [r7, #6]
 8008998:	4613      	mov	r3, r2
 800899a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800899c:	7979      	ldrb	r1, [r7, #5]
 800899e:	2300      	movs	r3, #0
 80089a0:	9303      	str	r3, [sp, #12]
 80089a2:	88fb      	ldrh	r3, [r7, #6]
 80089a4:	9302      	str	r3, [sp, #8]
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	9301      	str	r3, [sp, #4]
 80089aa:	2301      	movs	r3, #1
 80089ac:	9300      	str	r3, [sp, #0]
 80089ae:	2300      	movs	r3, #0
 80089b0:	2201      	movs	r2, #1
 80089b2:	68f8      	ldr	r0, [r7, #12]
 80089b4:	f000 fb03 	bl	8008fbe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80089b8:	2300      	movs	r3, #0

}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b088      	sub	sp, #32
 80089c6:	af04      	add	r7, sp, #16
 80089c8:	60f8      	str	r0, [r7, #12]
 80089ca:	60b9      	str	r1, [r7, #8]
 80089cc:	4611      	mov	r1, r2
 80089ce:	461a      	mov	r2, r3
 80089d0:	460b      	mov	r3, r1
 80089d2:	80fb      	strh	r3, [r7, #6]
 80089d4:	4613      	mov	r3, r2
 80089d6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d001      	beq.n	80089e6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80089e2:	2300      	movs	r3, #0
 80089e4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80089e6:	7979      	ldrb	r1, [r7, #5]
 80089e8:	7e3b      	ldrb	r3, [r7, #24]
 80089ea:	9303      	str	r3, [sp, #12]
 80089ec:	88fb      	ldrh	r3, [r7, #6]
 80089ee:	9302      	str	r3, [sp, #8]
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	9301      	str	r3, [sp, #4]
 80089f4:	2301      	movs	r3, #1
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	2302      	movs	r3, #2
 80089fa:	2200      	movs	r2, #0
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f000 fade 	bl	8008fbe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b088      	sub	sp, #32
 8008a10:	af04      	add	r7, sp, #16
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	4611      	mov	r1, r2
 8008a18:	461a      	mov	r2, r3
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	80fb      	strh	r3, [r7, #6]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008a22:	7979      	ldrb	r1, [r7, #5]
 8008a24:	2300      	movs	r3, #0
 8008a26:	9303      	str	r3, [sp, #12]
 8008a28:	88fb      	ldrh	r3, [r7, #6]
 8008a2a:	9302      	str	r3, [sp, #8]
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	9301      	str	r3, [sp, #4]
 8008a30:	2301      	movs	r3, #1
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	2302      	movs	r3, #2
 8008a36:	2201      	movs	r2, #1
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f000 fac0 	bl	8008fbe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af04      	add	r7, sp, #16
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	4608      	mov	r0, r1
 8008a52:	4611      	mov	r1, r2
 8008a54:	461a      	mov	r2, r3
 8008a56:	4603      	mov	r3, r0
 8008a58:	70fb      	strb	r3, [r7, #3]
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	70bb      	strb	r3, [r7, #2]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008a62:	7878      	ldrb	r0, [r7, #1]
 8008a64:	78ba      	ldrb	r2, [r7, #2]
 8008a66:	78f9      	ldrb	r1, [r7, #3]
 8008a68:	8b3b      	ldrh	r3, [r7, #24]
 8008a6a:	9302      	str	r3, [sp, #8]
 8008a6c:	7d3b      	ldrb	r3, [r7, #20]
 8008a6e:	9301      	str	r3, [sp, #4]
 8008a70:	7c3b      	ldrb	r3, [r7, #16]
 8008a72:	9300      	str	r3, [sp, #0]
 8008a74:	4603      	mov	r3, r0
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fa53 	bl	8008f22 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b082      	sub	sp, #8
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	460b      	mov	r3, r1
 8008a90:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008a92:	78fb      	ldrb	r3, [r7, #3]
 8008a94:	4619      	mov	r1, r3
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fa72 	bl	8008f80 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3708      	adds	r7, #8
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b084      	sub	sp, #16
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
 8008aae:	460b      	mov	r3, r1
 8008ab0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f836 	bl	8008b24 <USBH_GetFreePipe>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008abc:	89fb      	ldrh	r3, [r7, #14]
 8008abe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d00a      	beq.n	8008adc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008ac6:	78fa      	ldrb	r2, [r7, #3]
 8008ac8:	89fb      	ldrh	r3, [r7, #14]
 8008aca:	f003 030f 	and.w	r3, r3, #15
 8008ace:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ad2:	6879      	ldr	r1, [r7, #4]
 8008ad4:	33e0      	adds	r3, #224	; 0xe0
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	440b      	add	r3, r1
 8008ada:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008adc:	89fb      	ldrh	r3, [r7, #14]
 8008ade:	b2db      	uxtb	r3, r3
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	460b      	mov	r3, r1
 8008af2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008af4:	78fb      	ldrb	r3, [r7, #3]
 8008af6:	2b0a      	cmp	r3, #10
 8008af8:	d80d      	bhi.n	8008b16 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008afa:	78fb      	ldrb	r3, [r7, #3]
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	33e0      	adds	r3, #224	; 0xe0
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	4413      	add	r3, r2
 8008b04:	685a      	ldr	r2, [r3, #4]
 8008b06:	78fb      	ldrb	r3, [r7, #3]
 8008b08:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008b0c:	6879      	ldr	r1, [r7, #4]
 8008b0e:	33e0      	adds	r3, #224	; 0xe0
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	440b      	add	r3, r1
 8008b14:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b085      	sub	sp, #20
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008b30:	2300      	movs	r3, #0
 8008b32:	73fb      	strb	r3, [r7, #15]
 8008b34:	e00f      	b.n	8008b56 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	33e0      	adds	r3, #224	; 0xe0
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	4413      	add	r3, r2
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d102      	bne.n	8008b50 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008b4a:	7bfb      	ldrb	r3, [r7, #15]
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	e007      	b.n	8008b60 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008b50:	7bfb      	ldrb	r3, [r7, #15]
 8008b52:	3301      	adds	r3, #1
 8008b54:	73fb      	strb	r3, [r7, #15]
 8008b56:	7bfb      	ldrb	r3, [r7, #15]
 8008b58:	2b0a      	cmp	r3, #10
 8008b5a:	d9ec      	bls.n	8008b36 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008b5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008b70:	2201      	movs	r2, #1
 8008b72:	490e      	ldr	r1, [pc, #56]	; (8008bac <MX_USB_HOST_Init+0x40>)
 8008b74:	480e      	ldr	r0, [pc, #56]	; (8008bb0 <MX_USB_HOST_Init+0x44>)
 8008b76:	f7fe fca1 	bl	80074bc <USBH_Init>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008b80:	f7f8 fc36 	bl	80013f0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008b84:	490b      	ldr	r1, [pc, #44]	; (8008bb4 <MX_USB_HOST_Init+0x48>)
 8008b86:	480a      	ldr	r0, [pc, #40]	; (8008bb0 <MX_USB_HOST_Init+0x44>)
 8008b88:	f7fe fd26 	bl	80075d8 <USBH_RegisterClass>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d001      	beq.n	8008b96 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008b92:	f7f8 fc2d 	bl	80013f0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008b96:	4806      	ldr	r0, [pc, #24]	; (8008bb0 <MX_USB_HOST_Init+0x44>)
 8008b98:	f7fe fdaa 	bl	80076f0 <USBH_Start>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d001      	beq.n	8008ba6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008ba2:	f7f8 fc25 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008ba6:	bf00      	nop
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	08008bcd 	.word	0x08008bcd
 8008bb0:	2000025c 	.word	0x2000025c
 8008bb4:	2000000c 	.word	0x2000000c

08008bb8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008bbc:	4802      	ldr	r0, [pc, #8]	; (8008bc8 <MX_USB_HOST_Process+0x10>)
 8008bbe:	f7fe fda7 	bl	8007710 <USBH_Process>
}
 8008bc2:	bf00      	nop
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	2000025c 	.word	0x2000025c

08008bcc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008bd8:	78fb      	ldrb	r3, [r7, #3]
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	2b04      	cmp	r3, #4
 8008bde:	d819      	bhi.n	8008c14 <USBH_UserProcess+0x48>
 8008be0:	a201      	add	r2, pc, #4	; (adr r2, 8008be8 <USBH_UserProcess+0x1c>)
 8008be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be6:	bf00      	nop
 8008be8:	08008c15 	.word	0x08008c15
 8008bec:	08008c05 	.word	0x08008c05
 8008bf0:	08008c15 	.word	0x08008c15
 8008bf4:	08008c0d 	.word	0x08008c0d
 8008bf8:	08008bfd 	.word	0x08008bfd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008bfc:	4b09      	ldr	r3, [pc, #36]	; (8008c24 <USBH_UserProcess+0x58>)
 8008bfe:	2203      	movs	r2, #3
 8008c00:	701a      	strb	r2, [r3, #0]
  break;
 8008c02:	e008      	b.n	8008c16 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008c04:	4b07      	ldr	r3, [pc, #28]	; (8008c24 <USBH_UserProcess+0x58>)
 8008c06:	2202      	movs	r2, #2
 8008c08:	701a      	strb	r2, [r3, #0]
  break;
 8008c0a:	e004      	b.n	8008c16 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008c0c:	4b05      	ldr	r3, [pc, #20]	; (8008c24 <USBH_UserProcess+0x58>)
 8008c0e:	2201      	movs	r2, #1
 8008c10:	701a      	strb	r2, [r3, #0]
  break;
 8008c12:	e000      	b.n	8008c16 <USBH_UserProcess+0x4a>

  default:
  break;
 8008c14:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008c16:	bf00      	nop
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	200000c8 	.word	0x200000c8

08008c28 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b08a      	sub	sp, #40	; 0x28
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c30:	f107 0314 	add.w	r3, r7, #20
 8008c34:	2200      	movs	r2, #0
 8008c36:	601a      	str	r2, [r3, #0]
 8008c38:	605a      	str	r2, [r3, #4]
 8008c3a:	609a      	str	r2, [r3, #8]
 8008c3c:	60da      	str	r2, [r3, #12]
 8008c3e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c48:	d147      	bne.n	8008cda <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	613b      	str	r3, [r7, #16]
 8008c4e:	4b25      	ldr	r3, [pc, #148]	; (8008ce4 <HAL_HCD_MspInit+0xbc>)
 8008c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c52:	4a24      	ldr	r2, [pc, #144]	; (8008ce4 <HAL_HCD_MspInit+0xbc>)
 8008c54:	f043 0301 	orr.w	r3, r3, #1
 8008c58:	6313      	str	r3, [r2, #48]	; 0x30
 8008c5a:	4b22      	ldr	r3, [pc, #136]	; (8008ce4 <HAL_HCD_MspInit+0xbc>)
 8008c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	613b      	str	r3, [r7, #16]
 8008c64:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008c66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c70:	2300      	movs	r3, #0
 8008c72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008c74:	f107 0314 	add.w	r3, r7, #20
 8008c78:	4619      	mov	r1, r3
 8008c7a:	481b      	ldr	r0, [pc, #108]	; (8008ce8 <HAL_HCD_MspInit+0xc0>)
 8008c7c:	f7f8 ffdc 	bl	8001c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008c80:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c86:	2302      	movs	r3, #2
 8008c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c92:	230a      	movs	r3, #10
 8008c94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c96:	f107 0314 	add.w	r3, r7, #20
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	4812      	ldr	r0, [pc, #72]	; (8008ce8 <HAL_HCD_MspInit+0xc0>)
 8008c9e:	f7f8 ffcb 	bl	8001c38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008ca2:	4b10      	ldr	r3, [pc, #64]	; (8008ce4 <HAL_HCD_MspInit+0xbc>)
 8008ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca6:	4a0f      	ldr	r2, [pc, #60]	; (8008ce4 <HAL_HCD_MspInit+0xbc>)
 8008ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cac:	6353      	str	r3, [r2, #52]	; 0x34
 8008cae:	2300      	movs	r3, #0
 8008cb0:	60fb      	str	r3, [r7, #12]
 8008cb2:	4b0c      	ldr	r3, [pc, #48]	; (8008ce4 <HAL_HCD_MspInit+0xbc>)
 8008cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cb6:	4a0b      	ldr	r2, [pc, #44]	; (8008ce4 <HAL_HCD_MspInit+0xbc>)
 8008cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8008cbe:	4b09      	ldr	r3, [pc, #36]	; (8008ce4 <HAL_HCD_MspInit+0xbc>)
 8008cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cc6:	60fb      	str	r3, [r7, #12]
 8008cc8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008cca:	2200      	movs	r2, #0
 8008ccc:	2100      	movs	r1, #0
 8008cce:	2043      	movs	r0, #67	; 0x43
 8008cd0:	f7f8 ff7b 	bl	8001bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008cd4:	2043      	movs	r0, #67	; 0x43
 8008cd6:	f7f8 ff94 	bl	8001c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008cda:	bf00      	nop
 8008cdc:	3728      	adds	r7, #40	; 0x28
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	40023800 	.word	0x40023800
 8008ce8:	40020000 	.word	0x40020000

08008cec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7ff f8db 	bl	8007eb6 <USBH_LL_IncTimer>
}
 8008d00:	bf00      	nop
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7ff f913 	bl	8007f42 <USBH_LL_Connect>
}
 8008d1c:	bf00      	nop
 8008d1e:	3708      	adds	r7, #8
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7ff f91c 	bl	8007f70 <USBH_LL_Disconnect>
}
 8008d38:	bf00      	nop
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	70fb      	strb	r3, [r7, #3]
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7ff f8cd 	bl	8007f0a <USBH_LL_PortEnabled>
}
 8008d70:	bf00      	nop
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7ff f8cd 	bl	8007f26 <USBH_LL_PortDisabled>
}
 8008d8c:	bf00      	nop
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d12a      	bne.n	8008dfc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008da6:	4a18      	ldr	r2, [pc, #96]	; (8008e08 <USBH_LL_Init+0x74>)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a15      	ldr	r2, [pc, #84]	; (8008e08 <USBH_LL_Init+0x74>)
 8008db2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008db6:	4b14      	ldr	r3, [pc, #80]	; (8008e08 <USBH_LL_Init+0x74>)
 8008db8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008dbc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008dbe:	4b12      	ldr	r3, [pc, #72]	; (8008e08 <USBH_LL_Init+0x74>)
 8008dc0:	2208      	movs	r2, #8
 8008dc2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008dc4:	4b10      	ldr	r3, [pc, #64]	; (8008e08 <USBH_LL_Init+0x74>)
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008dca:	4b0f      	ldr	r3, [pc, #60]	; (8008e08 <USBH_LL_Init+0x74>)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008dd0:	4b0d      	ldr	r3, [pc, #52]	; (8008e08 <USBH_LL_Init+0x74>)
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008dd6:	4b0c      	ldr	r3, [pc, #48]	; (8008e08 <USBH_LL_Init+0x74>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008ddc:	480a      	ldr	r0, [pc, #40]	; (8008e08 <USBH_LL_Init+0x74>)
 8008dde:	f7f9 f8e0 	bl	8001fa2 <HAL_HCD_Init>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d001      	beq.n	8008dec <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008de8:	f7f8 fb02 	bl	80013f0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008dec:	4806      	ldr	r0, [pc, #24]	; (8008e08 <USBH_LL_Init+0x74>)
 8008dee:	f7f9 fcc4 	bl	800277a <HAL_HCD_GetCurrentFrame>
 8008df2:	4603      	mov	r3, r0
 8008df4:	4619      	mov	r1, r3
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f7ff f84e 	bl	8007e98 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	20000634 	.word	0x20000634

08008e0c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e14:	2300      	movs	r3, #0
 8008e16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7f9 fc33 	bl	800268e <HAL_HCD_Start>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e2c:	7bfb      	ldrb	r3, [r7, #15]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 f95c 	bl	80090ec <USBH_Get_USB_Status>
 8008e34:	4603      	mov	r3, r0
 8008e36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e38:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b084      	sub	sp, #16
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7f9 fc3b 	bl	80026d4 <HAL_HCD_Stop>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e62:	7bfb      	ldrb	r3, [r7, #15]
 8008e64:	4618      	mov	r0, r3
 8008e66:	f000 f941 	bl	80090ec <USBH_Get_USB_Status>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008e80:	2301      	movs	r3, #1
 8008e82:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7f9 fc83 	bl	8002796 <HAL_HCD_GetCurrentSpeed>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d00c      	beq.n	8008eb0 <USBH_LL_GetSpeed+0x38>
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d80d      	bhi.n	8008eb6 <USBH_LL_GetSpeed+0x3e>
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d002      	beq.n	8008ea4 <USBH_LL_GetSpeed+0x2c>
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d003      	beq.n	8008eaa <USBH_LL_GetSpeed+0x32>
 8008ea2:	e008      	b.n	8008eb6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ea8:	e008      	b.n	8008ebc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	73fb      	strb	r3, [r7, #15]
    break;
 8008eae:	e005      	b.n	8008ebc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8008eb4:	e002      	b.n	8008ebc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	73fb      	strb	r3, [r7, #15]
    break;
 8008eba:	bf00      	nop
  }
  return  speed;
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b084      	sub	sp, #16
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7f9 fc16 	bl	800270e <HAL_HCD_ResetPort>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f000 f8ff 	bl	80090ec <USBH_Get_USB_Status>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ef2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f0e:	78fa      	ldrb	r2, [r7, #3]
 8008f10:	4611      	mov	r1, r2
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7f9 fc1d 	bl	8002752 <HAL_HCD_HC_GetXferCount>
 8008f18:	4603      	mov	r3, r0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3708      	adds	r7, #8
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008f22:	b590      	push	{r4, r7, lr}
 8008f24:	b089      	sub	sp, #36	; 0x24
 8008f26:	af04      	add	r7, sp, #16
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	4608      	mov	r0, r1
 8008f2c:	4611      	mov	r1, r2
 8008f2e:	461a      	mov	r2, r3
 8008f30:	4603      	mov	r3, r0
 8008f32:	70fb      	strb	r3, [r7, #3]
 8008f34:	460b      	mov	r3, r1
 8008f36:	70bb      	strb	r3, [r7, #2]
 8008f38:	4613      	mov	r3, r2
 8008f3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008f4a:	787c      	ldrb	r4, [r7, #1]
 8008f4c:	78ba      	ldrb	r2, [r7, #2]
 8008f4e:	78f9      	ldrb	r1, [r7, #3]
 8008f50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008f52:	9302      	str	r3, [sp, #8]
 8008f54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008f58:	9301      	str	r3, [sp, #4]
 8008f5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	4623      	mov	r3, r4
 8008f62:	f7f9 f880 	bl	8002066 <HAL_HCD_HC_Init>
 8008f66:	4603      	mov	r3, r0
 8008f68:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f000 f8bd 	bl	80090ec <USBH_Get_USB_Status>
 8008f72:	4603      	mov	r3, r0
 8008f74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f76:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3714      	adds	r7, #20
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd90      	pop	{r4, r7, pc}

08008f80 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	460b      	mov	r3, r1
 8008f8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f9a:	78fa      	ldrb	r2, [r7, #3]
 8008f9c:	4611      	mov	r1, r2
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7f9 f8f0 	bl	8002184 <HAL_HCD_HC_Halt>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 f89e 	bl	80090ec <USBH_Get_USB_Status>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008fbe:	b590      	push	{r4, r7, lr}
 8008fc0:	b089      	sub	sp, #36	; 0x24
 8008fc2:	af04      	add	r7, sp, #16
 8008fc4:	6078      	str	r0, [r7, #4]
 8008fc6:	4608      	mov	r0, r1
 8008fc8:	4611      	mov	r1, r2
 8008fca:	461a      	mov	r2, r3
 8008fcc:	4603      	mov	r3, r0
 8008fce:	70fb      	strb	r3, [r7, #3]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	70bb      	strb	r3, [r7, #2]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008fe6:	787c      	ldrb	r4, [r7, #1]
 8008fe8:	78ba      	ldrb	r2, [r7, #2]
 8008fea:	78f9      	ldrb	r1, [r7, #3]
 8008fec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ff0:	9303      	str	r3, [sp, #12]
 8008ff2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ff4:	9302      	str	r3, [sp, #8]
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff8:	9301      	str	r3, [sp, #4]
 8008ffa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ffe:	9300      	str	r3, [sp, #0]
 8009000:	4623      	mov	r3, r4
 8009002:	f7f9 f8e3 	bl	80021cc <HAL_HCD_HC_SubmitRequest>
 8009006:	4603      	mov	r3, r0
 8009008:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800900a:	7bfb      	ldrb	r3, [r7, #15]
 800900c:	4618      	mov	r0, r3
 800900e:	f000 f86d 	bl	80090ec <USBH_Get_USB_Status>
 8009012:	4603      	mov	r3, r0
 8009014:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009016:	7bbb      	ldrb	r3, [r7, #14]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3714      	adds	r7, #20
 800901c:	46bd      	mov	sp, r7
 800901e:	bd90      	pop	{r4, r7, pc}

08009020 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	460b      	mov	r3, r1
 800902a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009032:	78fa      	ldrb	r2, [r7, #3]
 8009034:	4611      	mov	r1, r2
 8009036:	4618      	mov	r0, r3
 8009038:	f7f9 fb77 	bl	800272a <HAL_HCD_HC_GetURBState>
 800903c:	4603      	mov	r3, r0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b082      	sub	sp, #8
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
 800904e:	460b      	mov	r3, r1
 8009050:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009058:	2b01      	cmp	r3, #1
 800905a:	d103      	bne.n	8009064 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800905c:	78fb      	ldrb	r3, [r7, #3]
 800905e:	4618      	mov	r0, r3
 8009060:	f000 f870 	bl	8009144 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009064:	20c8      	movs	r0, #200	; 0xc8
 8009066:	f7f8 fcb1 	bl	80019cc <HAL_Delay>
  return USBH_OK;
 800906a:	2300      	movs	r3, #0
}
 800906c:	4618      	mov	r0, r3
 800906e:	3708      	adds	r7, #8
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	460b      	mov	r3, r1
 800907e:	70fb      	strb	r3, [r7, #3]
 8009080:	4613      	mov	r3, r2
 8009082:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800908a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800908c:	78fb      	ldrb	r3, [r7, #3]
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	212c      	movs	r1, #44	; 0x2c
 8009092:	fb01 f303 	mul.w	r3, r1, r3
 8009096:	4413      	add	r3, r2
 8009098:	333b      	adds	r3, #59	; 0x3b
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d009      	beq.n	80090b4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80090a0:	78fb      	ldrb	r3, [r7, #3]
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	212c      	movs	r1, #44	; 0x2c
 80090a6:	fb01 f303 	mul.w	r3, r1, r3
 80090aa:	4413      	add	r3, r2
 80090ac:	3354      	adds	r3, #84	; 0x54
 80090ae:	78ba      	ldrb	r2, [r7, #2]
 80090b0:	701a      	strb	r2, [r3, #0]
 80090b2:	e008      	b.n	80090c6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80090b4:	78fb      	ldrb	r3, [r7, #3]
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	212c      	movs	r1, #44	; 0x2c
 80090ba:	fb01 f303 	mul.w	r3, r1, r3
 80090be:	4413      	add	r3, r2
 80090c0:	3355      	adds	r3, #85	; 0x55
 80090c2:	78ba      	ldrb	r2, [r7, #2]
 80090c4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f7f8 fc75 	bl	80019cc <HAL_Delay>
}
 80090e2:	bf00      	nop
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
	...

080090ec <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	4603      	mov	r3, r0
 80090f4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090f6:	2300      	movs	r3, #0
 80090f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80090fa:	79fb      	ldrb	r3, [r7, #7]
 80090fc:	2b03      	cmp	r3, #3
 80090fe:	d817      	bhi.n	8009130 <USBH_Get_USB_Status+0x44>
 8009100:	a201      	add	r2, pc, #4	; (adr r2, 8009108 <USBH_Get_USB_Status+0x1c>)
 8009102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009106:	bf00      	nop
 8009108:	08009119 	.word	0x08009119
 800910c:	0800911f 	.word	0x0800911f
 8009110:	08009125 	.word	0x08009125
 8009114:	0800912b 	.word	0x0800912b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009118:	2300      	movs	r3, #0
 800911a:	73fb      	strb	r3, [r7, #15]
    break;
 800911c:	e00b      	b.n	8009136 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800911e:	2302      	movs	r3, #2
 8009120:	73fb      	strb	r3, [r7, #15]
    break;
 8009122:	e008      	b.n	8009136 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009124:	2301      	movs	r3, #1
 8009126:	73fb      	strb	r3, [r7, #15]
    break;
 8009128:	e005      	b.n	8009136 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800912a:	2302      	movs	r3, #2
 800912c:	73fb      	strb	r3, [r7, #15]
    break;
 800912e:	e002      	b.n	8009136 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009130:	2302      	movs	r3, #2
 8009132:	73fb      	strb	r3, [r7, #15]
    break;
 8009134:	bf00      	nop
  }
  return usb_status;
 8009136:	7bfb      	ldrb	r3, [r7, #15]
}
 8009138:	4618      	mov	r0, r3
 800913a:	3714      	adds	r7, #20
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	4603      	mov	r3, r0
 800914c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800914e:	79fb      	ldrb	r3, [r7, #7]
 8009150:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009152:	79fb      	ldrb	r3, [r7, #7]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d102      	bne.n	800915e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8009158:	2301      	movs	r3, #1
 800915a:	73fb      	strb	r3, [r7, #15]
 800915c:	e001      	b.n	8009162 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800915e:	2300      	movs	r3, #0
 8009160:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009162:	7bfb      	ldrb	r3, [r7, #15]
 8009164:	461a      	mov	r2, r3
 8009166:	2101      	movs	r1, #1
 8009168:	4803      	ldr	r0, [pc, #12]	; (8009178 <MX_DriverVbusFS+0x34>)
 800916a:	f7f8 ff01 	bl	8001f70 <HAL_GPIO_WritePin>
}
 800916e:	bf00      	nop
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	40020800 	.word	0x40020800

0800917c <__errno>:
 800917c:	4b01      	ldr	r3, [pc, #4]	; (8009184 <__errno+0x8>)
 800917e:	6818      	ldr	r0, [r3, #0]
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	2000002c 	.word	0x2000002c

08009188 <__libc_init_array>:
 8009188:	b570      	push	{r4, r5, r6, lr}
 800918a:	4d0d      	ldr	r5, [pc, #52]	; (80091c0 <__libc_init_array+0x38>)
 800918c:	4c0d      	ldr	r4, [pc, #52]	; (80091c4 <__libc_init_array+0x3c>)
 800918e:	1b64      	subs	r4, r4, r5
 8009190:	10a4      	asrs	r4, r4, #2
 8009192:	2600      	movs	r6, #0
 8009194:	42a6      	cmp	r6, r4
 8009196:	d109      	bne.n	80091ac <__libc_init_array+0x24>
 8009198:	4d0b      	ldr	r5, [pc, #44]	; (80091c8 <__libc_init_array+0x40>)
 800919a:	4c0c      	ldr	r4, [pc, #48]	; (80091cc <__libc_init_array+0x44>)
 800919c:	f000 f8f8 	bl	8009390 <_init>
 80091a0:	1b64      	subs	r4, r4, r5
 80091a2:	10a4      	asrs	r4, r4, #2
 80091a4:	2600      	movs	r6, #0
 80091a6:	42a6      	cmp	r6, r4
 80091a8:	d105      	bne.n	80091b6 <__libc_init_array+0x2e>
 80091aa:	bd70      	pop	{r4, r5, r6, pc}
 80091ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80091b0:	4798      	blx	r3
 80091b2:	3601      	adds	r6, #1
 80091b4:	e7ee      	b.n	8009194 <__libc_init_array+0xc>
 80091b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ba:	4798      	blx	r3
 80091bc:	3601      	adds	r6, #1
 80091be:	e7f2      	b.n	80091a6 <__libc_init_array+0x1e>
 80091c0:	080093cc 	.word	0x080093cc
 80091c4:	080093cc 	.word	0x080093cc
 80091c8:	080093cc 	.word	0x080093cc
 80091cc:	080093d0 	.word	0x080093d0

080091d0 <malloc>:
 80091d0:	4b02      	ldr	r3, [pc, #8]	; (80091dc <malloc+0xc>)
 80091d2:	4601      	mov	r1, r0
 80091d4:	6818      	ldr	r0, [r3, #0]
 80091d6:	f000 b863 	b.w	80092a0 <_malloc_r>
 80091da:	bf00      	nop
 80091dc:	2000002c 	.word	0x2000002c

080091e0 <free>:
 80091e0:	4b02      	ldr	r3, [pc, #8]	; (80091ec <free+0xc>)
 80091e2:	4601      	mov	r1, r0
 80091e4:	6818      	ldr	r0, [r3, #0]
 80091e6:	f000 b80b 	b.w	8009200 <_free_r>
 80091ea:	bf00      	nop
 80091ec:	2000002c 	.word	0x2000002c

080091f0 <memset>:
 80091f0:	4402      	add	r2, r0
 80091f2:	4603      	mov	r3, r0
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d100      	bne.n	80091fa <memset+0xa>
 80091f8:	4770      	bx	lr
 80091fa:	f803 1b01 	strb.w	r1, [r3], #1
 80091fe:	e7f9      	b.n	80091f4 <memset+0x4>

08009200 <_free_r>:
 8009200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009202:	2900      	cmp	r1, #0
 8009204:	d048      	beq.n	8009298 <_free_r+0x98>
 8009206:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800920a:	9001      	str	r0, [sp, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	f1a1 0404 	sub.w	r4, r1, #4
 8009212:	bfb8      	it	lt
 8009214:	18e4      	addlt	r4, r4, r3
 8009216:	f000 f8ad 	bl	8009374 <__malloc_lock>
 800921a:	4a20      	ldr	r2, [pc, #128]	; (800929c <_free_r+0x9c>)
 800921c:	9801      	ldr	r0, [sp, #4]
 800921e:	6813      	ldr	r3, [r2, #0]
 8009220:	4615      	mov	r5, r2
 8009222:	b933      	cbnz	r3, 8009232 <_free_r+0x32>
 8009224:	6063      	str	r3, [r4, #4]
 8009226:	6014      	str	r4, [r2, #0]
 8009228:	b003      	add	sp, #12
 800922a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800922e:	f000 b8a7 	b.w	8009380 <__malloc_unlock>
 8009232:	42a3      	cmp	r3, r4
 8009234:	d90b      	bls.n	800924e <_free_r+0x4e>
 8009236:	6821      	ldr	r1, [r4, #0]
 8009238:	1862      	adds	r2, r4, r1
 800923a:	4293      	cmp	r3, r2
 800923c:	bf04      	itt	eq
 800923e:	681a      	ldreq	r2, [r3, #0]
 8009240:	685b      	ldreq	r3, [r3, #4]
 8009242:	6063      	str	r3, [r4, #4]
 8009244:	bf04      	itt	eq
 8009246:	1852      	addeq	r2, r2, r1
 8009248:	6022      	streq	r2, [r4, #0]
 800924a:	602c      	str	r4, [r5, #0]
 800924c:	e7ec      	b.n	8009228 <_free_r+0x28>
 800924e:	461a      	mov	r2, r3
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	b10b      	cbz	r3, 8009258 <_free_r+0x58>
 8009254:	42a3      	cmp	r3, r4
 8009256:	d9fa      	bls.n	800924e <_free_r+0x4e>
 8009258:	6811      	ldr	r1, [r2, #0]
 800925a:	1855      	adds	r5, r2, r1
 800925c:	42a5      	cmp	r5, r4
 800925e:	d10b      	bne.n	8009278 <_free_r+0x78>
 8009260:	6824      	ldr	r4, [r4, #0]
 8009262:	4421      	add	r1, r4
 8009264:	1854      	adds	r4, r2, r1
 8009266:	42a3      	cmp	r3, r4
 8009268:	6011      	str	r1, [r2, #0]
 800926a:	d1dd      	bne.n	8009228 <_free_r+0x28>
 800926c:	681c      	ldr	r4, [r3, #0]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	6053      	str	r3, [r2, #4]
 8009272:	4421      	add	r1, r4
 8009274:	6011      	str	r1, [r2, #0]
 8009276:	e7d7      	b.n	8009228 <_free_r+0x28>
 8009278:	d902      	bls.n	8009280 <_free_r+0x80>
 800927a:	230c      	movs	r3, #12
 800927c:	6003      	str	r3, [r0, #0]
 800927e:	e7d3      	b.n	8009228 <_free_r+0x28>
 8009280:	6825      	ldr	r5, [r4, #0]
 8009282:	1961      	adds	r1, r4, r5
 8009284:	428b      	cmp	r3, r1
 8009286:	bf04      	itt	eq
 8009288:	6819      	ldreq	r1, [r3, #0]
 800928a:	685b      	ldreq	r3, [r3, #4]
 800928c:	6063      	str	r3, [r4, #4]
 800928e:	bf04      	itt	eq
 8009290:	1949      	addeq	r1, r1, r5
 8009292:	6021      	streq	r1, [r4, #0]
 8009294:	6054      	str	r4, [r2, #4]
 8009296:	e7c7      	b.n	8009228 <_free_r+0x28>
 8009298:	b003      	add	sp, #12
 800929a:	bd30      	pop	{r4, r5, pc}
 800929c:	200000cc 	.word	0x200000cc

080092a0 <_malloc_r>:
 80092a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a2:	1ccd      	adds	r5, r1, #3
 80092a4:	f025 0503 	bic.w	r5, r5, #3
 80092a8:	3508      	adds	r5, #8
 80092aa:	2d0c      	cmp	r5, #12
 80092ac:	bf38      	it	cc
 80092ae:	250c      	movcc	r5, #12
 80092b0:	2d00      	cmp	r5, #0
 80092b2:	4606      	mov	r6, r0
 80092b4:	db01      	blt.n	80092ba <_malloc_r+0x1a>
 80092b6:	42a9      	cmp	r1, r5
 80092b8:	d903      	bls.n	80092c2 <_malloc_r+0x22>
 80092ba:	230c      	movs	r3, #12
 80092bc:	6033      	str	r3, [r6, #0]
 80092be:	2000      	movs	r0, #0
 80092c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092c2:	f000 f857 	bl	8009374 <__malloc_lock>
 80092c6:	4921      	ldr	r1, [pc, #132]	; (800934c <_malloc_r+0xac>)
 80092c8:	680a      	ldr	r2, [r1, #0]
 80092ca:	4614      	mov	r4, r2
 80092cc:	b99c      	cbnz	r4, 80092f6 <_malloc_r+0x56>
 80092ce:	4f20      	ldr	r7, [pc, #128]	; (8009350 <_malloc_r+0xb0>)
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	b923      	cbnz	r3, 80092de <_malloc_r+0x3e>
 80092d4:	4621      	mov	r1, r4
 80092d6:	4630      	mov	r0, r6
 80092d8:	f000 f83c 	bl	8009354 <_sbrk_r>
 80092dc:	6038      	str	r0, [r7, #0]
 80092de:	4629      	mov	r1, r5
 80092e0:	4630      	mov	r0, r6
 80092e2:	f000 f837 	bl	8009354 <_sbrk_r>
 80092e6:	1c43      	adds	r3, r0, #1
 80092e8:	d123      	bne.n	8009332 <_malloc_r+0x92>
 80092ea:	230c      	movs	r3, #12
 80092ec:	6033      	str	r3, [r6, #0]
 80092ee:	4630      	mov	r0, r6
 80092f0:	f000 f846 	bl	8009380 <__malloc_unlock>
 80092f4:	e7e3      	b.n	80092be <_malloc_r+0x1e>
 80092f6:	6823      	ldr	r3, [r4, #0]
 80092f8:	1b5b      	subs	r3, r3, r5
 80092fa:	d417      	bmi.n	800932c <_malloc_r+0x8c>
 80092fc:	2b0b      	cmp	r3, #11
 80092fe:	d903      	bls.n	8009308 <_malloc_r+0x68>
 8009300:	6023      	str	r3, [r4, #0]
 8009302:	441c      	add	r4, r3
 8009304:	6025      	str	r5, [r4, #0]
 8009306:	e004      	b.n	8009312 <_malloc_r+0x72>
 8009308:	6863      	ldr	r3, [r4, #4]
 800930a:	42a2      	cmp	r2, r4
 800930c:	bf0c      	ite	eq
 800930e:	600b      	streq	r3, [r1, #0]
 8009310:	6053      	strne	r3, [r2, #4]
 8009312:	4630      	mov	r0, r6
 8009314:	f000 f834 	bl	8009380 <__malloc_unlock>
 8009318:	f104 000b 	add.w	r0, r4, #11
 800931c:	1d23      	adds	r3, r4, #4
 800931e:	f020 0007 	bic.w	r0, r0, #7
 8009322:	1ac2      	subs	r2, r0, r3
 8009324:	d0cc      	beq.n	80092c0 <_malloc_r+0x20>
 8009326:	1a1b      	subs	r3, r3, r0
 8009328:	50a3      	str	r3, [r4, r2]
 800932a:	e7c9      	b.n	80092c0 <_malloc_r+0x20>
 800932c:	4622      	mov	r2, r4
 800932e:	6864      	ldr	r4, [r4, #4]
 8009330:	e7cc      	b.n	80092cc <_malloc_r+0x2c>
 8009332:	1cc4      	adds	r4, r0, #3
 8009334:	f024 0403 	bic.w	r4, r4, #3
 8009338:	42a0      	cmp	r0, r4
 800933a:	d0e3      	beq.n	8009304 <_malloc_r+0x64>
 800933c:	1a21      	subs	r1, r4, r0
 800933e:	4630      	mov	r0, r6
 8009340:	f000 f808 	bl	8009354 <_sbrk_r>
 8009344:	3001      	adds	r0, #1
 8009346:	d1dd      	bne.n	8009304 <_malloc_r+0x64>
 8009348:	e7cf      	b.n	80092ea <_malloc_r+0x4a>
 800934a:	bf00      	nop
 800934c:	200000cc 	.word	0x200000cc
 8009350:	200000d0 	.word	0x200000d0

08009354 <_sbrk_r>:
 8009354:	b538      	push	{r3, r4, r5, lr}
 8009356:	4d06      	ldr	r5, [pc, #24]	; (8009370 <_sbrk_r+0x1c>)
 8009358:	2300      	movs	r3, #0
 800935a:	4604      	mov	r4, r0
 800935c:	4608      	mov	r0, r1
 800935e:	602b      	str	r3, [r5, #0]
 8009360:	f7f8 fa50 	bl	8001804 <_sbrk>
 8009364:	1c43      	adds	r3, r0, #1
 8009366:	d102      	bne.n	800936e <_sbrk_r+0x1a>
 8009368:	682b      	ldr	r3, [r5, #0]
 800936a:	b103      	cbz	r3, 800936e <_sbrk_r+0x1a>
 800936c:	6023      	str	r3, [r4, #0]
 800936e:	bd38      	pop	{r3, r4, r5, pc}
 8009370:	20000938 	.word	0x20000938

08009374 <__malloc_lock>:
 8009374:	4801      	ldr	r0, [pc, #4]	; (800937c <__malloc_lock+0x8>)
 8009376:	f000 b809 	b.w	800938c <__retarget_lock_acquire_recursive>
 800937a:	bf00      	nop
 800937c:	20000940 	.word	0x20000940

08009380 <__malloc_unlock>:
 8009380:	4801      	ldr	r0, [pc, #4]	; (8009388 <__malloc_unlock+0x8>)
 8009382:	f000 b804 	b.w	800938e <__retarget_lock_release_recursive>
 8009386:	bf00      	nop
 8009388:	20000940 	.word	0x20000940

0800938c <__retarget_lock_acquire_recursive>:
 800938c:	4770      	bx	lr

0800938e <__retarget_lock_release_recursive>:
 800938e:	4770      	bx	lr

08009390 <_init>:
 8009390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009392:	bf00      	nop
 8009394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009396:	bc08      	pop	{r3}
 8009398:	469e      	mov	lr, r3
 800939a:	4770      	bx	lr

0800939c <_fini>:
 800939c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939e:	bf00      	nop
 80093a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093a2:	bc08      	pop	{r3}
 80093a4:	469e      	mov	lr, r3
 80093a6:	4770      	bx	lr
